// NVCHANGE_BEGIN: Add VXGI

/*=============================================================================
	VXGIVoxelizationPixelShader.usf: Used to VXGI opacity & emittance voxelization
	Based on BasePassForForwardShadingPixelShader.usf & TiledDeferredShading.usf
=============================================================================*/

#include "Common.usf"
#include "BasePassForForwardShadingCommon.usf"
#include "Material.usf"
#include "VertexFactory.usf"
#include "LightmapCommon.usf"  
#include "DeferredLightingCommon.usf"
#include "ReflectionEnvironmentShared.usf"

int EmittanceShadingMode;
int EmittanceShadowQuality;
bool IsInverseSquared;
bool IsRadialLight;
bool IsSpotLight;
bool IsPointLight;
bool EnableEmissive;
bool EnableIndirectIrradiance;

int NumCascades;
float4 ShadowBufferSize;
float4x4 WorldToShadowMatrices[NUM_SHADOW_CASCADE_SURFACES];
float SoftTransitionScale0;
float SoftTransitionScale1;
float SoftTransitionScale2;
float SoftTransitionScale3;
SamplerState ShadowDepthTextureSampler;
Texture2D ShadowDepthTexture0;
Texture2D ShadowDepthTexture1;
Texture2D ShadowDepthTexture2;
Texture2D ShadowDepthTexture3;

TextureCube ShadowDepthCubeTexture;
SamplerComparisonState ShadowDepthCubeTextureSampler;
float4x4 ShadowViewProjectionMatrices[6];
float InvShadowmapResolution;
float2 PointLightDepthBiasParameters;

// Keep these two constants last.
// Otherwise, when rendering emissive materials without light info, UE detects that only the first 300-something bytes of the CB are modified, 
// and uses a smaller constant buffer, which makes D3D runtime issue a warning about a small CB.
int NumShadows;
int NumLights;

float CalculateOcclusion(float ShadowmapDepth, float SceneDepth, float TransitionScale)
{
	// The standard comparison is SceneDepth < ShadowmapDepth
	// Using a soft transition based on depth difference
	// Offsets shadows a bit but reduces self shadowing artifacts considerably
	return saturate((ShadowmapDepth - SceneDepth) * TransitionScale + 1);
}

float4 CalculateOcclusion(float4 ShadowmapDepth, float SceneDepth, float TransitionScale)
{
	return saturate((ShadowmapDepth - SceneDepth) * TransitionScale + 1);
}

float PCF1x1(float2 Fraction, float4 Values00)
{
	float2 HorizontalLerp00 = lerp(Values00.wx, Values00.zy, Fraction.xx);
	return lerp(HorizontalLerp00.x, HorizontalLerp00.y, Fraction.y);
}

float GetVxgiPointLightShadow(float3 WorldPosition, float3 LightPosition, float LightInvRadius, float DepthBias)
{
	float Shadow = 1;

	float3 LightVector = LightPosition - WorldPosition.xyz;
	float Distance = length(LightVector);

	BRANCH
	// Skip pixels outside of the light's influence
	if (Distance * LightInvRadius < 1.0f)
	{
		float3 NormalizedLightVector = LightVector / Distance;
		float3 SideVector = normalize(cross(NormalizedLightVector, float3(0, 0, 1)));
		float3 UpVector = cross(SideVector, NormalizedLightVector);

		SideVector *= InvShadowmapResolution;
		UpVector *= InvShadowmapResolution;

		// Figure out which cube face we're sampling from
		int CubeFaceIndex = 0;
		float3 AbsLightVector = abs(LightVector);
		float MaxCoordinate = max(AbsLightVector.x, max(AbsLightVector.y, AbsLightVector.z));
		if (MaxCoordinate == AbsLightVector.x)
		{
			CubeFaceIndex = AbsLightVector.x == LightVector.x ? 0 : 1;
		}
		else if (MaxCoordinate == AbsLightVector.y)
		{
			CubeFaceIndex = AbsLightVector.y == LightVector.y ? 2 : 3;
		}
		else
		{
			CubeFaceIndex = AbsLightVector.z == LightVector.z ? 4 : 5;
		}

		// Transform the position into shadow space
		float4 ShadowPosition = mul(float4(WorldPosition.xyz, 1), ShadowViewProjectionMatrices[CubeFaceIndex]);
		// Calculate the Z buffer value that would have been stored for this position in the shadow map
		float CompareDistance = ShadowPosition.z / ShadowPosition.w;
		float ShadowDepthBias = - DepthBias / ShadowPosition.w;

		Shadow = ShadowDepthCubeTexture.SampleCmpLevelZero(ShadowDepthCubeTextureSampler, NormalizedLightVector, CompareDistance + ShadowDepthBias);
	}

	return Shadow;
}

float GetVxgiSingleLightShadow(float3 WorldPosition)
{
	float DynamicShadow = 0;
	float TotalWeight = 0;

	Texture2D ShadowDepthTextures[] = 
	{
		ShadowDepthTexture0,
		ShadowDepthTexture1,
		ShadowDepthTexture2,
		ShadowDepthTexture3,
	};

	float SoftTransitionScales[] =
	{
		SoftTransitionScale0,
		SoftTransitionScale1,
		SoftTransitionScale2,
		SoftTransitionScale3,
	};

	UNROLL
	for (int ShadowIndex = 0; ShadowIndex < NUM_SHADOW_CASCADE_SURFACES; ++ShadowIndex)
	{
		if (TotalWeight < 1.0 && ShadowIndex < NumCascades)
		{
			float4 ShadowPosition = mul(float4(WorldPosition.xyz, 1), WorldToShadowMatrices[ShadowIndex]);
			ShadowPosition.xy /= ShadowPosition.w;

			if (ShadowPosition.x >= ShadowBufferSize.z * 0.5 && ShadowPosition.x <= 1.0 - ShadowBufferSize.z * 0.5 
			 && ShadowPosition.y >= ShadowBufferSize.w * 0.5 && ShadowPosition.y <= 1.0 - ShadowBufferSize.w * 0.5)
			{
				// Clamp pixel depth in light space for shadowing opaque, because areas of the shadow depth buffer that weren't rendered to will have been cleared to 1
				// We want to force the shadow comparison to result in 'unshadowed' in that case, regardless of whether the pixel being shaded is in front or behind that plane
				float SceneDepth = min(ShadowPosition.z, 0.99999f);
				float TransitionScale = SoftTransitionScales[ShadowIndex];
				float CascadeShadow;
				
				float2 Weights = saturate(10.0 - 20.0 * abs(ShadowPosition.xy - 0.5));
				float Weight = Weights.x * Weights.y * (1 - TotalWeight);
					
				float2 TexelPos = ShadowPosition * ShadowBufferSize.xy - 0.5f;	// bias to be consistent with texture filtering hardware

				// Compute the derivatives and make sure we don't sample too fine shadow map level
				float2 TexelPosDeriv = max(ddx(TexelPos), ddy(TexelPos));
				if(max(TexelPosDeriv.x, TexelPosDeriv.y) > 2.0 && ShadowIndex < NumCascades - 1)
					Weight = 0;

				if(Weight > 0)
				{
					if (EmittanceShadowQuality == 0)
					{
						float ShadowmapDepth = Texture2DSampleLevel(ShadowDepthTextures[ShadowIndex], ShadowDepthTextureSampler, ShadowPosition.xy, 0).r;
						CascadeShadow = CalculateOcclusion(ShadowmapDepth, SceneDepth, TransitionScale);
					}
					else
					{
						float2 Fraction = frac(TexelPos);
						float2 TexelCenter = floor(TexelPos) + 0.5f;	// bias to get reliable texel center content

						// using Gather: xyzw in counter clockwise order starting with the sample to the lower left of the queried location
						float4 Samples = ShadowDepthTextures[ShadowIndex].Gather(ShadowDepthTextureSampler, TexelCenter * ShadowBufferSize.zw);

						float4 Values00 = CalculateOcclusion(Samples, SceneDepth, TransitionScale);
						CascadeShadow = PCF1x1(Fraction, Values00);
					}

					DynamicShadow += Weight * CascadeShadow;
					TotalWeight += Weight;
				}
			}
		}
	}

	if(TotalWeight > 0)
		return DynamicShadow / TotalWeight;

	return 1;
}

float GetForwardDynamicShadow(float3 WorldPosition)
{
	// Treat as unshadowed if the voxel is outside of the shadow map
	float DynamicShadow = 1;

	BRANCH
	if (NumShadows == 1)
	{
		BRANCH
		if (IsPointLight)
		{
			DynamicShadow = GetVxgiPointLightShadow(WorldPosition, DeferredLightUniforms.LightPosition, DeferredLightUniforms.LightInvRadius, PointLightDepthBiasParameters.x);
		}
		else
		{
			DynamicShadow = GetVxgiSingleLightShadow(WorldPosition);
		}
	}

	return DynamicShadow;
}

FDeferredLightData SetupLightData()
{
	// Build the light data struct using the DeferredLightUniforms and light defines
	// We are heavily relying on the shader compiler to optimize out constant subexpressions in GetDynamicLighting()
	FDeferredLightData LightData;
	LightData.LightPositionAndInvRadius = float4(DeferredLightUniforms.LightPosition, DeferredLightUniforms.LightInvRadius);
	LightData.LightColorAndFalloffExponent = float4(DeferredLightUniforms.LightColor, DeferredLightUniforms.LightFalloffExponent);
	LightData.LightDirection = DeferredLightUniforms.NormalizedLightDirection;
	LightData.SpotAnglesAndSourceRadius = float4(DeferredLightUniforms.SpotAngles, DeferredLightUniforms.SourceRadius, DeferredLightUniforms.SourceLength);
	LightData.MinRoughness = DeferredLightUniforms.MinRoughness;
	LightData.DistanceFadeMAD = DeferredLightUniforms.DistanceFadeMAD;
	LightData.ShadowMapChannelMask = 0;//DeferredLightUniforms.ShadowMapChannelMask;

	LightData.bInverseSquared = IsInverseSquared;
	LightData.bRadialLight = IsRadialLight;
	LightData.bSpotLight = IsSpotLight;
	LightData.bShadowed = 0;//DeferredLightUniforms.bShadowed;

	return LightData;
}

float3 GetVxgiDynamicLighting(float3 DiffuseColor, FMaterialPixelParameters MaterialParameters)
{
	uint ShadingModelID = SHADINGMODELID_DEFAULT_LIT;
	FScreenSpaceData ScreenSpaceData = (FScreenSpaceData)0;
	ScreenSpaceData.GBuffer.WorldNormal = MaterialParameters.WorldNormal;
	ScreenSpaceData.GBuffer.Roughness = 1.f;
	ScreenSpaceData.GBuffer.ShadingModelID = ShadingModelID;
	ScreenSpaceData.GBuffer.DiffuseColor = DiffuseColor;
	ScreenSpaceData.AmbientOcclusion = 1.f;

	FDeferredLightData LightData = SetupLightData();
	float3 WorldPosition = MaterialParameters.WorldPosition.xyz;
	float3 CameraVector = MaterialParameters.WorldNormal;
	float2 InUV = float2(0,0);
	float4 LightAttenuation = float4(1,1,1,1);
	uint2 Random = uint2(0,0);

	float4 LitColor = GetDynamicLighting(WorldPosition, CameraVector, InUV, ScreenSpaceData, ScreenSpaceData.GBuffer.ShadingModelID, LightData, LightAttenuation, Random);
	float Shadow = GetForwardDynamicShadow(WorldPosition);

	return LitColor.rgb * Shadow;
}

#if DIFFUSE_SPEC_INPUTS

half3 GetVxgiDiffuseColor(FMaterialPixelParameters MaterialParameters)
{
	return GetMaterialDiffuseColor( MaterialParameters );
}

#else // DIFFUSE_SPEC_INPUTS

half3 GetVxgiDiffuseColor(FMaterialPixelParameters MaterialParameters)
{
	half3 BaseColor = GetMaterialBaseColor( MaterialParameters );
	half  Metallic = (EmittanceShadingMode == 0) ? GetMaterialMetallic( MaterialParameters ) : 0.f;

#if MATERIAL_NONMETAL
	return BaseColor;
#else
	return BaseColor - BaseColor * Metallic;
#endif
}

#endif // DIFFUSE_SPEC_INPUTS

void Main( 
	FVertexFactoryInterpolantsVSToPS Interpolants,
	FForwardShadingBasePassInterpolantsVSToPS BasePassInterpolants,
	in half4 SvPosition	: SV_Position,
	in VxgiVoxelizationPSInputData VxgiPSInputData
	OPTIONAL_IsFrontFace // VxgiVoxelizationPSInputData contains SV_IsFrontFace so the compiler wants this later for some reason
	)
{
#if PACK_INTERPOLANTS
	float4 PackedInterpolants[NUM_VF_PACKED_INTERPOLANTS];
	VertexFactoryUnpackInterpolants(Interpolants, PackedInterpolants);
#endif
	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants, BasePassInterpolants.PixelPosition);

	CalcMaterialParameters(MaterialParameters, SvPosition, bIsFrontFace, BasePassInterpolants.PixelPosition
#if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
		, BasePassInterpolants.PixelPositionExcludingWPO
#endif
	);

	//Clip if the blend mode requires it.
	GetMaterialCoverageAndClipping(MaterialParameters);

#if !MATERIAL_SHADINGMODEL_UNLIT
	half3 DiffuseColor = GetVxgiDiffuseColor( MaterialParameters );
#endif

	half3 Color = 0;

	if (VxgiIsEmissiveVoxelizationPass)
	{
		if (EnableEmissive)
		{
			Color += GetMaterialEmissive(MaterialParameters);
		}

		if (EnableIndirectIrradiance)
		{
#if !MATERIAL_SHADINGMODEL_UNLIT
			Color += DiffuseColor * VxgiGetIndirectIrradiance(MaterialParameters.WorldPosition, MaterialParameters.WorldNormal) / PI;
			Color += DiffuseColor * GetSkySHDiffuse(MaterialParameters.WorldNormal);
#endif
		}

		if (NumLights != 0)
		{
#if !MATERIAL_SHADINGMODEL_UNLIT
			Color += GetVxgiDynamicLighting(DiffuseColor, MaterialParameters);
#endif
		}
	}

	VxgiStoreVoxelizationData(VxgiPSInputData, Color);
}
