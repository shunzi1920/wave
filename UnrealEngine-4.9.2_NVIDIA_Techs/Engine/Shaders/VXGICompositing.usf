// NVCHANGE_BEGIN: Add VXGI

#include "Common.usf"
#include "DeferredShadingCommon.usf"

void AddVxgiDiffusePS(in FScreenVertexOutput Input, out float4 SceneColor : SV_TARGET0)
{
	FScreenSpaceData ScreenSpaceData = GetScreenSpaceData(Input.UV);
	FGBufferData GBuffer = ScreenSpaceData.GBuffer;
	if (GBuffer.ShadingModelID > 0)
	{
		// The VxgiDiffuse term is getting multiplied by 1/PI inside the VXGI library
		SceneColor = ScreenSpaceData.AmbientOcclusion * float4(GBuffer.DiffuseColor * ScreenSpaceData.VxgiDiffuse, 0);
	}
	else
	{
		SceneColor = float4(0,0,0,0);
	}
}

void AddVxgiRawDiffusePS(in FScreenVertexOutput Input, out float4 SceneColor : SV_TARGET0)
{
	FScreenSpaceData ScreenSpaceData = GetScreenSpaceData(Input.UV);
	SceneColor = float4(ScreenSpaceData.VxgiDiffuse, 0);
}

void ComposeVxgiGBufferPS(in FScreenVertexOutput Input, out float4 ColNormal : SV_TARGET0 )
{
	FGBufferData GBuffer = GetGBufferData(Input.UV, false);

	//Diffuse is multipled by AddVxgiDiffusePS
	if (GBuffer.ShadingModelID > 0)
	{
		bool hasSpecular = dot(GBuffer.SpecularColor, GBuffer.SpecularColor) > 0;
		ColNormal = float4(GBuffer.WorldNormal, hasSpecular ? (GBuffer.Roughness + 1e-5f) : 0);
	}
	else
	{
		//make tracing early out
		ColNormal = float4(0,0,0,0);
	}
}

// NVCHANGE_END: Add VXGI
