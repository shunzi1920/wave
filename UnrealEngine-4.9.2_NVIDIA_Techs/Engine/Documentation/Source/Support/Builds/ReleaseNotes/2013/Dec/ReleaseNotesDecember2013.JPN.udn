Title:2013年12月リリースノート
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Template:ReleaseNotes.html

[TOC(start:2 end:2)]

## ビルド情報


[REGION:simpletable]
| アイテム | 情報 |
| ---- | ---- |
| **ラベル** | [INCLUDE:#labels] |
| **ビルドされたチェンジリスト #** | 1945305 (//depot/UE4-QA/Promotable-CL-1945305) |
| **ブランチされたチェンジリスト #** | 1923033 (//depot/UE4/Promoted-CL-1923033) |
| **Visual Studioバージョン** | Microsoft Visual Studio 2012 Version 11.0.60610.01 Update 3 |
| **DirectX** | 2010年6月 |
[/REGION]

<!--
[EXCERPT:Labels]
QA_APPROVED_UE4_BUILD_2013_12  
QA_APPROVED_UE4_BUILD_CURRENT  
QA_APPROVED_UE4_BUILD_MINIMUM
[/EXCERPT:Labels]
-->

## 重要情報

 * 現時点のエンジン開発ロードマップ: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * 修正されたバグ: [UE4 Fixed Bugs December 2013](UE4_Fixed_2013_December.xlsx)
 * 周知の問題: [UE4 Known Issues December 2013](UE4_Bugs_2013_December.xlsx)
 

##主な新機能

#### エディタとツール
* **新規マテリアルエディタはデフォルトで有効です**
	* 新規マテリアルエディタはデフォルトで有効になりました！

		![](NewMaterialEditor2.png)

	* 何らかの理由で旧バージョンを使用したい場合、コマンドラインに「-oldme」を追加しなくてはいけません。

* **スケールのスナップ：不均等なスケーリングを維持します** 
	* スケールのスナップの新機能:[Preserve Non Uniform Scale] がビューポート内のスケーリングに追加されました。　
	* この新オプションはスケールのスナップメニューから使用できます。ビューポートに組み込まれたツールバーからアクセスが可能です。

		![](ScaleSnapping.png)

	* このオプションをアクティベートすると、スケールのスナップは、不均等なスケーリングでオブジェクトをインタラクティブにスケーリングした結果と微妙に異なる挙動となります（つまり、X、Y、Zコンポーネントのスケール係数が異なります）。
	* スナップのスケーリングは通常は、各コンポーネントはグリッドのインクリメントに個別にスナップされます。結果としてスケーリング時にオブジェクトに多少変形が生じます。このオプションを有効にすることにより、スケールをスナップするグリッドへ一番大きなコンポーネントをスナップしながら各コンポーネントの割合を保つことによって変形を回避することができます。

* **PIE（Play-In-Editor）:複数のワールド**
	* この機能はPIEネットワークの動作方法を変更します。ユーザーのPIEゲームへ接続するためにUE4の新規インスタンスを起動する代わりに、既にロードしたUE4のインスタンス内で、エディタが複数のワールドをスポーンするようになりました。
		* **[Shift-Tab] と [Ctrl-Tab]** キー操作でPIEが焦点とするウィンドウを循環することができます。

	* **デバッグ作業**	
		* 複数のワールドから成るシナリオを実行時に、デバッグ作業を行うワールドを選択するための追加のドロップダウンボックスがブループリントエディタに追加されました。

			![](PIENetworking02.png)	

		動作中の最終スクリーンショット：		

			![](PIENetworking04.png)

* **コンテンツブラウザに表示されるフォルダ**
	* コンテンツブラウザの「Asset」ビューにフォルダを表示する機能が追加されました。

		![](ContentBrowserFolders01.png)

	*フォルダの表示の有効は、[Show Only Assets In Selected Folders] の有効を暗示することに留意してください。ツリービューでルートを選択すると全てのコンテンツが表示されることはありません。 
	* フォルダは以下のように表示されます。フォルダはコンテンツブラウザの全ビューモードで表示されます。

		![](ContentBrowserFolders02.png)

	* フォルダは、Windows Explorerとほぼ同じ挙動をします。ドラッグ＆ドロップ、名前の変更（F2）、削除オプションは全て機能します。
	* [Asset View] へ新規フォルダを作成することもできます。
	* 新しく [Up] ボタンが追加されました（ナビゲーショントレールの左）。このボタンをクリックするとディレクトリへ移動します。 [Alt+Up] キー操作でも移動可能です。	

		![](ContentBrowserFolders03.png)

	* アセットの検索時は、フォルダは非表示となり、アセットは再帰的に表示されるため、以前のワークフローと同じです。

	* **フォルダの色**
		* コンテンツブラウザのフォルダの色分けが可能になりました！	

			![](FolderColors03.png)

* **パッケージ自動保存の復元**
	* 前回の編集セッションの自動保存からパッケージが復元できるようになりました。
	* 不適切なシャットダウンをエディタが検知すると、立ち上げ時にダイアログが表示されて、復元するパッケージを選択することができます。

		![](PackageAutoSaveRestoration.png)

	* この機能はディスクに書き込みが可能なパッケージの復元のみに限定されます。つまり、新規に作成された未保存のワールドなど、まだディスクに保存されていないパッケージは、この方法で自動復元を実行することができません（しかし、手動で復元が可能な自動保存ファイルをディスクに作成します）。
	* ソースコントロールが原因で読み取り専用のパッケージを復元する場合、復元処理を開始する前にこのプロセスによりパッケージファイルがチェックアウトされます。
	* デバッガを起動しながらエディタの実行時、またはエディタをオートメーションモードで起動している時は、この機能は完全に無効となります。

* **インタラクティブアクタピッカー**
	* アクタから派生したオブジェクトを取り込むプロパティは、インタラクティブピッカーを利用した編集が可能になりました	

		![](InteractiveActorPicker01.png)
			* 「ピック可能な」アクタにマウスをかざすと、カーソルがスポイトで表示されます。


		![](InteractiveActorPicker02.png)

* **カスタム仕様のUV**
	* 頂点シェーダーでマテリアルのUVチャンネルのカスタマイズを有効にする新しい機能がマテリアルエディタに追加されました。  
	* 任意の計算をコストが高いピクセルシェーダーから頂点シェーダーへ移動させることができるため、強力な最適化ツールとなります。
	* 左の図は8x8頂点グリッドを持つメッシュ上のCustomizeUVを介して計算した「中心からの距離」です。右は、ピクセルシェーダーの同計算です。  

		![](CustomizedUVs.png)


####ブループリント
* **ブループリント通信**
	* ブループリントは別ブループリントの関数および変数へアクセスが出来るようになりました！
	* パブリックへ公開している関数の変数は、インターフェースを使用せずに、デフォルトで別のブループリントでアクセスが可能になりました。  
	* コードで定義された変数と、ブループリントで定義された変数の違いはなくなりました。全ての変数を利用できます。
	* 以下のブループリントにはOpenTheDoorという名前のカスタムイベントがあります。

		![](BlueprintComms02.png)

	* OpenTheDoorイベントは、今後正規の関数呼び出しノードと一緒に呼ばれるようになりました。 

		![](BlueprintComms03.png)

	* **インターフェースからの移行**
		* ブループリントは、以前は関数の呼び出しや別のブループリントの変数へアクセスができなかったことへの対処法として、ブループリントインターフェースを使用していました。もうこの回避策を利用する必要はありません。今後はインターフェースを使用せずに、ブループリントのコミュニケーションを直接利用した移行を選択されるでしょう。ユーザーのブループリントからインターフェースを削除する新しい機能が追加されました。関数はそのまま使用できます。
		* [Find in Blueprints] (ブループリントエディタでは [Ctrl + F] キー）で、移行を簡単にするメッセージ関数の全ての用途を検索することができます。 


####アニメーション
* **アニメーションリターゲット**
	* このたび、アニメーションリターゲットのサポートが追加されました！ 
	* アニメーションリターゲットとは？
		* アニメーションリターゲットとは、特定キャラクター用に作成したアニメーションを使用して、比率の異なるキャラクターでこれを再生する機能です。 重要な点は、正しく機能させるために、共通のスケルトンを使用しなくてはいけないことです（同一ボーン名と階層）。パインドポーズのみが異なります。
	* ペルソナ（Persona）の [Skeleton Tree] ウィンドウに設定が可能なボーン移動のリターゲットは3種類あります。
		* **スケルトン**:ボーンの移動はターゲットスケルトンのバインドポーズに由来します。
		* **アニメーション**:ボーンの移動は、不変のアニメーションデータに由来します。
		* **アニメーションスケーリング**：ボーンの移動はアニメーションデータに由来しますが、スケルトンの比率でスケーリングされます。これはターゲットスケルトンのボーンの長さ（アニメーションが再生中のスケルトン）とソーススケルトン（アニメーションが作成されたスケルトン）間の比率です。				

			![](AnimationRetargeting01.png)		

		* ビューポートの[Snow] メニューから、「NonRetargeted Animation」と「Bones」をチェックすると、オリジナルアニメーションとリターゲットアニメーションの比較ができます。		
			![](AnimationRetargeting02.png)


		* この視覚化は単一アセットに作用するものですが、アニメーションブループリントにも作用します。	

			![](AnimationRetargeting03.png)



## 新機能の追加

#### エディタとツール
* DragDropEvent.GetOperationAs<FMyDragDrop>()で、ドラッグ＆ドロップ操作タイプを簡単にチェックする方法が追加されました。
* ツールヒントのスコープおよびカスタム設定処理を有効にするOnVisualizeTooltip() イベントが追加されました。
* ブランチ間の頻繁な切り替えが発生した際に、レベルエディタへプロジェクト名を明示的に付与するための「ini」オプションがエディタのユーザー設定に追加されました。
* マテリアルサムネイルにカスタムメッシュプレビューが追加されました。マテリアルエディタの [Details] パネルでプレビューするメッシュを選択してから、コンテンツブラウザをサムネイル編集モードへ切り替えて、マテリアルのプレビュープリミティブをティーポットへ変更します。
* Rocketユーザーは、エディタからすぐにフィードバックの送信が可能になりました。
* スナップ時に不均等なスケーリングを維持するオプションが追加されました。
* クックパスは、ゲームごとのエディタ環境設定に置かれました。
* コンテンツブラウザにフォルダが追加されました。
*  [Slate] ウィンドウに細い境界線が追加されました。
* シーン内のアクタをピックするために、インタラクティブなアクタに「スポイト」ピッカーが追加されました。
* ノード上の既存グラフアイコンをクリックすると、グラフビューに単独に表示します。
* 個々のキーを既存トラックへコピー/切り取り、貼り付けする際に選択キーが考慮されます。
* フォルダの色を設定するための新規のオプションがコンテンツブラウザにあります。 
* ContentBrowserリストとカラムビューは色を表示するようになりました。
* クラッシュ後のエディタの再起動時に、自動保存からの復元オプションが表示されます。
* マテリアルエディタのスレートグラフバージョンの使用が可能になりました。
	* コマンドラインに「-oldme」と入力して、旧エディタへアクセスするオプションがデフォルトで有効になっています。
	* 表現式とコメントの位置が一時的に入れ替わります。
	* Static Bool表現式はプレビューウィンドウを表示しなくなりました。
	* Material Input ノードを移動できるようになりました。
	* [ctrl+drag] キーでマテリアルの接続を移動できるようになりました。 
	*  [Enter] キーを押すと検索結果を循環します。
	* マテリアル表現式に代替の検索結果が追加されました。「lerp」と入力して線形補間の検索、[One Minus]　には「1-x」、 [Square Root] は「sqrt」と入力します。
	* ノードのタイトルバーから、パラメータ名のブループリントスタイルの編集を有効にします。
* ノードの線をドラッグしなくても接続ができるように、ブループリントスタイルのエディタで [Shift-Click] キー操作によるピンの接続が可能になりました。
* SCC Providerプラグインをオーバーライドするために、コマンドラインへ「"-SCCProvider=ProviderPluginName"」を追加できるようになりました。
* 高度なグリッドスナップ設定が、 [EditorSettings->General->Preferences->Snap] へ追加されました。
* **UnrealDocTool** 
	* ページのパブリッシュを回避するために、「NoPublish」オプションが追加されました。 
	* 特定のUDNドキュメントパスに対し、正確で相対的なターゲットパスへレンダリングさせるために 「`[RELATIVE:path]`」タグが追加されました。 


#### ブループリント
* **ブループリント通信**  
	* ブループリントへ関数を呼び出したり、別のブループリントのパブリックメンバーへのアクセスが可能になりました。別のブループリントで生成されたクラスの変数を作成することができます。また、その他のクラス同様にこれらのメンバーへアクセスすることができます。この機能をもって、2つのブループリント間の通信にブループリントインターフェースを使用する必要はなくなりました。不要となったブループリントインターフェースの削除を目的に、ブループリントの [Blueprint Properties] タブからインターフェースを削除する時に、インターフェースと関連のある全ての関数およびイベントをオプションで保存できるようになりました。この操作を行うことによって、実装しているブループリントからインターフェースを削除、インターフェースと関連のある関数とイベントの状態を保つためのオプションを選択、そしてインターフェースに使用しているMessageノードを直接Function Call ノードに接続することができます。全てのインスタンスが更新された後に、ブループリントインターフェースを削除してもかまいません。Messageノードを利用した検索を簡単にするために、 [Find in Blueprints] 機能を使用してください。
*  [Find In Any Blueprint] に、[Ctrl+Shift+F] キーバインディングが割り当てられました。
* [Blueprint Components] モードで、ソケット/ボーンを通じてコンポーネントをネイティブコンポーネントへアタッチするサポートが追加されました。
* Enumeration（列挙型）をName（名前）またはString（文字列）へ変換することができます。 
* "Get number of entries in <Enum>" ノードが追加されました。
* Behavior Treeブループリントノードが音を立てるように、APawnへ BlueprintCallable PawnMakeNoise関数が追加されました。
* ブループリントで呼び出しが可能な関数をSceneComponentへ追加しました。Get Num Children Components()、 Get Child Component（インデックス）、 Get Children Components （"Include All Descendants"チェックボックスと一緒に）、そして Get Parent Componentsが追加されました。
* ブループリントタブにカテゴリが追加されました。
* BlueprintNativeEventsにサポートが追加されました。コールチェーンにネイティブ実装される点を除いて、BlueprintImplementableEventsと似ています。インターフェースで使用すると、BPNEの機能は限定されることに留意してください。これについては今後のリリースノートで言及していきます。


#### ゲームプレイとフレームワーク
* 結合が可能なBegin/End Cusor Over EventsをHUD HitBoxで利用できるようになりました。 
* ブループリントのInputイベントを、イベントノードのプロパティに指定できるようになりました。親クラスのイベントのバインディングをオーバーライドすべきかどうかを指定します。
* ブループリントの変数、関数、マクロは、参照を格納しているクラスが読み込まれていない間に名前変更がされた場合、参照メンバーの検索に使用される内部GUIDに格納出来るようになりました。GUIDベースのシステムを従来のコンテンツに作用させるには、アセットを再保存しなくてはいけません。
* マルチプレイヤー対応PIE（Play in Editor）：1つのプロセスに複数のワールド
* UE4の1つのインスタンス下でマルチプレイヤープレイを行うことができます（接続のために別のインスタンスを起動する代わりに）。
* [Play In Settings] の [Multiplayer] オプションで「Single Process」を選択して有効にします。
* Visual Studio 2013 (VC12)に対する仮サポートを追加しました。
	* WindowsCompiler.VisualStudio2013に WindowsPlatform.Compilerを設定しました（実験的です！
	* VS2013のネイティブプロジェクトを取得するために、「"-2013"」を「GenerateProjectFiles.bat」へ渡します（オプション）。 
	* Visual Studio 2013のコンパイル時は、Windows SDK 8.1 を使用します。
	* サードパーティによるビルドスクリプトはVS2013ライブラリのパスへ更新されます。
	* 今でもWindows XPをターゲットにすることができますが、これは実験的な試みです（WindowsPlatform.SupportWindowsXP=true）。
	* 重要:現時点におけるUE4はVisual Studio 2012のみをサポートしています。コンパイルするにはVisual Studio 2012をインストールしなくてはいけません。2013バージョンは初期試験のためのテスト予備段階です。
	* 重要:サードパーティライブラリはまだVS2013へコンパイルされていないのでリンクできません。 
* UStructsから/へJsonオブジェクトを変換するユーティリティ、JsonUtilitiesモジュールが追加されました。 
* BodySetupとインスタンスあたりの基準両方で「歩行可能」と判断されるフロア法線をオーバーライド出来る機能が追加されました。有効な設定は以下の通りです：
	* Default（デフォルト）（動作に変化はありません）
	* Increase walkability（歩行範囲の拡大）（通常よりも急斜面な法線を有効にします）
	* Decrease walkability（歩行範囲の縮小）（通常よりも緩やかな法線を無効にします）
	* 注釈：現時点のAI navmeshはこれらの設定を無視します。 
* カスタムAIナビゲーションリンクは、次のパスに作用します（ドア、はしごなど）：USmartNavLinkComponent.
* ANavLinkProxyのカスタムAIナビゲーションリンクにブループリントサポートを追加しました。
* 詳細なパスファインディングデバッグをANavigationTestingActorへ追加しました。
* AIリソースのロックに、ソースのロックを表示する一般的なメカニズムを追加しました（動作と頭脳のようなものです）詳細はIAIResourceInterfaceを参照してください。
* アニメーションリターゲットの向上：スケルトンは、リターゲットとなる複数の基本ポーズをサポートします。
	* 基本ポーズは、スケルトンの別の参照ポーズです。 � 例えばメッシュの異なるサイズからなど。
	* ユーザーのシステムでリターゲットが使用されると、正確なリターゲットを処理するために、一部のアニメーションは正しい基本ポーズが必要となります（アニメートされたメッシュに基づきます）。  


#### レンダリング
* HZB オクルージョン カリングを追加しました。新規のシステムスケーリングは、以前のHWオクルージョンクエリーに基づいたシステムよりも高いオブジェクト数に適しています。現在はデフォルト設定で無効になっています。「r.HZBOcclusion 1」を有効に設定します。
* 拡張性のために GetRenderingDetailMode() 関数をブループリントに追加しました。
* コンポジットおよびポストプロセスグラフの「r.CompositionGraphDebug」へデバッグエクスポートを追加しました（yWorksを使用）。グラフはファイルをスクリーンショットフォルダへエクスポートします。  
* **適応サンプリングを用いたライトマスGIソルバ**
	* 困難なライティング状況でノイズとノイズ漏れを削減します。
	* GIソルバのアーティファクトを示すマップのソルバ品質を強化するために使用可能な、IndirectLightingQualityワールド設定を新規に追加しました。
* **カスタム仕様のUV**
	* 新しいマテリアルプロパティ、NumCustomizedUVsは、頂点シェーダーで実行されるマテリアル入力を公開します。 
	* Customized UV入力は、演算を頂点シェーダーへ移動することによりマテリアルの最適化に使用します。
* 各拡張グループのCVarは、「ini」ファイルに格納されるようになりました（BaseScalability.ini）。 
* DOF (Depth of field:被写界深度)と別の透過処理を適用前にマテリアルを描画するために、ポストプロセスマテリアルの切り込み点としてBL_BeforeTranslucencyを追加しました。
* より実用的な代替xおよびyスケール値として、ワールド単位で定義されたおおよそのTextComponentsサイズが使用できるようになりました。
* 現在のEyeAdaptation値は、ポストプロセスマテリアルをマテリアル表現式で公開するるようになりました。 Utility->EyeAdaptationSM5のみでサポートされています。
* マテリアルインスタンスでOpacityClipMaskValue、 BlendMode、 TwoSidedそしてLightingModel プロパティのオーバーライドが可能になりました。
* MaterialQualityLevelがマテリアル表現式で公開されるようになりました。
* [Rendering Detail] モードをパーティクルごとに指定できるようになりました。
* Axis Lock モジュールがGPUパーティクルエミッタでサポートされるようになりました。
*'SetEmitterEnable'関数を使用して、 パーティクルサブエミッタをブループリントから有効または無効にできるようになりました。
* r.UpsampleQualityコンソール変数を追加しました。 
	* より小さなスクリーンからアップスケーリングする時の4つの品質値の範囲です。
* **Automatic Lightmass Importance ボリューム**
	* LightmassImportanceVolumesが存在しない場合、ユーザーのシーンと結合する合成ボリュームが使用されます。
	* ユーザーがALightmassImportanceVolumeをごく簡単なシーンへ配置しないことが目的です。
	* 「'automatic volume'」の範囲は100mにクランプされます （MinimumImportanceVolumeExtentWithoutWarning）。
	* Importance Volumeが存在しない場合は警告の記録をログに取りますが、シーンがこの閾値を超えた場合はUI警告のみを表示します。
	* MinimumImportanceVolumeExtentWithoutWarningのextent値を50mから100mへ増加しました。


####アニメーション
* [Ctrl-C/Ctrl-V] キー、またはスケルトンツリーのコンテクストメニューアイテムから、ソケット用のコピーおよび貼り付け機能をPersonaに追加しました。複数のソケットを一度にコピーして、ボーンへ貼り付けることができます。
* フロアを上下に移動させるFloor Height Offset ボックスがPersonaの [Viewport] メニューに追加されました。メッシュごとに保存します。


####コア
* TAssetPtr -> UObjectから負荷時に自動変換が追加されました。
* TMapとTArrayには設置サポートに制限があるため、コピーせずにコンテナへ直接エレメントを構築することができます。
	* 単一引数コンストラクタと一緒にクラスを処理する際は、コピーのコンストラクタ呼出しを回避するために、「.Add」の代わりに「Map.Emplace」と「Array.Emplace」を使用します。 
* TMap値は演算子を利用して読み出すことができます。[]。
	* ValueType& Val = Map[Key];
	* 「std::map」とは異なり、これはconstコンテナで使用が可能で、キーが存在しない場合は新しいエレメントを挿入しません。その代りアサートします。
* 複数の文字列を簡単に可視化するために、FNameとFStringが [string view] ダイアログをサポートするようになりました。
* ラムダと一緒に使用ができる、新しい関手ベースの関数がTArrayに追加されました。
	* IndexOfByPredicate: 述部でエレメントのインデックスを検索します。
	* ContainsByPredicate: 述部と一致するエレメントをテストします。
* デバッガビジュアライザは「GenerateProjectFiles.bat」で自動的にインストールされます。
* UFUNCTION指定子がデリゲートのUFunctionへ渡されるようにUDELEGATEが追加されました。 
	* UDELEGATEがない古いタイプもまだサポートしています。
	* 例:
	* UDELEGATE(<specifiers>)
	* DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam( FDelegate, float, Var );
* DOREPARRAYとTArraysは連携しなくなりました。
	* 代わりにDOREPTARRAYを使用します。
* FVector::Dot2Dの名前が変更されました。
	* この関数の名前は、関数の動作を適切に表現していませんでした。
	* FVector::CosineAngle2Dを代わりに使用します。
* 空のTArrayへインデックスを付けると常にエラーとなります。
	* &Array[0]の回避策が原因で一部のエラーは報告されていません。
	* この種の使用法は、Array.GetTypedArray()と置き換えなくてはいけません。


#### プラットフォーム
* ライブラリのバッチの再コンパイルを単純化するためにBuildThirdPartyLibs UAT スクリプトが追加されました（全てのライブラリが有効にされたわけではありません。バッチファイルの設定方はスクリプトを参照してください）。
* 「.uplugin」ファイルへホワイトリストとブラックリストを追加しました（WindowsMoviePlayer.upluginから例を確認してください）。
* **Android**
	* メインブランチの初期のAndroidサポートは、DXTと PVRTCデバイスをサポートします。
* アンリアルプロジェクトファイルにMac OS X Services インテグレーションを追加しました。 「.uproject」ファイルの選択時に[Service Menu]、もしくはFinderのコンテクストメニューからゲームまたは生成したXcodeプロジェクトファイルを起動できるようになりました。 
* UE4の共有コンテナと文字列タイプにLLDBデータフォーマッターを実装しました。ユーザーの「~/.lldbinit」へ「"command script import UE4/Engine/Extras/LLDBDataFormatters/UE4DataFormatters.py"」を追加します。

#### ネットワーキング
* **ネットワークアクタリスト**                                           
	* 単独のネットワークアクタリストで、向上したパフォーマンスのネットワークに関連したアクタを追跡するようになりました。
* **レプリケーションの最適化**                           
	* パフォーマンスとセキュリティを考慮して、下層のプロパティレプリケーションロジックを徹底的に書き直しました。
* **接続全域に渡るワークシェアー**              
	* 接続全域に渡って共有するレプリケーションロジックの能力
* **ライフタイムプロパティ**                                        
	* パフォーマンス向上のためにプロパティを登録する新しい方法。
* **ライフタイムプロパティの条件**                     
	* ライフタイムにレプリケートされたプロパティに二次的な条件を適用する能力。
* **プロパティチェックサム**                                       
	* クライアントとサーバーの非同期状況を診断するためにプロパティチェックサムをトグルする能力。


#### オンライン
* 別のサブシステムが利用不可、または意図的にオフにされている時は、OnlineSubsystemNULLがフォールバックです。 
	* ゲームコードはオンライン関数を継続的に呼出し、実際のオンラインコミュニケーションをせずにコールバックを取得します。
*  オンラインサブシステムに新規のOnlineMessageインターフェースを追加しました。 
	* ユーザーのインボックスに列挙型のメッセージを有効にします。
	* IDでメッセージをダウンロードすることができます。
	* あるユーザーから別のユーザーへメッセージを送信することができます。
	* 個々のメッセージは削除できます。
	* メッセージペイロードは順応性のあるペイロードを有効にするために、バリアントデータタイプへ文字列のキー値ペアとして符号化されています。
	* 現時点ではMcp OSSのみに実装しています。
*  オンラインサブシステムのOnlineUserインターフェースのリファクタリングです。
	* Mcp OSS実装を追加しました。
* オンラインサブシステムのOnlineFriendsインターフェースをリファクタリングしました。
	* 従来のOSS実装を更新しました：Steam PC、 PS4、 Facebook iOS/PC、 Gamecenter iOS、 Amazon PC
	* Steam実装は各読み込み時にフレンズリストをキャッシュするようになりました。
	* 新規のMcp OSS実装を追加しました。
		* 名前が付けられたフレンズリスト上で操作が可能です。
	* デフォルト設定のフレンズリストに招待を送信するためにユーザーIDのリストを受け取るexecコマンドを追加しました。
* Engineモジュールの依存を削除するためにOnlineSubsystemをリファクタリングしました。 
	* エンジン依存は全てOnlineSubsystemUtilsモジュールにあります。
* ソースファイルからMcpコンフィグをリファクタリングしました。


## アップグレードノート

#### エディタとツール
* [World Settings] に独自のタブができました（ [Details] タブとは別です）。
* **スレート** 
	* スレートのサウンドは、FNameのよりはむしろFSlateSoundを使用するようになりました。スレートにサウンド名を格納するためのFnameの使用は非推奨となりました。
	*  FSlateSound::FromName_DEPRECATEDを利用して一時的にコードを修正することができます。
	* 正規の修正は、スレートで再生するサウンドを保持するためにSlate Widget Styleを使用します。
	* SHyperlinkのテンプレートが廃止されました。ユーザーデータを渡すにはデリゲートペイロードを使用します。
* constらしさを強調するためにスレートのTAttributesの機能が向上しました。スレートTAttributeの内部に決して副作用をもたらさないでください。 
* SPropertyEditorNumeric、 SSpinBox、 SNumericEntryBoxが一般となり、任意の数値型でパラメータ化することができます。
* [Viewport Transform] ツールバーのアイコンと色を変更しました。
* Texture2DからSlate Brush Assetを作成するために、コンテンツブラウザにコンテンツメニューアクションを追加しました。
* プロパティエディタにWYSIWYG SlateBrushプレビューが追加されました。
* マウスの中クリックでコンテンツブラウザフィルタの削除が可能になりました。
* **UnrealDocTool** 
	* 自動生成されるヘッダIDとブックマークの名前が小文字になって、「'_'」に代わって「'(' and ')'」を使用します。
* **プラグイン**
	* プロジェクトプラグインのリストは、「Game.ini」ファイルから「Engine.ini」ファイルへ移動しました。


#### ブループリント
* ブループリントマクロが、重複した変数名をチェックするようになりました。
* 初めにコメントを非選択にせずに、広範囲にわたるブループリントノードをコメントボックスにアタッチできるようになりました。
*  [My Blueprint] から [Graph] へマクロをドラッグできるようになりました。
* 新しいエレメントを追加する前に [MyBlueprint] 検索フィルタをリセットするコールが追加されました。新しいエレメントは一度作成されると表示されます。
* Vector2Dブループリントグラフアクションは、標準のベクタークラスから分離してVector2Dカテゴリへ移動しました。 
* カラーピッカーのAlphaセクションが、ブループリントグラフカラーピンで有効になりました。
* セクション付近にコメントを作成する機能が、エディタのノードコンテクストメニューに追加されました。
* ソケットコンポーネント用の [Details] ビューは、正しくカテゴリを配置してブループリントエディタで常に表示されるように更新されました。
* 変数をベースとしたノードに使用する変数を配置する機能が、ブループリントエディタのコンテキストメニューに追加されました。
* グラフの一般ノードカリングは、より正確性を増して、ノードの幅/高さを考慮するようになりました。
* より大きく展開するためのクラスピッカーダイアログが作成されて、デフォルトのクラス選択領域の折りたたみが可能になりました。
* Blueprint関数とイベントはより記述的な名前を使用し、フォーマット化されました。 
* タイトルが既に可視出来る場合、Blueprintノードの名前を変更しても選択しているノードを中心に置きません。


#### ゲームプレイとフレームワーク
* USpringArmComponentの一部の挙動は、サブクラスでオーバーライドが簡単に出来るように複数の仮想メモリに分割されました。 
* フラッシュ時にファイル階層と比較しないために、configの書き込みを有効にする新規のクラスフラグが追加されました。
* DrawHUD外部で使用した時の警告の代わりに、HUDドローコールからBlueprintProtectedを削除しました。
* FPostProcessSettingsの多数のプロパティへ BlueprintTypeとBlueprintReadWriteが追加されました。 
* UPlayerInput::ExecBindingsがDebugExecBindings へ名前変更されて、出荷ビルドからコンパイルされます。
* UWorldFromContextGetter::GetWorldFromContextObject は、オブジェクトのクラスが渡された先が未対応、またはサポートしているオブジェクトが単にNULLのUWorldポインタを返しているかを区別するために、bool型の参照変数を受け取ります。
* AActor::CustomTimeDilationは全てのコンポーネントに渡されるDeltaTimeへ正しく適用されるようになりました。CustomTimeDilationを手動で適用しているコンポーネントは、これを2度適用するようになりました。 
* **UEngine関数の変更**
	* GEngine->GetNetMode()の代わりに AActor::GetNetMode() もしくは UWorld::GetNetMode() を使用します
	* GEngine->GetNetDriver()の代わりにAActor::GetNetDriver() または UWorld::GetNetDriver() を使用します。
* **他にも数多くのGEngine関数が必須のUWorldを使用するようになりました。
	* GEngine->GetLocalPlayerIterator( GetWorld() );
	* GEngine->GetGamePlayers( GetWorld() );
	* GEngine->GetGamePlayers( GetWorld() );
	* GEngine->GetGamePlayer( GetWorld(), PlayerIndex );
	* GEngine->GetFirstGamePlayer( GetWorld() ) const;
* Pathfollowingのデフォルトの動作が改善されました。最も重要なことに、デフォルト設定の「許容半径」は、現在も有効で以前使用されていた「0.0」の代わりに、Agentの半径を使用するようになりました。　


#### レンダリング
* ライティングは全マップで再ビルドする必要があります。
* 減少したLODの拡張制限がより実用的になりました（一部のデフォルトは更新が必要かもしれません）。


####アニメーション
* 別の位相 ValidateAnimNodePostCompileをanim graphノードに追加しました。このノードは、ノード（最終クラスに関係するノードのみ）が最終CDOに対して何かしらの正当性を確認する際に、コンパイルの最後に呼ばれます。 
* transition pose evaluator ノードを配置するオプション表示をメニューから外して、誤ったグラフにうっかり配置された場合、削除が出来るようになりました（必要に応じて自動生成されます）。
* トグル可能なanimピンにオブジェクト参照のサポートが追加されました。


####コア
* ログ出力がUTCタグを使用するように変更されました。
	* ログ出力をパースする全てのツールは、この変更に注意してください。
	* 旧フォーマットは今もサポートされており、コマンドラインで「-logtimesincestart」を渡して使用します。
* レプリケートしたパラメーターが変更しました。
	* 非const参照のTArraysは、結果のレプリケートが戻されていないことを示すために、const参照で渡されなくてはいけません。
	* FStringsは、値ではなくconst参照で渡されなくてはいけません。 
* UCLASS宣言の「'配置可能な'」指定子は削除されました。
	* クラスはデフォルト設定で配置が可能になりました。
	* 派生クラスの配置を防ぐために、クラスへ「'配置不可の'」指定子を追加することができます。
	* 「'abstract'」のマークがついたクラスも配置不可ですが、その派生クラスの配置性には影響しません。
* アーカイブカスタムバージョンの明示的な登録が必要になりました。
	* 特定のクラスがSerialize関数でAr.CustomVer(Guid)を使用する場合、オブジェクトがカスタムバージョンに依存していることをアーカイブに伝達するために、 Ar.UsingCustomVersion(Guid) を最初に呼ばなくてはいけません。
	* Guidは、FCustomVersionRegistrationグローバルオブジェクトを通じて予め登録しなくてはいけません。
	例:


			void MyObject::Serialize(FArchive& Ar)
			{
				Ar.UsingCustomVersion(MyGuid);
				Ar << Member;
				if (Ar.CustomVer(MyGuid) >= EMyObjectCustomVer::ThingAdded)
				{
					Ar << Thing;
				}
			} 

* CustomVer利用前にAr.UsingCustomVersionが呼ばれない場合、アサートが生じます。
* Numの増加時に、TArray::SetNumはデフォルト設定のコンストラクタを使用するようになりました。
	* このコールを継続して使用するには、Typesはデフォルト設定のコンストラクタを持たなければいけません。 
	* 旧出力ゼロ化の動作は、新規のSetNumZeroed関数で実行することができます。
* FCrc::MemCrc、 FCrc::StrCrc と FCrc::StrCrcCaps は非推奨となりました。
	* 可能であればFCrc::MemCrc32を使用します。CRC32アルゴリズムで一般的に得られる結果となります。 
	* FCrc::MemCrc_DEPRECATED と FCrc::StrCrc_DEPRECATED は、ユーザーが前の結果に依存している場合に使用します。
	* FCrc::StrCrc32は、今でも文字列にcharタイプの独立したCRCを与えるため、必ずしも期待通りの結果ではありませんが、新規の文字列テーブルを使用します。 
	* FCrc::StrCrcCaps(*Str)は  FCrc::StrCrc_DEPRECATED(*Str.ToUpper())に置き換えることができます。
* AVolumeは抽象クラスで作成されています。
	* マップ内部の既存ボリュームインスタンスは、ロード時に確実に失敗します。
	* インスタンスのクラスを変更するために、エディタのConvert機能を利用して、非抽象クラス（例えばBlockingVolume)）に変換しなくてはいけません
* IncrediBuildの使用時は、XGEの64-ビットバージョンが利用可能であると予想されます（今も32ビットバージョンを使用しているユーザーはCL # 1892517を取り消してください）
* LTCGは、出荷とWindowsターゲットテストでデフォルトで有効になりました。
	* 無効にするには、ビルドコマンドラインへ「"-noLTCG"」を渡すか、「BuildConfiguration.bAllowLTCG=false」を設定します。
* UObject C++ ヘッダは、「"Classes"」サブディレクトリに必要なくなりました！
	* Classesディレクトリは必要なくなりましたが、上位互換性となります。
	* 「"Classes"」外部のUObjectヘッダが「*Classes.h」で生成されたグループヘッダに含まれることは決してありません。  
		* このヘッダは常にユーザー自身で格納してください！（「*Classes.h」ファイルの非推奨化を進めています）
	*「 "Classes"」または「"Public"」フォルダのUObjectヘッダは、プライベートなUObjectクラスに依存できません。
	* モジュールの「*.generated.inl」ファイルを格納する前に、手動でUObjectヘッダを格納する必要がなくなりました。
		* 「Generated.inl」ファイルは、このファイルに依存しているUObjectヘッダを自動的に含むようになりました。 
	* プライベートのモジュールソースファイルは、「"Private"」フォルダ配下に配置する必要がなくなりました。
		* 「"Public"」フォルダ配下に位置しない限り、全てのソースはPrivateであると仮定されるようになりました。
		* つまり、ゲームソースを全て単一フォルダに格納することが可能です。
* 「ObjectVersion.cpp」と「Version.h」ファイルは、他のビルド製品とPerforceへチェックインされなくなりました。「build.properties」ファイルのみが最新のエンジンバージョンで更新されます。
	* つまり、ローカルビルドの「GEngineVersion」は常に0に設定されます。機能することを確認しました。0設定で保存されたエンジンバージョンのパッケージは、エンジンに問題なく読み込まれ（この時ローディングコードから警告が出ます）、その他全てと互換性があると仮定されます（パッケージは最新のパッケージバージョンで保存されることに留意してください。ロード時にこのパッケージと比較してチェックされます）。
* checkAtCompileTimeとSTRUCT_OFFSETが更新されました。
	* checkAtCompileTimeは全てのプラットフォームに対して static_assertを使用します。
	* Clangにより良い診断メッセージを提供し、より安定感のある標準サポートを活用します。
	* STRUCT_OFFSETは全てのプラットフォームに対してoffsetofを使用します。
	* 可能な限り標準のサポートを使用します。
	* -Wno-invalid-offsetofは全てのGCC/Clangプラットフォームに与えられます。　
	* non-PODタイプのエンジン全域でoffsetofの使用と、実質的にこの動作に依存するためです。


#### プラットフォーム
* **iOS**
	* IPP協調設計機能（中間pemsの紛失）の修復をして、pemsが紛失した時のためにより詳細なメッセージを追加しました。
	* エンジン/ビルド/IOS/リソースから全てを取り込むためにアイコンディスカバリー機能を変更しました。ゲームは、必要時にいつでもオーバーライドが可能になりました。
	* iPhone5のアスペクト比が有効になりました！
	* 予想されるアイコン全てをエンジン/ビルド/IOS/リソースへ追加して、一致させるためにEngine/Build/IOS/UE4Game-Info.plistを更新しました。既存の名前は全て変更されました！
	* ゲームに「.plist」ファイルが無い場合、Engine/Build/IOS/UE4Game-Info.plistへフォールバックして、実行可能な名前をBundle識別子へ置きます。
* Steam SDKはバージョン1.26へ更新しました。
* クッカの PackagesToAlwaysCookデリゲートを FCookModificationDelegateと置き換えました（ GameDelegates.h参照）。
* 「-onethread」を「-nothreading」へ名前変更しました（-singlethreadはそのままです）。


## 今後の追加事項と継続的な努力

#### エディタとツール
* サイクルごとの秒統計が「ue4stats」ファイルで正しく記録されるようになりました。別のマシーンでプロファイルを開いても、同じ番号が表示されるようになりました。
* uprojectsは非エディタビルドで正しく読み込まれるようになりました。 
* Linuxでクラッシュする前にログがフラッシュされるようになりました。
* アセットディスカバリー時間が多少早くなりました。
* 一部のビルド環境で問題の要因となっていた、深層部のパスの例外的に長い名前のプレースホルダ―クラスを削除しました。
* アセットレジストリに上位クラス名のクエリーサポートを追加しました。いずれかの親クラスがロードされたか否かを示すリストが作成されました。
* PREFETCHと PREFETCH_CONSOLEマクロを新規のplatform関数と置き換えました： FPlatformMisc::Prefetch.
* Visual Studioのデバッグビジュアライザーが、モノシリックビルドでFNamesと機能するようになりました。
* RecastのBuildThirdPartyLibはLinuxのビルドも可能になりました。
* リダイレクタがロードされていないマップに修正中に参照された場合、エラーメッセージを表示して、参照しているマップを報告します。コードパッケージも同様です。
* 非同期リキャストnavmeshビルドは、ターゲットごとに基づいて有効または無効にすることができます。
* クックのためにUATを使用時に、複数のクライアント/サーバーターゲットを指定できるようになりました。
* アクタのTick関数は、破壊直後に登録削除されるようになりました。破壊されたアクタはRF_PendingKillを持っているため、いずれにせよティックしません。
* 非従来型のP4クライアントルートを構成しました。
* サーバーの自動入力とPerfoceログインのユーザーネームを復活させました。
* チュートリアルシステムにウィジェットのオーバーレイ表示を新規に追加しました。
* 新しいアセットとフォルダがクラスフォルダに作成できないようにしました。
* 空のプレビューメッシュパスがAutomationTest警告を出さないようにしました。
* 無効のワークスペースが指定された時に、ソースコントロールログインは正しく拒否されるようになりました。
* 主要ウィンドウのzオーダーが通知に影響を受けないようにしました。
* 他者によってチェックアウトされたアセットは、「"Submit to Source Control"」で正しく処理されるようになりました。
* [depot->p4 workspace] から手動マッピングへの依存をなくしました（history & diffで問題を修正）。)
* 可能な場合、移行ファイルはソースコントロールへ追加されるようになりました。
* コンテンツブラウザの使用時に、ソースコントロールがファイルステータスをスパムしないようにしました。
* サブミットするファイルを正確にチェックするバックグラウンドタスクを追加しました。
* ソースコントロールログインダイアログをより利用しやすい表示にしました。
* 内蔵パッケージに対して、コンテンツブラウザがSCCステートの要求をしないようにしました。
* スクロール時にサブミットダイアログがサイズ変更をしないようにしました。
* アクタプロパティの「'Use Selected'」はサブメニューへ移動しました。 
* いつでもPerforce操作の停止を有効にします。
* **ワールドブラウザ**
	* ワールド基点の移動は、物理アクタの移動にPhysX3.3関数を使用するようになりました。
	* ストリーミングレベルにLODサポートを追加しました。
	* レベルタイルに[Details] パネルを追加しました。[Details] パネルが同様の機能性を提供するため、ストリーミングレベルのビューは削除されました。
	* ワールドフォルダを再スキャンしてワールドブラウザのキャッシュされたデータを更新する「'Refresh'」コマンド（F5）を追加しました。
	* タイルのソート順序を定義するレベルタイルプロパティへZOrderを追加しました。
* クラスのドラッグ時にコンテンツブラウザの「Move」、「Copy」メニューを表示しません。
* ロード中のスクリーンメッセージにフリッカーが発生しなくなりました。
* ワールド/ローカル座標ボタンにツールヒントが表示されるようになりました。 
* 再入力をチェックして円形がポーズにリンクしているかチェックします。
* AddEventが正確なアクタラベルを表示するようになりました。
* ヘッダからFColorTheme実装を移動させて、前回のチェックインのマージが原因で発生した不良タブを一掃しました。 
* 追加のデータはスタティックメッシュエディタでアイコン表示されるようになりました。
* さまざまな細かい改善と微調整がテクスチャエディタのユーザビリティに追加されました。
* 誤ったエディタモードが原因で発生するエラーは、その理由と表示方法を指定できるようになりました。
* ベースマテリアルへリセットされた時に、OnResetToDefaultClickedデリゲートが発行されるようになりました。 
* コマンドラインで「 -interactivetutorials」と一緒に起動されない限り、InteractiveTutorialsはnullです。
* マップのライティングの再ビルドが必要な場合、マップはダーティとマークされなくなりました。
* タブ表示する子がない時は、タブ表示を防ぎます。
* スパムによるスタティックメッシュのスポーン時に、クラッシュを回避します。
* 新規のコードプロジェクトの作成時にエディタが閉じなくなりました。
* 平行して挿入するタブが見つからない場合、InsertDocumentTabがタブをスポーンするようになりました。 
* エディタからソリューションを開くときに、確実に絶対パスを使用します。
* 焦点を失った時に提案ボックスが非表示になります。
* エミッタのカラーピッカーはモーダルではなくなりました。
* Color Themeがドロップダウンリストに適切なテキストを表示するようになりました。
* 不具合のあるタブやIDがエディタをクラッシュすることはなくなりました。
* ソースコントロール「エラー」が原因で「'Convertメッシュ'」がエラーフラグを表示することはなくなりました。 
* MessageLogはユーザーが表示した最初の入力、もしくは最後のログへデフォルト設定されます。
*  [Enter] キーを押した時点でAsset Pickerで何も選択されていない場合、自動選択と単独または最初のアセットののアクティベート機能が追加されました。
* フォルダパスがプラットフォームに対して有効にフォーマットされていることを確認するため、 [New Project] ウィザードが追加されました。
* マテリアル選択:素早く入力するとフィルタリングが壊れてしまうため、bShouldNotifyNextAssetSyncフラグを削除しました。 
* ["Choose Files to Save"] クリック時のAsset Saving通知はエラーに酷似しています。Notification（通知）に変更して、明確にするため修正しました。 
* [Favorites] からレベルの削除は困難でした。お気に入りリストへの入力はレベルリストが開かれた時のみ追加/削除ができました。この必須条件を取り除いてOpen/Removingオプションをサブメニューへ移動しました。また、一貫性にかけた内部のエントリ名のバグを修正しました。
* Normal Map Texturesの自動再インポートは、DXT5n法線マップのDefer Compressionとcompatibilityモードの併用が原因で破損していました。圧縮されていないディファード法線マップに対しXGXR8が追加されました。 
* ウィンドウ管理：新規タブの作成時、またはウィンドウ配下の別のタブを選択して更新します。常に「"map - Unreal Editor"」のネーミングスキームを維持するマスター/ルートウィンドウでない限り、タブラベルのタイトルを変更します。
* オートセーブ進捗ウィジェットに [Cancel] ボタンをオプションで追加しました。
* コンテンツブラウザ：SharedまたはPrivateコレクションを有効にするテストは、コレクションコンテクストメニュー（右クリック）の作成後に評価されるだけであるため、SharedまたはPrrivateコレクションを作成することができます。
* 複数回適用された平行移動、回転、スケーリングはデルタを使用しているため、アタッチされているグループ化されたアクタは正確に平行移動しませんでした。親アクタがグループアクタで修正されないようにチェックを追加しました。
* Factoryからアクタを追加するために、レベルエディタコンテキストメニューを更新しました。アクタはFactoryでbShowInEditorQuickMenuフラグを使用します。
* クロスプロジェクトから移行したレベルのワールド設定が原因のクラッシュを、現行プロジェクトに新たなワールド設定を作成して回避しました。
* レベルブラウザのサブレベルの可視性の変更により、サブレベルの「umap」ファイルがダーティになりました。エディタ内部のレベルの可視性の変更のみを行っている場合、ダーティフラグをリセットします。
* 参照オブジェクトからコンテンツブラウザへコレクションを作成すると、指定パスにあるNullフォルダが要因となり、"u_pattern_syntax_error"の権限を持つコレクションが作成されていました。このパスの構成を訂正しました。
* ヘッダのサブカテゴリの一部をより記述的にしました。
* [Details] パネルに、可視のメニュー項目として「Expand All Categories」と 「Collapse All Categories」があります。
* [F1] キーはアセットエディタ上でコンテキスト感受性の動作をするようになりました。
* シーンアウトライナーのソートが可能になりました。
* **スレート**
	* SComboBoxとSComboButtonはSlateウィジェットスタイルを使用し、FEditorStyle依存ではなくなりました。
	* 必要に応じてタブをフラッシュできるようになりました。
* PIEまたはSIEセッションが一時停止、再開、または停止された時にデリゲートの利用が可能になりました（既存の再生と停止に追加）。
* 新規のアセットのネーミング時に無効なキャラクターに対して警告が表示されます。
* 最後の自動保存から変更があった時のみに自動保存が実行されます。
* アセットSCCとダーティステートを表示するためにコンテンツブラウザカラムビューが更新されました。
* 非モーダルカラーピッカーが改善されました。
	* 元に戻す/やり直す操作が完全にサポートされました。
	* カラープロパティの変更はオブジェクト上でインタラクティブにプレビューできます。
* コアなスレートウィジェット全てからFEditorStyleを削除しました。
	* 進行中の作業ですが、いくつかのウィジェットクラスは作業が完了しています。
* 以下の領域にエディタの使用状況を追跡する新規のエンジン分析が追加されました：
	* PIE（Play-in-editor）の使用量
	* ブループリントの作成（親クラス、タイプ、作成手法）
	* タブとウィンドウの使用の結合
	* レベルへポーンを直接追加
	* ブループリントコンテキストメニューの使用量
	* BSP（バイナリ空間分割）ブラシの使用量
* SoundCueエディタの'Result'ノードを'Output'へ名前変更
*SoundWaveをダブルクリックしてプロパティを表示
* カーブエディタが前回選択したキーの位置を、新たに選択したキーに適用させないようにしました。
* Sound ClassesとSound Mixesの潜在的に危険な組み合わせが作成された時に警告が表示されます。
　* 従来の接続の入力へ追加されたSoundノードが自動的に接続するようになりました。 
* ライブ更新が有効な時は、Material Editorノードはリアルタイムで更新されます。
* スレートマテリアルエディタのパフォーマンスが向上しました。
* Material Editorノードが以前よりも圧縮されました。 
* マテリアルエディタへのドラッグ＆ドロップ操作を取り消せるようになりました。
* Material Resultノードは正確な入力を表示するようになりました。
* MaterialノードとComment位置の変更により、ユーザーは変更の適用を促されるようになりました。
* 変更時に動的パラメータ名が更新されるようになりました。
* Material Input ノードのグレーアウト表示されたピンのテキストもグレーアウト表示されるようになりました。
* サウンドの再インポート時にカスタム設定が保持されます。
* イタレーションするアクタの検索にTActorIteratorは GetObjectsOfClassを使用します。
* 「"Allow Translucent Selection"」はデフォルトで使用できるようになりました（ユーザビリティフィードバックに基づいて）。
* デフォルトの"template"マップは（エディタで[File -> New]　の選択時に利用可能）以前よりも簡略化されました。 
* 国際管理化のために終了ロジックを追加しました。システムからメモリリークの誤検出がなくなりました。
* 国際管理化システムは、常にゲームデータのロードをしなくなりました。
* 非Windowsプラットフォームは、ローカライズされたフォーマット形式の文字列で、グレイヴ・アクセント （`）と アポストロフィ（ '　）を適切にサポートします。 
* アセット機能から収集したローカリゼーションデータにより、コリジョンのレポートが改善しました。
* Settings UIのナビゲーションメニューが改善しました。
* **PIE（Play-In-Editor）** 
	* マルチプレイヤーPIEでスクリーン空間をより効率良く使用するために、ウィンドウレイアウトアルゴリズムが改善されました。


#### ブループリント
* [My Blueprint] パネルでアイテムにマウスをかざした時、またGetノードにマウスをかざすと変数のツールヒントが表示されます。
* 入力配列ピンをドラッグ時に、Make Arrayノードの追加がユーザーに提示されます。
* 検索ワードにスペースを挿入することで [Find in Blueprint] 機能の検索問題が解消されました。 
* [MyBlueprint] ウィンドウで親グラフをダブルクリックしても、ウィンドウを折りたたんだり展開しません。
* ブループリントグラフのナビゲーション方法を調整しました。
	* グラフパネルで関数またはマクログラフをダブルクリックすると、現在のタブを再利用する代わりに新規のタブが開きます（もしくは既に開いているインスタンスにフォーカスします）。
	* [Find Results] ウィンドウをダブルクリックすると、現在のタブを再利用する代わりに新規のタブが開きます（もしくは既に開いているインスタンスにフォーカスします）。
	* グラフパネルで折りたたみグラフをダブルクリックすると現在のタブが再利用されます。
* ネイティブバージョンのいくつかのMake/Break Struct ノードを非表示にします。
* 親と子のブループリント間でタイムライン、メンバ変数、関数グラフ名に重複が無いように追加の保護を配置しました。
* スケルタルメッシュからスケルトン、またテクスチャからマテリアルを作成すると、デフォルトで新規のアセットに固有名が与えられます。
* 選択したアクタからブループリントを作成すると、ダイアログに名前を入力するオプションが与えられます。
* 全てのコンポーネントクラスにツールヒントが追加されました。
* ブループリントパレットにMakeとBreakの構造体ノードが追加されました。
* 必要箇所でコメントが検索できるようにブループリントの検索機能が改善されました。
* より望ましい結果を提供するために、ブループリントパレット/コンテキストを自動選択するコードを修正しました。
* ブループリントコンテキストメニューのキーボード処理を改善しました。
* 検索ワードにスペースを挿入することで [Find in Blueprint] 機能の検索問題が解消されました。 
* ブループリントコンテキストメニューに「'open in new tab'」を追加しました。

#### ゲームプレイとフレームワーク
* ゲームフレームワークエンジンクラスのコメントをクリーンアップしました。
* ゲームフレームワークエンジンクラスから廃止されたプロパティとメソッドが削除されました。
* 廃止されたUWorldプロパティのRealTimeToUnPauseが削除されました。
* 廃止されたPlayerControllerプロパティの MaxResponseTimeが削除されました。
* 廃止されたPlayerControllerメソッドのConditionalPause()が削除されました。
* PlayerStateから廃止されたネットワーク統計関連の数多くのプロパティを削除しました。
* HUDとHudSettingsクラスから未使用のHUDCanvasScaleプロパティを削除しました。
* UEngineMessageから未使用のFailedSpawnMessageプロパティを削除しました。
* GameModeからStreamingPauseIconプロパティを削除しました。クライアントがこのプロパティの使用を試みるとクラッシュします。
* GameModeとPlayerStateから未使用のGameMessageClassプロパティを削除しました。 
* **入力システムの改善**
	* 入力デリゲートは、単一フレーム内部でキーが押された/リリースされた順序での実行が保証されるようになりました。
	* 単一フレーム内部で押下、リリース、そして再度押下された場合、入力デリゲートを単一フレーム内で複数回ディスパッチすることができます。
	* ペアの入力アクション（押下とリリースが結合したアクション）は、ダウンステートを管理するようになりました。複数キーがアクションと結合する場合、最初に押されたキーがアクションをキャプチャー、非キャプチャキーによって押下もしくはリリースされたイベントは、キャプチャされているキーがリリースされるまで無視されます。AとBがアクションにマッピングされているいくつかの例は、押下およびリリースデリゲートの結合が両方あります。 
		* 例その1：
		* Aが押下されてアクションをキャプチャして、押下デリゲートがディスパッチされます。 
		* Bが押下されて、押下デリゲートがディスパッチされないようにAがキャプチャされます。 
		* Bがリリースされて、リリースデリゲートがディスパッチされないようにBをキャプチャしません。
		* Aがリリースされて、リリースデリゲートがディスパッチされるようにAがキャプチャされます。
		* 例その2：
		* Aが押下されてアクションをキャプチャして、押下デリゲートがディスパッチされます。
		* Bが押下されて、押下デリゲートがディスパッチされないようにAがキャプチャされます。
		* Aがリリースされて、リリースされたデリゲートがディスパッチされるようにAがキャプチャされます。
		* Aが再度押下されて、Aがキャプチャして押下デリゲートがディスパッチがされるようにキャプチャはありません。
		* 前回のリリースデリゲートがディスパッチされたように、Aがリリースされます。
		* Bがリリースされて、リリースデリゲートがディスパッチされないようにBはキャプチャしません。
* [Load Stream Level] と [Unload Stream Level] は、レベルブループリントのみに限らず、任意のブループリントから呼び出すことができます。
* レベルのストリーミングに配置されたポーンのコントローラーはパーシスタントレベルではなく、ストリーミングレベルでスポーンされるようになりました。
* BeginPlay中の操作を可能にするため、HUDはBeginPlayの前に初期化されるようになりました。 
* **Oculus Riftの統合**  
	* Oculus Riftのサポートに対して、いくつかの改善とバグ修正がされました。ステレオスコピックビューで以前レンダリングができなかった特定のポストプロセスとスクリーン空間エフェクトに対する修正が含まれています。
* 新規の全ゲームテンプレートプロジェクトに、簡略化したソースファイルレイアウトがあります。
* コードベースの「SampleGames」ディレクトリテストとして、Platformergameを「Samples」へ移動しました。
	* メインディレクトリから「Samples」配下の「Games」サブディレクトリへ、全てのコードベースのゲーム例の移動に取り組んでいきます。「Games」は現在の「SampleGames」フォルダ�を名前変更したフォルダです。（例：　現時点では  //depot/UE4/PlatformerGame/ ? //depot/UE4/Samples/SampleGames/PlatformerGame/ ）  （最終的なフォルダ位置は恐らく次のようになります。 //depot/UE4/Samples/Games/PlatformerGame/)
* RPC Client/Server関数から値を返すと、コンパイルエラーとして検知されるようになりました。
* **コンポーネント移動の最適化**
	* 度重なるMoveComponentの呼び出しは、FScopedMovementUpdate()オブジェクト内にMoveComponentコールをカプセル化するため、移動シーケンスがコミットされるまで大部分の動作を保留にします。
	* スコープ内の移動は、移動がコミットされるまで（スコープが文脈を離れた時に発生） UpdateBounds()、OnUpdateTransform()、 UpdatePhysicsVolume()、 UpdateChildTransforms()などの更新を回避します。 
	* 大量のスコープの更新がサポートされています。最終スコープが終了まで移動はコミットされません。
	* 現在の移動スコープは元の状態に戻すことができます。つまり、スコープ開始時に位置は元の位置へ修復されます。
* **CharacterMovementComponentの最適化**
	* スコープ内の移動更新は、UCharacterMovementComponentで実行される移動を有効にしました。ほとんどの場合、キャラクター移動のパフォーマンスは2倍から3倍向上しました。
	* 傾斜に沿った移動にもはやStepUp()を使用しませんが、その代りにサーフェスと平行に移動します。所要スイープの数が削減されました。実用的な場面において、傾斜は階段に推奨されるコンテンツソリューションです。
* **CharacterMovementComponent の改善**
	* StepUp() の機能性により一貫性が増しました。
	* フロアチェックの観点から、シミュレートした移動は実際の移動とさらに一致するようになりました。
	* シミュレートした移動は、歩行可能な傾斜を垂直なバリアとして処理せずに、スムーズにスライドするようになりました。
	* ベロシティは即座に最高速度にクランプせずに、全移動モード（外力から）で最高ベロシティを上回るようになりました。ベロシティが最高速度を上回った時点で、摩擦とブレーキが適用されます。
	* 非水平面上の地上移動をあたかも水平面上のような移動を維持するベロシティ、またはサーフェスに対して平行移動を維持するベロシティをコントロールするパラメータを追加しました。　
* BP blendノードを使用時にテキストが正しくトリム（装飾）されるようになりました。
* デフォルト設定のボーンアタッチメント座標空間をワールドからローカルへ変更しました。
* アタッチされていないパーティクルのスポーンをサポートするためにパーティクル anim notify UAssetを修正しました。
* PHatのウィジェットは編集後に消滅することはなくなりました。
* アタッチポイントの編集時に、通知がドロップダウンリストをサポートするようになりました。
* Personaで保存すると、修正されたアセットのみが保存されるようになりました。
* Kismet InitとUpdateAnimイベントにツールヒントが設定されました。
* 通知によるカスタム通知の削除を有効にするため、メニューエントリを新たに追加しました。
* Behavior Trees コアとツールは以前としてWIPに位置します。
* アニメーションシステムの改善
	* 物理アニメーション：BlueprintCallable Physics Weight関数を追加しました � SetPhysicsWeight/AccumulatePhysicsWeight
	* BlendSpaceノードは、ピン経由でPositionとLoopingの設定を有効にします。
	* IKノードは、エフェクタとジョイント位置を表示します。 
* 物理：ラグドール処理を改善するためにデフォルト設定が微調整されました。
* 最適化：物理/ティックを無効にすることによりデディケイテッドサーバーの最適化しました。


#### レンダリング
* HardwareSurveyへGPUIndexを追加しました（高速設定のため信頼下限で簡単実行）。
* スペキュラを切り離すために、アルファシーンカラーのアルファチャンネルを利用して実験的なスクリーン空間のサブサーフェススキャッタリングを採用しました。大部分のレンダリングパスには最少限のコストが発生しますが、32ビットフォーマットの仕様時は、実験的なスクリーン空間のサブサーフェススキャッタリングを有効にしません。
* 拡張オプションとしてcvarが使用できるように ECVF_Scalabilityをドキュメントへ追加しました。
* r.TonemapperQualityスケーラビリティを追加しました（高スペックのためにノイズをカラー量子化に対抗させるため） 
* RTとGTで使用時に、パフォーマンスの向上とスレッドセーフのために型付のコンソール変数を追加しました。
* テキストをレンダリングするアクタに、簡単選択のためにアンカースプライトが追加されました。
* [Exposure] メニューオプションを整理しました。ポストプロセスの露出コントロールは、「"Auto Exposure"」配下に名前変更および再グループ化されました。
* エディタは、中間ではなく非常に詳細なモードで開始するようになりました。
* 「r.SceneRenderTargetResizeMethod」を追加しました。
	* シーンのレンダーターゲットのメモリー使用法をコントロールします。
* デフォルトテクスチャが選択されたテクスチャを含めたmaterial expressionノードを作成しています。
* UIBlurレンダリングを最適化しました。
	* リクエストされたセクションのみをレンダリングします（全スクリーンの代わりに）。
* 迅速なアクセスのために、大部分のCVarsを新規の特定タイプのフォーマットへ移動しました。
 
 
####アニメーション
* ユーザーがスケルトンの代わりにアセットをメッシュソケットへドロップ、またメッシュへアタッチするとPersonaがこれを検知します。 
* 全てのSkeletal ControlとBlend Pose Blueprintノードに記述的なツールヒントが追加されました。
* PhATでシミュレーション時に、[Ctrl-右マウス] 操作でオブジェクトとインタラクションが出来る由がオンスクリーンメッセージで表示されます。
* 未使用なコードは、skeleton compression関数から削除されました。


####コア
* エンジンバージョンに基づくように、バイナリファイルのバージョン付スキームを修正しました。
* #プラグマ領域などに接触した際に拒絶しないように、UnrealHeaderツールは、認識しない全ての#プラグマを無視するようになりました。
* HeaderGroupsは徐々に機能から削除される方向に進んでいます。headergroupsの継続的な使用は中止しなくてはいけません。
* **ビルドシステム** 
	* く'bPrintPerformanceInfo'診断変数をUnrealBuildToolへ新たに追加しました。
*  ULevel へAssetUserDataサポートを追加しました（カスタムペイロードと一緒にレベルを拡張するプラグインを有効にしました）。 
* C++コードの"Hot Reload"の信頼性がより高まりました。 


#### プラットフォーム
* Linuxサポートを改善しました（正しいコールバックを取得するためDWARFがパースするようになりました。プラットフォームの抽象レイヤーはプロセス管理をカバーするように拡張されました。HTTPモジュールの追加機能） 
* 全 [Editor] ウィンドウが、Mac OS Xの [Dock] メニューにリストされるようにしました。
* Mac OS X MavericksのSpaceでディスプレイごとのマルチモニタモードでセカンダリモニタ上にエディタウィンドウを配置した時に、エディタウィンドウが消滅しないようにしました。 
* スナップとハイパーアクセラレーションを削減するために、一部の [Editor] モードでマウスドラッグ処理を改善しました。
* Mac OS X上でダブルクリック操作でUnrealプロジェクトを開くサポートを追加しました。
* SubversionのXcodeのコピーを利用して、Mac OS Xに対応するSubversionのサポートを有効にしました。 
* マチネにムービーファイルを作成するためにMac OS Xサポートを実装しました。
* 別の実装のようなサウンドとなるように、Mac OS X のCoreAudio reverbを微調整しました。
* Direct3Dバージョンに従って、スレートにスタンドアローンのOpenGLレンダラーを導入しました。
* シミュレーターに対する早期サポート、次のQAビルドによりこれらの切り替えが簡単になります。


#### ネットワーキング
* セキュリティの改善
* Lifetimeプロパティ
* レプリケーションパフォーマンス


#### オンライン
* オンラインのビーコンコードの安全性が向上しました。
* もはや必要がなくなってもビーコンアクタは破壊されませんでした。
* ビーコンコミュニケーションが潜在的に無限のアクタをスポーンする弱点を修正しました。
* オンラインのセッションAPIの安全性が向上しました。
* 「ending/ended」ステートと差別化するために、セッションAPIに「"Destroying"」ステートが追加されました。
* 一般的なオンライン非同期タスクのクリーンアップ（関数のテンプレート化、コードの再利用）。
* オンラインインターフェースの全シェアードポインタがスレッドセーフになりました。
* LANによるSteamへの接続が正しく機能するようになりました。
* 既存の設定キーを所有する冗長したオンライン検索キーを削除しました。
* FOnlineKeyValuePairs<FString,VariantType>データにネットワークバイトオーダーシリアライズサポートを追加しました。
* Mcp OSS
	* mcpアカウントマッピングテストを追加しました。
		* "QUERYMAPPINGS <list of ids>"経由のexec
	* Mcpコンフィグを組み込みソースファイルへリファクタリングしました。                                                   
		* 開発に「defaultengine.ini」ファイルのini値をまだ使用することも出来ます。
		* ゲームはコールバックデリゲートを使用してコンフィギュレーションをオーバーライドすることができます。
* Http
* 要求されたcompletionデリゲートがトリガーされた後にhttp requestポインタが破壊される問題を修正しました。
	* teh completion デリゲートから同リクエストを繰り返し再利用出来ないことによる、httpリクエストのチェーンの破損がありました。


## 周知の問題
* パフォーマンスキャプチャテストに表示される警告
* インポートした「.APB」被破壊性メッシュをフラクチャ（破砕）すると、期待以上の数のフラクチャが発生します。 
* FOLIAGE（フォリッジ）：可視出来るブラシはありません。
* ウィジェットでスケーリングすると0で停止してこの値に留まります。
* ELEMENTAL（エレメンタル）：断崖のマテリアルが黒で表示されます。
* インポートの失敗を告げるエラー：EdGraph /Engine/EditorBlueprintResources/StandardMacros.StandardMacros:Do N
* PLATFORMERGAME:プレイヤーがゲームの途中に差し掛かると2番目のエレベーターがジャンプします。
* QAGAME:CRASH:「TraceTest.umap」を開きます。
* SHOOTERGAME:Bot AIが原因で、敵はある期間中に武器を発砲することなく逃げ回ったり静止することができます。
* SHOOTERGAME:ENSURE:botsと共にマッチを開始します。
* XboxOne:全てのTextRenderActorsにアーティファクトが生じています。
* ROCKET:Mac:Xcode:「Game.app」ファイルを起動することができません。
* ROCKET:Mac:CONTENT EXAMPLES:Blueprint_HUD上のマップの外側にスポーンします。



