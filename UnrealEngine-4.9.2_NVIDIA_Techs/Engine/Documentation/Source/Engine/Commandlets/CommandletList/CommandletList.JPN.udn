INTSourceChangelist:2086979
Availability:Docs
Title:コマンドレット リスト
Crumbs: %ROOT%, Engine, Engine/Commandlets
Description:使用できるコマンドレットの概要と使用方法に関する情報

[REGION:todo]
	このページはアンリアル エンジン 4 のドキュメントから転載され現在見直しがされています。古い情報が含まれる場合もありますので予めご了承ください。
[/REGION]

[TOC (start:2 end:2)]

## 概要

コマンドレットは、アンリアル エンジン環境で動作するコマンドライン プログラムです。この内容には大きな変更がしばしば加わるので、情報を得るため、またはユニットテストメカニズムとして、見直しをかけるのが常です。 

これらは、基本的には、初期化済みのエンジンを持つ小さなアプレット群であり、出力は主に Windows のコンソールのみに限定されます。

エンジンは、自動的にコマンドラインで渡したコマンドがコマンドレットかどうかの判別を試みます。そして、それがコマンドレットであれば、対応するコードを実行します。

このドキュメントは、 アンリアル エンジン 4 によって利用されるコマンドレットに対する説明と記法の一覧を掲載しています。



## コマンドレットの実行

コマンドレットは、コマンドライン上にあるゲームに必要なパラメータと一緒にコマンドレット名を渡すことにより実行されます。Windows のコマンド プロンプトでゲームを実行するか、メインの実行ファイル (UDK.exe など) に対するショートカットの **target** 経由のいずれかで、Windows のコマンド プロンプトでゲームを実行するか、メインの実行ファイル (UDK.exe など) に対するショートカットの target 経由のいずれかで、

例えば、UDK **FixupRedirects** コマンドレットは以下を使ってコマンドラインから実行できます。

    UDK.exe fixupredirects
    

## ヘルプ

[ヘルプ コマンドレット](Engine/Commandlets/Help) の用途は、実行可能なコマンドレット、その目的、パラメータを使用するコマンドレットの見極めです。利用可能なコマンドレットは以下を実行して確認してください。


### 記法
    
    gamename.exe help <list | commandletname | webhelp commandletname>
    

### パラメータ


* **list** - 利用可能なすべてのコマンドレットの一覧です。
* **commandlet name** - 指定したコマンドレットのヘルプ情報を表示します。
* **webhelp** - 指定したコマンドレットの説明をしているウェブページの URL でブラウザを起動します。


## FixupRedirects コマンドレット

Fixupredirects は、すべてのパッケージ中、または、オプションで指定したパッケージ中のすべての [リダイレクタ](Engine/Basics/Redirectors) を修正します。自己参照のリダイレクタは削除されます。もし、パッケージの指定がなければ、ゲームで必要なすべてのパッケージのリダイレクタがテストされます。  


* パッケージを保存しようとする前には、 (アンリアル エディタ内の SCC と同様の方式を使用して) ソースコントロールからチェックアウトしようとします。
* ただし、パッケージは、マニュアルでチェックインする必要があります。
* 必要なパッケージ (リダイレクタを持つパッケージ及びそれらをポイントするパッケージ) のみを保存します。
* リダイレクタをポイントするパッケージがチェックアウトできなかった場合は、リダイレクタはクリーンアップされません。
* 1 つのパッケージ名とすることが可能です、その結果、パッケージ内のリダイレクタのみを修正することになります (すなわち、特定のリダイレクタをポイントするパッケージと他のすべてのパッケージです) 。このようにすると、最上層でインポートし、リダイレクタがポイントしているオブジェクトを削除することができるため、リダイレクタをクリーンアップしたいときに有用です。
* パッケージを開けなかった場合は、継続するか中止するかを求める警告が表示されます。もし継続した場合は、開けなかったパッケージにリダイレクタに対する参照が含まれている可能性があるため、いくつかのオブジェクト参照を失う可能性がありますが、パッケージがオープンできないため、その存在を確認する方法が無いため、コマンドレットはそれが無いものとみなします。もし、その時点で中止を選択したら、その他のパッケージが保存されます。(もちらん、パッケージを開く時点でクラッシュした場合は、明らかに処理はアボートしており、すべてのパッケージは、手付かずのままです。) 
**-nowarn** オプションが指定できます、この場合は、パッケージが開けなければ単に終了します。(これは、スクリプト等のためですが、ファイルを開けなければ中止することは所在が不明なときには安全な方法です) 。 


### 記法

 
    game.exe fixupredirects <package.ext>
    

### パラメータ


* **package.ext** - リダイレクタのテストを行うパッケージ名。(オプション) 


## ContentAudit コマンドレット

([コンテンツ監査コマンドレット](Engine/Commandlets/ContentAudit) をご覧ください)


## FindDuplicateTextures コマンドレット


## SetTextureLODGroup コマンドレット

([テクスチャ LOD グループのコマンドレットを設定する](Engine/Commandlets/SetTextureLODGroup) をご覧ください)



## ContentComparison コマンドレット

([コンテンツ比較コマンドレット](Engine/Commandlets/ContentComparison) をご覧ください。)



## DeleteQuarantinedContent コマンドレット

([コンテンツ比較コマンドレット](Engine/Commandlets/DeleteQuarantinedContent) をご覧ください。)




## BatchExport コマンドレット

[Batch Export コマンドレット](Engine/Commandlets/BatchExport) は、 Unreal パッケージ ファイルのリソースを、様々な外部ファイル タイプにエクスポートするために使用します。


### 記法

    gamename.exe gamename.exe BatchExport <package.ext> <classname> <export_ext> [dest_path_name]
    

### パラメータ


* **package.ext** - リソースのエクスポート元となるパッケージの名前。パス名はオプションです。
* **classname** -  Class、 Texture など、エクスポートするオブジェクトのクラス。
* **export_ext** - 出力ファイル用の拡張子。リソースのエクスポートに使用するファクトリのタイプを決定します。
* **dest_path_name** - 出力ファイルを保存するパスです。ディレクトリが存在しない場合は、作成されます。


(#MakeCommandlet)



## Make コマンドレット

make コマンドレットは、ゲームの最新で無いパッケージがあれば、 Unrealscript ソース (.uc ファイル) をコンパイルして、 Unreal パッケージ (.u ファイル) を生成します。 


### 記法


    
    gamename.exe make <-switch>
    




### パラメータ


* **full** -  たとえ、旧バージョンで無くてもすべてのパッケージの再コンパイルを強制実行します。 
* **nodelete** - 期限切れでない依存パッケージを削除しません。デフォルトでは、 EditPackages リストにある期限切れパッケージの日付以降に発生したパッケージをリビルドします。
* **debug** - コンパイル済みのバイナリ内にデバッグ情報を含めます。アンリアル スクリプト デバッガを使用するために必要です。
* **auto** - 問い合わせ無しに、更新が必要な自動的に生成されたヘッダを自動的にチェックアウトします。自動生成したヘッダファイルのエクスポートに関係したスクリプトコンパイラによって生成されたすべての問い合わせを抑止します。
* **unattended** - 自動的に 「Yes」 と返答することで、ビルド中に生成されたすべての問い合わせを抑止します。
* **silent** - unattended と似ていますが、すべてのビルド出力 (ログ、その他) も抑止します。
* **silentbuild** - コンソール出力ウィンドウに表示されるすべてのスクリプト コンパイラのステータス メッセージを抑止します。
* **noconform** - (個々のゲームで異なる可能性がある) 自動適合ディレクトリ内に同じ名前で存在するパッケージの場合には、スクリプトパッケージは、通常は自動的に適合されます (ConformCommandlet を参照してください) 。
* **WarningsAsErrors** - すべてのスクリプト コンパイルの警告をエラーとして取り扱い、ビルドを失敗させます。
* **intermediate** - スクリプト プリプロセッサ：すべての unrealscript ファイルの後処理済みバージョンを、プリプロセッサの ProcessedFileDirectory 値によって指定されたプリプロセッサの中間ディレクトリに出力します。UnrealScript マクロのデバッグに有効です。
* **nopreprocess** - スクリプト プリプロセッサ：任意の UnrealScript マクロについて、プリプロセッサで処理しないようにします。これは、一般的に完全にスクリプトのコンパイルを失敗させるために、デバッグのみで有効です。
* **stripsource** -  新しくコンパイルされた .u パッケージを保存する前に、スクリプト ソース コードと cpptext ブロックをストリップします。コメントはストリップされなさそうであることに注目してもいいかもしえｒません。




## StripSource コマンドレット

stripsource コマンドレットは、アンリアル パッケージ (.u ファイル) のロードをすべてのクラスに対して繰り返し、 ScriptText を一つの場所に設定してから、パッケージを保存するために SavePackage() を呼び出します。 

問題は、 Core.u 、 Engine.u 、 Editor.u その他のような、コマンドレット実行中の実行ファイルによって使用中であり、上書きすることのできないパッケージです。そのため、それらのパッケージの保存は失敗します。

この問題を解決するために推奨する方法は、ScriptText (および CppText) を取り除くパッケージのクッキングです。データのクックを行わない場合は、 ResetLoaders() の呼び出しで、オープンしているパッケージの問題を解決するかもしれません。 

または、-stripsource 引数を ["make" commandlet](#MakeCommandlet) へ渡すことも可能です。


### 記法


    
    gamename.exe stripsource <package.u, ...>
    




### パラメータ



## Conform コマンドレット

conform コマンドレットは、同じ GUID を割り当てることにより、パッケージのネットワーク互換性を確保します。これは、パッケージが変更されるたびに行われなければいけません。 Conform の詳細については、『PackagesAndNetworking』をご覧ください。


### 記法


    
    gamename.exe conform to_package from_package
    




### パラメータ



## PkgInfo Commandlet

pkginfo コマンドレットは、1 つ以上のパッケージ内に含まれるリソースについての情報を表示します。 


### 記法


    
    gamename.exe pkginfo <package.ext> <-switch>
    




### パラメータ


* **package.ext** - リソース情報を表示するためのパッケージの名前です。
* **names** - 指定されたパッケージに対する名前テーブルに対する情報を表示します。
* **imports** - 指定されたパッケージ (ImportTable) に含まれるオブジェクトによって参照される外部リソースを表示します。
* **exports** - 指定されたパッケージ (ExportTable) に含まれるリソースを表示します。
* **simple** - -exports フラグと組み合わせて利用された時にだけ関係があります。それぞれのエクスポートに対してすべての情報では無く、名前とサイズのみを表示します。
* **depends** - インポートまたはエクスポートの依存関係を表示します。すなわちオブジェクト参照および再帰的に参照している参照です。
* **all** - パッケージに内に格納されたすべてのデータを表示します – 本質的には、コマンドラインで 3 つのすべてのタイプ (-imports -exports -names) を指定することと同じです。
* **chunks** - パッケージ内の圧縮チャンクの情報を表示します。
* **paths** - 参照されているすべての外部リソース (インポートなど) へのフル パス名を表示します。
* **hideoffsets** - パッケージに含まれている UObjects の最初への直列化されたオフセット (エクスポートなど) を表示しません。
* **platform=<ps3,xenon>** - パッケージがクックされるプラットフォームを指定するのに使用されます。




## WrangleContent コマンドレット

wranglecontent コマンドレットはパッケージ内のどの資産が任意のレベル ファイルから使用されないかを識別するために使用されます。 


### 記法


    
    gamename.exe wranglecontent <-switch>
    




### パラメータ


* **reportunreferenced** - 未使用のコンテンツをダンプ出力します。
* **restore** - 分析ステップ後からピックアップします。コマンドレットの実行でメモリ不足の時や、1 つのモードで実行したけれども、今は、他のモードで実行したい時などに便利です。
* **nosave** - 単に分析を行い、レポートをダンプ出力することが可能ですが、実際に保存はできません。
* **nosaveunreferenced** - デフォルトでは、コマンドレットは参照されていないコンテンツを内部ポインタを損なわないためにオブジェクトの名前を変えた NFS_ packages として NFSContent ディレクトリ (非出荷) に保存します。このオプションは、このステップをスキップします (再度コンテンツを利用しないことがわかっている場合は有用です) 。
* **reportunreferenced** - 参照されていないコンテンツのリストの .csv ファイルをダンプ出力します。 
* **removeeditoronly** - 未使用のコンテンツを削除している間に、結果のパッケージをより小さくするためにエディタ専用のデータも取り除きますが、フルコンテンツ生成においては、それほど利用価値があるわけではありません。
* **stripmips** - engine.ini のテクスチャ グループ 詳細設定に合わせて、未使用の MIP レベルをテクスチャから削除します。  
* **allmaps** - WrangleContent.ini にリスト化されているものではなく全てのマップを使ってWrangleします。 




## AnalyzeReferencedContent コマンドレット

analyzereferencedcontent コマンドレットは、パッケージ内で使用されているデータを識別するのに使用されます。 


### 記法


    
    gamename.exe analyzereferencedcontent <-switch>
    




### パラメータ


* **mapsonly** - レベル パッケージのみを使用します。 
* **excludescript** - スクリプト パッケージを除外します。 
* **excludenonnativescript** - 非 Native スクリプトを除外します。
* **loadsublevels** - サブ レベルを読み込みます。永続性マップのみをパスすることができます。
* **ignorestaticmesh** - StaticMesh は含まれません。
* **ignoresmc** - StaticMeshComponent は含まれません。
* **ignorestaticmeshactor** - StaticMeshActor は含まれません。
* **ignoretexture** - Texture は含まれません。
* **ignorematerial** - Material は含まれません。
* **ignoreparticle** - ParticleComponent と ParticleSystem? は含まれません。
* **ignoreanim** - AnimSets/AnimSequences は含まれません。
* **ignorelevel** - Levels は含まれません。
* **ignoresoundcue** - SoundCue は含まれません。
* **ignorebrush** - Brush は含まれません。
* **ignoreshadowmap** - ShadowMap は含まれません。




## RebuildMap コマンドレット

rebuildmap コマンドレットは、ライティングも含めたマップをリビルドするために利用されます。

**注記**： _コマンドレットは完全なデバッグはできませんので、 (すべての新規マテリアルおよび UV と共にブラシをランダムにリマップするように) しばしば、期待しない結果と成ることがあります。_

_このコマンドレットは、しばしばエディタを実行している際のメモリ欠如 (OOM) を回避するために使用されます。リビルドをいくつかの段階に分けることが最善です。_： 
1. まずは
    * ジオメトリをビルドする
    * 保存する
    * 再起動する
1. それから
    * パスをビルドする
    * 保存する
    * 再起動する
1. 最後に
    * ライティングをビルドする
    * 保存する

_クイック ボタンを使用するのではなく、 Tools (ツール) のドロップダウンを使用すると、それ以外で利用可能でないようなオプションの完全なホストを得ることができます。_

_また、何が問題なのかデバッグできるようになるまで、後ろで何も実行していない状態の完全な再起動状態から始めることが最善です。内部では、最新のビデオ ドライバを (適切に) アンインストールして、再インストールするまで、マップで非常に大きな OOM 問題を抱えていました。_


### 記法


    
    gamename.exe rebuildmap <levelname>
    




### パラメータ


* **levelname** - リビルドするレベル (マップ) の名前。




## ResavePackages コマンドレット

resavepackages コマンドレットは、ゲームのパッケージをオープンして保存します。


### 記法


    
    gamename.exe resavepackages
    




### パラメータ



## ExportLoc コマンドレット

exportloc コマンドレットは、 UnrealScript パッケージ内のローカライズ文字列をローカライズテキストファイルにエクスポートします。


### 記法


    
    gamename.exe exportloc
    




### パラメータ



## MergePackages コマンドレット

mergepackages コマンドレットは、他のパッケージにパッケージの内容を設定します。


### 記法


    
    gamename.exe mergepackages <package> <targetpackage>
    




### パラメータ



## DiffPackages コマンドレット

diffpackages コマンドレットは、特定の 2 つのパッケージですべてのプロパティ差異を表示します。


### 記法


    
    gamename.exe diffpackages <package> <package>
    




### パラメータ



## CookPackages コマンドレット

cookpackages コマンドレットは、コンソールが読み取れるようなフォーマットに、パッケージ データをプロセスして変換します。


### 記法


    
    gamename.exe CookPackages [map1 [map2] ... ] -platform=<Platform> [options]
    




### パラメータ


* **platform=PLATFORM** - クックするためのプラットフォームを設定します。PLATFORM は pc、ps3、xbox360、xenon のどれかを使用できます。
* **full** -  すべての既存のパッケージを強制的に再保存します。このオプションが指定されると、 CookedYYY フォルダのコンテンツは最初に削除されます。 
* **recookseekfree** - すべてのシークフリー パッケージを強制的に再保存します (コマンドラインのスタートアップ、スタンドアロン シークフリー、マップ、または .ini)。デフォルト依存性チェックが動作しない (特にスタンドアロン シークフリー パッケージです。なぜならば、マップとは違って非シークフリー パッケージが変更される際、すべてのスタンドアロン シークフリー パッケージはリクックされないからです) 場合に便利です。
* **cookallmaps** - ゲーム内のすべてのマップをクックします。
* **mapsonly** - マップのみをクックし、他に何もクックしようとしません。
* **inisonly** - .ini とローカリゼーション ファイルのみを (Coalesced.ini や Coalesced.int などのファイルに) クックします。
* **sha** - スタートアップ、合体ファイルに SHA ハッシュを生成して、Hashes.sha に出力します。
* **skipsavingmaps** - マップをクックしますが、保存はしません。マップに使用されている LOC データをクックするのに便利です。 
* **skipnotrequiredpackages** - LOC クックをスピードアップするために、クック プロセスに必要とされないパッケージの読み込みと保存をスキップします。 
* **cultureforcooking=LANG** - ローカライズ化クックの言語を LANG に設定します。int (English) にデフォルトします。 




## ShowTaggedProps コマンドレット

showtaggedprops コマンドレットは、クラス デフォルトやアーキタイプから派生した値やランタイム時に設定された値などに対して、オブジェクトのパッケージ ファイルに実際にどの値が保存されたかを識別する手助けをします (オブジェクト値を確認するもう 1 つの選択肢は、デバッガで実行、あるいは OBJ DUMP ObjectName コンソールコマンドをランタイム時に使用することだからです)。問題が読み込みにあるのか、保存にあるのかが簡単に分かるので、直列化に関する何かをトラックする際には、このコマンドレットを使用します。


### 記法


    
    gamename.exe showtaggedprops <PackageName[.ext]> <ClassPackage.ClassName> [PropertyA[,PropertyB...]]
    




### パラメータ



## ListPackagesReferencing コマンドレット

listpackagesreferencing コマンドレットは、任意のパッケージで欠けているリソースを探すのに有用です。 


### 記法


    
    gamename.exe listpackagesreferencing <package.missingresource>
    




### パラメータ



## SetMaterialUsage コマンドレット

setmaterialusage コマンドレットは、任意のパッケージのマテリアル使用量を識別します。


### 記法


    
    gamename.exe setmaterialusage <package>
    




### パラメータ



## DumpShaders コマンドレット

dumpshaders コマンドレットは、シェーダ、すべてのインクルード、プリプロセスされたバージョン、結果となった asm 、バッチ ファイルをダンプし、素早いイテレーションのために、コマンドライン シェーダ コンパイラ (.fxc) を使用してリコンパイルします。 

グローバル シェーダが提供されていると、マッチするタイプのみが操作されます。マテリアルが提供されていると、そのマテリアルによってコンパイルされたすべてのシェーダはダンプされます。



### 記法


    
    gamename.exe DumpShaders platform=<platform> [globalshader=<shadertype>] [material=<materialname>]
    




### パラメータ


## CheckLightMapUVs コマンドレット

スタティック メッシュをスキャンし、ライトマップ テクスチャ座標セットの問題をチェックします。以下の問題を検知します。


* 欠けているライトマップ テクスチャ座標セット
* 0.0 - 1.0 範囲外のライトマップ テクスチャ座標
* お互いに重複するライトマップ テクスチャ座標


問題が見つかると、詳細の警告メッセージが繰り返されます。

デフォルトで、すべてのゲーム パッケージは、(マップ パッケージ) を含む静的メッシュに関するスキャンをします。あるいは、コマンドラインでパッケージのセットを指定してスキャンできます。


### 記法


    
    gamename.exe CheckLightMapUVs [package1] [package2] ...
    




### パラメータ

None



## FindUniqueSpecularTextureMaterials コマンドレット

ユニークなスペキュラー テクスチャを持つすべての環境マテリアルの **コンテンツブラウザ** コレクションを生成します。環境マテリアルの判定は、WORLD LODGroup に設定されたディフューズチェーンにテクスチャが含まれているかどうかにより決まります。


### 記法


    
    gamename.exe FindUniqueSpecularTextureMaterials <-ALLMATERIALS>
    




### パラメータ

-ALLMATERIALS
環境マテリアルだけでなく、すべてのマテリアルについてスペキュラー テクスチャが存在するかどうかを調べます。



## FindDarkDiffuseTextures コマンドレット

ディフューズプロパティチェーンに暗いテクスチャが含まれているすべてのマテリアルの **コンテンツブラウザ** コレクションを生成します。 


### 記法


    
    gamename.exe FindDarkDiffuseTextures <MINBRIGHT=###> <-ALLOWBLACK> <-GRAYSCALE> <UPDATE=##>
    




### パラメータ

MINBRIGHT=###

「暗くない」ことを意味する明るさパーセント値を、浮動少数点数により指定します。 
この値は GammaSpace の [0.0 .. 100.0] までの範囲にあることを前提としています。 
デフォルト値を editor.ini ファイルでも指定することもできます ([DarkTextures],MinimalBrightness)。

-ALLOWBLACK

true の場合、明るさの計算に真っ黒のテクセルも含まれます。
 デフォルト値は false で、ini ファイルでも指定できます[DarkTextures],bIgnoreBlack (false == allow)。

-GRAYSCALE

true の場合、明るさの計算では次の式を用いて各ピクセルをグレースケールに変換します。
    GS = R * 0.30 + G * 0.58 + B * 0.11
FALSE の場合、明るさの計算式は Max (R, Max(G,B)) です。
デフォルト値を editor.ini ファイルでも指定することもできます ([DarkTextures],bUseGraySCale)。

UPDATE=##

## 個のパッケージが処理されるたびに、コレクションが更新されることを示す整数。


[PUBLISH:Docs]
## コマンドレットの作成方法

[コマンドレットの作成方法](Programming/Development/Tools/Commandlets/MakingACommandlet) ページを参照してください。
[/PUBLISH:Docs]
 




