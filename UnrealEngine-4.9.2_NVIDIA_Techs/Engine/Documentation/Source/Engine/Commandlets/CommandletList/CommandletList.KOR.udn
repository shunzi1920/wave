INTSourceChangelist:2086979
Availability: Docs
Title: 커맨드렛 목록
Crumbs: %ROOT%, Engine, Engine/Commandlets
Description:커맨드렛과 그 사용법에 대한 설명입니다.

[REGION:todo]
	언리얼 엔진 3 에서 이식해 온 문서로 현재 검토중에 있습니다. 정보가 맞지 않을 수 있습니다.
[/REGION]

[TOC (start:2 end:2)]

## 개요

커맨드렛이란 언리얼 엔진 환경 내에서 실행되는 명령줄 프로그램입니다. 콘텐츠에 대규모 변경사항을 가하거나 콘텐츠를 반복처리하여 정보를 얻고자 할 때, 유닛 테스팅 메커니즘으로 사용하고자 할 때 자주 사용됩니다.

근본적으로는 엔진을 초기화시킨 작은 애플릿이긴 하나, 대부분은 그냥 윈도우 콘솔 출력으로 한정됩니다.

명령줄에 입력한 명령이 커맨드렛인지는 엔진이 자동으로 검사해서, 일치하는 것이 있으면 관련된 코드를 실행시킵니다.

여기서는 언리얼 엔진 3 에서 사용되는 커맨드렛에 대한 설명과 문법을 나열해 보도록 하겠습니다.



## 커맨드렛 실행하기

커맨드렛은 명령줄의 게임 뒤에 그 커맨드렛 이름과 필수 파라미터를 전달하는 식으로 실행됩니다. 윈도우의 cmd 창을 통해서나 게임의 주요 실행파일(UDK.exe 등으)로의 바로가기 대상을 통해서 실행하면 됩니다.

예를 들어 UDK **`FixupRedirects`** 커맨드렛은 명령줄에 다음과 같이 입력하여 실행시킬 수 있습니다:

    UDK.exe fixupredirects
    

## Help (도움말)

[help 커맨드렛](Engine/Commandlets/Help) 은 실행 가능한 커맨드렛이 무엇인가, 그 목적은 어떠하며 그 파라미터는 어떻게 주나 등을 알려줍니다. 가능한 커맨드렛을 알아보려면:


### 문법
    
    gamename.exe help <list | commandletname | webhelp commandletname>
    

### 파라미터


* **`list`** - 사용가능한 커맨드렛 전부를 나열합니다.
* **`commandlet name`** - 지정된 커맨드렛에 대한 도움말 정보를 나타냅니다.
* **`webhelp`** - 지정된 커맨드렛에 대한 웹 페이지 문서 URL 로 브라우저를 실행시킵니다.


## FixupRedirects (리디렉터 고치기)

Fixupredirects 는 모든 패키지, 또는 옵션으로 지정된 패키지의 [](Engine/Basics/Redirectors) 를 전부 고칩니다. 자기 자신을 참조하는 redirector 는 삭제됩니다. 지정된 패키지가 없으면 게임에 필요한 패기지 전부를 검사합니다.


* 패키지 저장 시도 전에, (UnrealEd 내 SCC 와 동일한 방법으로) 소스 콘트롤에서 체크 아웃을 시도합니다. 
* 그래도 수동으로 패키지를 체크인해야 합니다.
* 필요한 (redirector 가 있는 패키지와 그것이 가리키는) 패키지만 저장합니다.
* 체크아웃 불가능한 패키지가 redirector 를 가리키는 경우, 그 redirector 는 정리되지 않습니다.
* 패키지 이름을 하나 주면 그 패키지(그 패키지와 그 redirector 를 가리키는 패키지 전부)에 있는 redirector 만 고칩니다. 한 redirector 를 정리하여 그 위에 임포트하고자, 또는 redirector 가 가리키고 있는 오브젝트를 지우고자 할 때 좋습니다.
* 패키지를 열 수 없는 경우, 계속할지 말지를 묻는 경고창이 뜹니다. 계속하면 약간의 오브젝트 참조를 잃을 수 있는데, 왜냐하면 열리지 않은 패키지에 redirector 로의 참조가 있을 수 있으나, 커맨드렛은 열 수 없으니 알 수 없어 그냥 없는 것으로 간주하기 때문입니다. 그 지점에서 멈추기로 했다면, 다른 패키지가 저장됩니다 (물론 패키지를 열 때 크래시가 난다면 프로세스를 중단하여 모든 패키지를 건드리지 않고 놔둡니다).
* **`-nowarn`** 옵션을 주면, 패키지를 열 수 없을 경우 그냥 빠져나갑니다 (스크립트 등의 용도이긴 하나, unattended 인 경우 파일을 열 수 없으면 그냥 멈춰버리는 등, 그냥 안전한 방법을 선택합니다.)


### 문법

 
    game.exe fixupredirects <package.ext>
    

### 파라미터


* **`package.ext`** - redirector 검사를 할 패키지 이름입니다. (옵션)


## ContentAudit (콘텐츠 심사)

([](Engine/Commandlets/ContentAudit) 참고.)


## FindDuplicateTextures (중복 텍스처 찾기)


## SetTextureLODGroup (텍스처 LOD 그룹 설정)

([](Engine/Commandlets/SetTextureLODGroup) 참고.)



## ContentComparison (콘텐츠 비교)

([](Engine/Commandlets/ContentComparison) 참고.)



## DeleteQuarantinedContent (격리된 콘텐츠 삭제)

([](Engine/Commandlets/DeleteQuarantinedContent) 참고.)




## BatchExport (일괄 익스포트)

[BatchExport 커맨드렛](Engine/Commandlets/BatchExport)은 언리얼 패키지 파일에서 다양한 외부 파일형으로 익스포트할 때 사용됩니다.


### 문법

    gamename.exe gamename.exe BatchExport <package.ext> <classname> <export_ext> [dest_path_name]
    

### 파라미터


* **`package.ext`** - 리소스를 익스포트할 원본 패키지 이름입니다. 경로명은 옵션입니다.
* **`classname`** - 익스포트할 오브젝트 클래스입니다. "Class", "Texture" 등.
* **`export_ext`** - 출력 파일 확장자입니다. 리소스 익스포트용으로 사용되는 팩토리 유형을 결정하는 데 사용됩니다.
* **`dest_path_name`** - 출력 파일을 저장할 경로입니다. 디렉토리가 존재하지 않으면 생성합니다.


(#MakeCommandlet)



## Make (메이크)

make 커맨드렛은 구식(out of date) 패키지에 대해 게임 언리얼스크립트 소스(.uc 파일)를 언리얼 패키지(.u 파일)로 컴파일시킵니다.


### 문법


    
    gamename.exe make <-switch>
    




### 파라미터


* **`full`** - 구식이 아니더라도 모든 패키지를 강제로 다시 컴파일시킵니다.
* **`nodelete`** - 구식이 아닌 의존(dependent) 패키지를 지우지 않습니다. 기본 행위는 EditPackages 목록의 구식 패키지 이후 발생한 패키지를 리빌드하는 것입니다.
* **`debug`** - 컴파일된 바이너리에 디버깅 정보를 포함시킵니다. 언리얼스크립트 디버거를 사용하기 위해 필요합니다.
* **`auto`** - 업데이트가 필요한 자동생성 헤더를 묻지 않고 자동으로 체크아웃합니다. 자동생성 헤더 파일 익스포팅에 관련해서 스크립트 컴파일러가 묻는 질문은 전부 억제시킵니다.
* **`unattended`** - 빌드 도중에 받은 모든 질문에 자동으로 "예"라 답하여 억제시킵니다.
* **`silent`** - unattanded 와 비슷하지만, 빌드 출력 (로깅 등)도 억제됩니다.
* **`silentbuild`** - 모든 컴파일러 상태 메시지를 억제시켜 콘솔 출력 창에 표시되지 않게 합니다.
* **`noconform`** - 스크립트 패키지는 보통 (게임마다 다를 수 있는) 자동-일치(conform) 디렉토리에 같은 이름의 패키지가 있는 경우 자동으로 일치됩니다.
* **`WarningsAsErrors`** - 모든 스크립트 컴파일 경고를 오류로 간주하여, 빌드가 실패하도록 합니다.
* **`intermediate`** - 스크립트 전처리기: 모든 언리얼스크립트 파일의 후처리된 버전을, 전처리기의 ProcessedFileDirectory 값에 지정된 대로, 전처리기의 중간(intermediate) 디렉토리에 출력합니다. 언리얼스크립트 매크로 디버깅에 좋습니다.
* **`nopreprocess`** - 스크립트 전처리기: 전처리기가 언리얼스크립트 매크로를 처리하지 못하게 합니다. 보통 스크립트가 전혀 컴파일되지 못하게 하므로 디버깅용으로만 유용합니다.
* **`stripsource`** - 새로이 컴파일된 .u 패키지 저장 전 스크립트 소스 코드와 cpptext 블록을 벗겨냅니다. 코멘트가 벗겨지지 않아 보이니 가치가 없어 보일 수도 있습니다.




## StripSource (소스 벗기기)

stripsource 커맨드렛은 언리얼 패키지(.u 파일)를 로드하여, 모든 Class 를 반복처리하고 ScriptText 를 단일 공간으로 설정한 다음, 패키지를 저장하기 위해 SavePackage() 를 호출합니다.

문제는 Core.u, Engine.u, Editor.u 등과 같은 패키지는 커맨드렛을 돌리는 실행파일이 사용중일 것이기에 덮어쓸 수가 없고, 그래서 그 패키지 저장이 실패한다는 것입니다.

이 문제 해결에 좋은 방법은 패키지를 굽는 건데, ScriptText(와 CppText)를 벗겨내는 것입니다. 데이터를 굽지 않으려 한다면, ResetLoaders() 를 호출하여 패키지가 열리는 문제를 해결할 수 있을지도 모르겠습니다.

다른 방법으로는 ["make" 커맨드렛](#MakeCommandlet)에 "-stripsource" 인수를 붙이면 됩니다. 


### 문법


    
    gamename.exe stripsource <package.u, ...>
    




### 파라미터



## Conform (일치)

conform(일치) 커맨드렛은 동일한 GUID 를 할당하여 패키지에 대한 네트워크 호환성을 보장해 줍니다. 이 작업은 패키지가 변경될 때마다 매번 해 줘야 합니다.


### 문법


    
    gamename.exe conform to_package from_package
    




### 파라미터



## PkgInfo (패키지 인포)

pkginfo 커맨드렛은 하나 이상의 패키지에 포함된 리소스 관련 정보를 나타내 줍니다.


### 문법


    
    gamename.exe pkginfo <package.ext> <-switch>
    




### 파라미터


* **`package.ext`** - 리소스 정보를 나타낼 패키지 이름입니다.
* **`names`** - 지정된 패키지에 대한 네임 테이블 관련 정보를 나타냅니다.
* **`imports`** - 지정된 패키지에 포함된 오브젝트가 참조하는 외부 리소스를 나타냅니다. (ImportTable)
* **`exports`** - 지정된 패키지에 포함된 리소스를 나타냅니다. (ExportTable)
* **`simple`** - -exports 플래그와 같이 쓸 때만 의미가 있습니다. 각 익스포트 별 전체 정보가 아닌, 이름과 크기만 나타나도록 합니다.
* **`depends`** - 임포트나 익스포트에 대한 종속성을 표시합니다. 오브젝트가 무엇을 참조하는지, 재귀적으로 그 참조가 무엇을 참조하는지 등.
* **`all`** - 패키지에 포함된 모든 데이터를 나타냅니다. 명령줄에 세 가지 종류를 모두 (-imports -exports -names) 지정하는 것과 본질적으로 같습니다.
* **`chunks`** - 패키지 내 압축 청크(덩어리) 관련 정보를 나타냅니다.
* **`paths`** - 참조된 (imports 등) 외부 리소스 모두에 대한 전체 경로명을 나타냅니다.
* **`hideoffsets`** - (exports 등) 패키지에 포함된 UObjecs 의 처음에 Serialize 된 오프셋을 표시하지 않습니다.
* **`platform=<ps3,xenon>`** - 패키지를 쿠킹한 대상 플랫폼을 지정하는 데 사용합니다.




## WrangleContent (콘텐츠 고르기)

wranglecontent 커맨드렛은 어느 레벨에서도 사용되지 않는 패키지 내 애셋을 식별하는 데 사용합니다.


### 문법


    
    gamename.exe wranglecontent <-switch>
    




### 파라미터


* **`reportunreferenced`** - 미사용 콘텐츠를 덤프합니다.
* **`restore`** - 분석 단계 이후에서 픽업합니다. 커맨드렛 메모리가 부족할 때나, 한 모드로 실행하다 다른 모드로 실행하고 싶을 때 좋습니다.
* **`nosave`** - 분석 후 보고서를 덤프하기만 하고, 실제로 저장하지는 않습니다.
* **`nosaveunreferenced`** - 이 커맨드렛의 디폴트 동작은 미참조된 콘텐츠를 NFSContent 디렉토리 (NFS:Not For Ship), NFS_ 패키지로 저장하고, 내부 포인터도 유지하기 위해 오브젝트 이름도 바꿉니다. 그러나 이 옵션은 이 단계를 생략합니다 (콘텐츠를 다시 쓰지 않을 것이 확실한 경우에 좋습니다).
* **`reportunreferenced`** - 미참조된 콘텐츠 목록을 포함하여 .csv 파일로 덤프합니다.
* **`removeeditoronly`** - 미사용 콘텐츠를 제거하면서, 결과 패키지 크기를 더욱 작게 만들기 위해 에디터 전용 데이터도 벗겨냅니다. 그러나 풀 콘텐츠 제작에는 그리 유용하지 않습니다.
* **`stripmips`** - engine.ini 내 텍스처 그룹 디테일 세팅에 따라 텍스처에서 미사용 MIP 레벨을 제거합니다. 
* **`allmaps`** - WrangleContent.ini 에 나열된 것 뿐 아니라 모든 맵을 사용하여 wrangle 합니다.




## AnalyzeReferencedContent (참조된 콘텐츠 분석)

analyzereferencedcontent (참조된 콘텐츠 분석) 커맨드렛은 패키지에 사용되고 있는 데이터를 식별하는 데 사용합니다.


### 문법


    
    gamename.exe analyzereferencedcontent <-switch>
    




### 파라미터


* **`mapsonly`** - 레벨 패키지만 사용합니다.
* **`excludescript`** - 스크립트 패키지는 제외합니다.
* **`excludenonnativescript`** - 네이티브 스크립트가 아닌 것은 제외합니다.
* **`loadsublevels`** - 서브 레벨을 로드합니다. 지속 맵만 패스할 수 있습니다.
* **`ignorestaticmesh`** - 스태틱 메시를 포함시키지 않습니다.
* **`ignoresmc`** - 스태틱 메시 컴포넌트를 포함시키지 않습니다.
* **`ignorestaticmeshactor`** - 스태틱 메시 액터를 포함시키지 않습니다.
* **`ignoretexture`** - 텍스처를 포함시키지 않습니다.
* **`ignorematerial`** - 머티리얼을 포함시키지 않습니다.
* **`ignoreparticle`** - 파티클 컴포넌트와 파티클 시스템을 포함시키지 않습니다.
* **`ignoreanim`** - 애님세트/애님시퀀스를 포함시키지 않습니다.
* **`ignorelevel`** - 레벨을 포함시키지 않습니다.
* **`ignoresoundcue`** - 사운드큐를 포함시키지 않습니다.
* **`ignorebrush`** - 브러시를 포함시키지 않습니다.
* **`ignoreshadowmap`** - 섀도우맵을 포함시키지 않습니다.




## RebuildMap (맵 리빌드)

rebuildmap 커맨드렛은 라이팅을 포함해서 맵을 리빌드하는 데 사용합니다.

*주*: _이 커맨드렛은 완전히 디버깅되지 않아 (브러시가 완전 새로운 머티리얼과 UV 로 임의 리매핑된다던가) 바람직하지 못한 결과가 날 수도 있습니다._

_이 커맨드렛은 보통 에디터를 실행할 때 메모리 부족(OOM, out of memory)을 우회하기 위해 사용합니다. 리빌드 프로세스를 단계별로 나누는 것이 가장 좋습니다_:
1. 먼저...
    * 지오메트리 빌드
    * 저장
    * 재시작
1. 후...
    * 패쓰 빌드
    * 저장
    * 재시장
1. 마지막으로...
    * 라이팅 빌드
    * 저장

_단축 버튼 대신 Tools 드롭다운을 사용해야 다른 방법으로는 볼 수 없는 옵션을 전부 볼 수 있습니다._

_뭐가 잘못됐는지 버그를 잡아낼 때 까지는 백그라운드에 아무것도 실행되지 않은 깨끗한 리붓 상태로 시작하는 것도 좋습니다. 저희 내부적으로, 최신 비디오 드라이버를 (제대로!) 설치 해제하고 재설치하기 전까지는 그 엄청난 맵 메모리 부족 문제에 시달렸었습니다._


### 문법


    
    gamename.exe rebuildmap <levelname>
    




### 파라미터


* **`levelname`** - 리빌드할 레벨(맵) 이름




## ResavePackages (패키지 재저장)

resavepackages 커맨드렛은 게임 패키지를 열고 저장하도록 합니다.


### 문법


    
    gamename.exe resavepackages
    




### 파라미터



## ExportLoc (loc 익스포트)

exportloc 커맨드렛은 UnrealScript 패키지의 현지화된 문자열을 현지화 텍스트 파일로 익스포트합니다.


### 문법


    
    gamename.exe exportloc
    




### 파라미터



## MergePackages (패키지 병합)

mergepackages 커맨드렛은 패키지의 콘텐츠를 다른 패키지로 넣어줍니다.


### 문법


    
    gamename.exe mergepackages <package> <targetpackage>
    




### 파라미터



## DiffPackages (패키지 차이)

diffpackages 커맨드렛은 지정된 두 패키지 사이에 차이가 나는 속성을 전부 표시해 줍니다.


### 문법


    
    gamename.exe diffpackages <package> <package>
    




### 파라미터



## CookPackages (패키지 쿠킹)

cookpackages 커맨드렛은 패키지 데이터를 콘솔에서 읽을 수 있는 포맷으로 처리하여 변환합니다.


### 문법


    
    gamename.exe CookPackages [map1 [map2] ... ] -platform=<Platform> [options]
    




### 파라미터


* **`platform=PLATFORM`** - 쿠킹 대상 플랫폼을 설정합니다. PLATFORM 은 pc, ps3, xboxs360, xenon 중 하나입니다.
* **`full`** - 기존 패키지 전부를 강제로 다시 저장합니다. 이 옵션이 지정되면 먼저 CookedYYY 폴더의 콘텐츠가 삭제됩니다.
* **`recookseekfree`** - 모든 seekfree 패키지를 강제로 다시 쿠킹합니다 (startup, standalone seekfree, 명령줄이나 .ini 의 맵) 디폴트 종속성 검사가 작동하지 않을 때 좋습니다. (standalone seekrfree 패키지의 경우는 특히나, 맵과는 달리 non-seekfree 패키지가 변경될 때 모든 standalone seekfree 패키지를 리쿠킹하지 않기 때문입니다.)
* **`cookallmaps`** - 게임 내 모든 맵을 쿠킹합니다.
* **`mapsonly`** - 맵만 쿠킹하며, 다른 것은 시도하지 않습니다.
* **`inisonly`** - .ini 및 현지화 파일만 (Coalesced.ini 및 Coalesced.int 등의 파일로) 쿠킹합니다.
* **`sha`** - startup 및 coalesced (합체) 파일에 대한 SHA 해시를 생성하고, Hashes,sha 로 출력합니다.
* **`skipsavingmaps`** - 맵을 쿠킹만 하고 저장하진 않습니다. 맵에 사용된 LOC 데이터 쿠킹에 좋습니다.
* **`skipnotrequiredpackages`** - LOC 쿠킹을 가속하기 위해 쿠킹 프로세스에 필요치 않은 패키지의 로드 & 저장을 생략합니다.
* **`cultureforcooking=LANG`** - LANG 을 현지화된 쿠킹용 언어로 설정합니다. 디폴트는 int (English) 입니다.




## ShowTaggedProps (태깅된 프로퍼티 표시)

showtaggedprops 커맨드렛은 한 오브젝트에 대한 패키지 파일 속에, 클래스 디폴트나 아키타입 등 런타임에 설정되는 것에서 상속된 값이 아니라, 실제로 저장된 값이 무엇인지 알아내기에 좋은 커맨드렛입니다. (왜냐면 오브젝트의 값을 확인할 수 있는 유일한 대안은 디버거에서 실행하거나, 런타임에 `OBJ DUMP ObjectName` 콘솔 명령 을 사용하는 것이기 때문입니다.) 문제가 로드나 저장 과정에서 생기는지 알아보기에 좋기 때문에, Serialize 에 관련된 무언가를 찾아내려갈 때 이 커맨드렛을 사용합니다.


### 문법


    
    gamename.exe showtaggedprops <PackageName[.ext]> <ClassPackage.ClassName> [PropertyA[,PropertyB...]]
    




### 파라미터



## ListPackagesReferencing (참조중인 패키지 나열)

listpackagesreferencing (참조중인 패키지 나열) 커맨드렛은 지정된 패키지에 빠진 리소스를 찾는 데 좋습니다.


### 문법


    
    gamename.exe listpackagesreferencing <package.missingresource>
    




### 파라미터



## SetMaterialUsage (머티리얼 사용 설정)

setmaterialusage 커맨드렛은 지정된 패키지에 대한 머티리얼 사용을 알아봅니다.


### 문법


    
    gamename.exe setmaterialusage <package>
    




### 파라미터



## DumpShaders (셰이더 덤프)

dumpshaders 커맨드렛은 빠른 반폭처리를 위해 명령줄 셰이더 컴파일러(.fxc)를 사용하여 리컴파일시킬 셰이더, 모든 include, 전처리된 버전, 결과 asm, 배치 파일 등을 덤프하는 커맨드렛입니다.

전역 셰이더가 제공되면, 일치하는 유형에만 영향을 끼칩니다. 머티리얼이 제공되면, 그 머티리얼에 의해 컴파일된 모든 셰이더가 덤프됩니다.



### 문법


    
    gamename.exe DumpShaders platform=<platform> [globalshader=<shadertype>] [material=<materialname>]
    




### 파라미터


## CheckLightMapUVs (라이트맵 UV 검사)

스태틱 메시를 훑어 라이트맵 텍스처 좌표 세트 관련 문제를 검사합니다. 다음과 같은 문제를 알아냅니다:


* 빠진 라이트맵 텍스처 좌표 세트
* 0.0 - 1.0 범위 밖의 라이트맵 텍스처 좌표
* 서로 겹치는 라이트맵 텍스처 좌표


문제가 발견되면 자세한 경고 메시지가 나타납니다.

디폴트로 (맵 패키지 포함) 모든 게임 패키지에서 스태틱 메시를 훑어봅니다. 명령줄에 훑어볼 패키지 세트를 지정할 수도 있습니다.


### 문법


    
    gamename.exe CheckLightMapUVs [package1] [package2] ...
    




### 파라미터

None



## FindUniqueSpecularTextureMaterials (고유 스페큘러 텍스처 머티리얼 찾기)

**고유** 스페큘러 텍스처를 가진 모든 환경 머티리얼에 대해 콘텐츠 브라우저 콜렉션을 생성합니다. WORLD LODGroup 으로 설정된 디퓨즈 체인에 텍스처를 갖는 것으로 환경 머티리얼이 결정됩니다.


### 문법


    
    gamename.exe FindUniqueSpecularTextureMaterials <-ALLMATERIALS>
    




### 파라미터

-ALLMATERIALS
고유 스페큘러 텍스처에 대해 환경 뿐만 아니라 모든 머티리얼을 검사합니다.



## FindDarkDiffuseTextures (어두운 디퓨즈 텍스처 찾기)

디퓨즈 프로퍼티 체인에 'dark' 텍스처를 가진 모든 머티리얼에 대한 콘텐츠 브라우저 콜렉션을 생성합니다.


### 문법


    
    gamename.exe FindDarkDiffuseTextures <MINBRIGHT=###> <-ALLOWBLACK> <-GRAYSCALE> <UPDATE=##>
    




### 파라미터

MINBRIGHT=###

'어둡지 않음을' 나타내기 위해 백분율 밝기 값을 내는 부동소수점 수치입니다.
이 값은 GammaSpace 내, [0.0 .. 100.0] 범위 값으로 간주됩니다.
디폴트 값은 에디터 ini 파일에도 지정되어 있습니다: [DarkTextures],MinimalBrightness.

-ALLOWBLACK

_True_ 면 순수하게 검정인 텍셀이 밝기 계산시 고려됩니다.
디폴트는 false 이며, ini 파일에서도 지정할 수 있습니다: [DarkTextures], bIgnoreBlack (false == 허용).

-GRAYSCALE

true 면 밝기 계산시 다음 공식을 사용하여 각 픽셀을 그레이스케일로 변환합니다:
    GS = R * 0.30 + G * 0.58 + B * 0.11
false 면 밝기 계산은 Max(R, Max(G,B)) 이 됩니다.
디폴트 값은 editor ini 파일에도 지정되어 있습니다: [DarkTextures], bUseGraySCale.

UPDATE=##

패키지가 ## 개 처리될 때마다 콜렉션을 업데이트함을 나타내는 정수입니다.


[PUBLISH:Docs]
## 커맨드렛 만드는 법

[](Programming/Development/Tools/Commandlets/MakingACommandlet) 페이지를 참고해 주시기 바랍니다.
[/PUBLISH:Docs]
 




