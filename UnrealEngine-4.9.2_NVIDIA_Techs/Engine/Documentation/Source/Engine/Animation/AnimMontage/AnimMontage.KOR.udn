INTSourceChangelist:2590930
Availability:Public
Title:애님 몽타주
Crumbs: %ROOT%, Engine, Engine/Animation
Description:AnimMontage, 애님 몽타주란 무엇이며 UE4 의 애니메이션 시스템에서는 어떻게 사용되는지에 대한 정보입니다.
Related: Engine/Content/FBX/Animations
Related: Engine/Content/Types/SkeletalMeshes
Related: Engine/Animation/PhysicallyDrivenAnimation
Related: Engine/Animation/StateMachines
Related: Gameplay/AI
Related: Engine/Content/Tools/MayaRiggingTool
Related: Gameplay/Input


[TOC(start:2 end:3)]

## 개요

[EXCERPT:Intro]
**AnimMontage** (애님 몽타주, 혹은 줄여서 그냥 몽타주)는 폭넓은 애니메이션 이펙트가 가능해지는 다목적 툴로써, 주로 코드나 블루프린트 안에 애니메이션 콘트롤을 노출시키는 데 관련되어 있습니다. 애니메이션의 지능형 루프, 로직 기반 애니메이션 전환, 루트 모션 핸들링, 기타 여러가지 다양한 애니메이션 이펙트를 만드는 데도 사용 가능합니다.
[/EXCERPT:Intro]

_애님 몽타주_ 는 **콘텐츠 브라우저** 안에서 만들어 그 안에서 확인할 수 있는 애니메이션 애셋입니다. 이 애셋을 실행 시간에 애님 그래프에 직접 꽂으면 그 상태를 변경할 수 있습니다. 예를 들면, 다른 섹션으로 점프한다던가 다른 섹션으로 다시 연결할 수 있는 것입니다. 이는 거의 코드 주도형 애니메이션 또는 근접 공격같은 일회성 애니메이션의 경우로, 트리거를 제어하거나, 원할 때 멈추거나, (루프 또는 논루프) 상태 전환이 가능합니다 (아래 그림 참고).

![](Montage_Screen2.png)

위 그림은 세 가지 [시작, 루프, 끝] 섹션으로 된 근접 공격입니다. 플레이어가 **좌클릭** 하면, 기본적으로 시작 섹션을 발동시켜 몽타주 재생을 요청합니다. 이제 중간 섹션은 루프, 반복 설정되어 있습니다. 시작 섹션이 완료되면 루프로 전환한 뒤 영원히 반복합니다. 플레이어가 버튼을 놓으면, 중지를 할 테지만, 애니메이션이 루프 중간에 튀어 보일테니 바로 중지하지는 않습니다. 루프를 끝으로 전환하여 애니메이션을 마무리할 수 있도록 재연결해 주는 것이 좋을 것입니다.

추가적으로 몽타주가 사용되는 예는 다음과 같습니다:
* 애님 블루프린트의 이벤트 그래프 안에서 애니메이션 재생
* 복잡한 애니메이션 시퀀스를 엮어 하나의 애니메이션으로 간주
* 코드나 블루프린트 스크립트를 통해 애니메이션의 특정 부분이나 다수의 애니메이션 루프
* 코드나 블루프린트 스크립트를 통해 다수의 애니메이션에 대한 이벤트 기반 전환 처리
* 캐릭터의 [루트 모션](Engine/Animation\RootMotion) 에 대한 적합한 처리
* 복잡한 애니메이션 시퀀스를 네임드 슬롯에 할당하여 코드나 블루프린트에서 전환
* 코드나 블루프린트 스크립트를 기반으로 다양한 애님 시퀀스 사이의 정교한 전환

보시듯이 몽타주로 할 수 있는 일은 다양합니다. 그래서 몽타주가 굉장히 복잡한 시스템인 것처럼 보일 수가 있습니다만, 핵심만 간추려 보자면 몽타주는 애니메이션 콘트롤을 코드나 블루프린트에 노출시키는 것일 뿐입니다. 이 시스템에서 할 수 있는 거의 모든 작업을 이 한 가지 관점에서 추려볼 수 있습니다.

[REGION:tip]
캐릭터에 **애니메이션 몽타주** 를 적용한 예제는 [애니메이션 콘텐츠 예제](Resources\ContentExamples\Animation) 페이지의 1.5 섹션 아래에서도 확인할 수 있습니다.
[/REGION]


## 시스템 주의사항

애님 몽타주 관련해서 유념해야할 사항이 몇 가지 있습니다:

* 한 번에 하나의 몽타주만 재생 가능합니다. 두 번째 몽타주 재생을 시작하면 첫 번째의 재생은 멈춥니다.
* [INCLUDE:#MontageReplication]



## 몽타주 프로퍼티

애님 몽타주 애셋 프로퍼티에 대한 분석은 다음과 같습니다. 페르소나에서 몽타주를 확인할 때 사용할 수 있으며, 콘텐츠 브라우저에서 몽타주에 우클릭하여 나타나는 맥락 메뉴에서 _프로퍼티_ 를 선택해서도 접근할 수 있습니다.

![](MontageProperties.png)



|몽타주 프로퍼티||
|---|---|
|[REGION:tablesection]몽타주[/REGION]||
|**Blend In Time**|블렌드 인 시간 - 몽타주 재생 시작시 캐릭터가 현재 포즈에서 대상 포즈로 블렌드 인 해 들어가는 동안의 기간입니다. |
|**Blend Out Time**|블렌드 아웃 시간 - 몽타주 재생 종료시 캐릭터가 원래 포즈로 블렌드 아웃해 돌아가는 동안의 기간입니다. |
|[REGION:tablesection]루트 모션[/REGION]||
|**Enable Root Motion Translation**|루트 모션 트랜슬레이션 활성화 - 루트 모션 트랜슬레이션 처리가 가능해집니다. 루트에 적용된 트랜슬레이션을 취소시켜 캐릭터의 콜리전 캡슐에 다시 적용할 수 있도록 합니다. 자세한 것은 [](Engine/Animation\RootMotion) 문서를 참고해 주시기 바랍니다. |
|**Enable Root Motion Rotation**|루트 모션 로테이션 활성화 - 루트 모션 로테이션 처리가 가능해집니다. 루트에 적용된 로테이션을 취소시켜 캐릭터의 콜리전 캡슐에 다시 적용할 수 있도록 합니다. 자세한 것은 [](Engine/Animation\RootMotion) 문서를 참고해 주시기 바랍니다. |
|[REGION:tablesection]애디티브 세팅[/REGION]||
|**Preview Base Pose**|베이스 포즈 미리보기 - 애디티브 블렌드 스페이스에 사용되는 베이스 프리뷰 포즈를 설정합니다. |
|[REGION:tablesection]애니메이션[/REGION]||
|**Rate Scale**|속도 스케일 - 몽타주의 재생 속도에 대한 배수입니다. 기본값은 1.0 입니다. |
|**Skeleton**|스켈레톤 - 이 몽타주에 관련된 스켈레톤이 들어있습니다. 에디터에서는 바꿀 수 없습니다. |

## 몽타주 UI

페르소나에서 몽타주를 확인할 때, 각 부분이 무엇이고 어떤 역할을 하는지 알아두면 좋습니다:

[REGION:raw]
![](MontageUI.png)
[/REGION]

1. [몽타주 영역](#몽타주영역)
1. [섹션 영역](#섹션영역)
1. [노티파이 영역](#노티파이영역)
1. [커브 영역](#커브영역)

## 몽타주 영역

몽타주 영역은 다음과 같이 나뉩니다:

[REGION:raw]
![](MontageArea.png)
[/REGION]

1. **Section Track** 섹션 트랙 - 이 몽타주에 대해 정의된 [섹션](#섹션) 이 있으면 표시해 줍니다. 섹션은 마우스 왼쪽 버튼으로 타임라인 상의 다른 위치에 이동시킬 수 있습니다.
1. **Slot Track** 슬롯 트랙 - 현재 슬롯과, 그 이름을 오른쪽에 표시합니다. 이 슬롯은 원하는 만큼의 애니메이션으로 채울 수 있으며, 순서대로 재생됩니다. 참고로 다수의 애니메이션이 있을 경우 슬롯 트랙에 표시되는 위치가 달라집니다. 먼저 위에 있다가 다음에는 아래로, 다시 위로 식입니다. 각기 다른 애니메이션의 구분을 돕기 위해서입니다.
1. **Branch Point Track** 브랜치 포인트 트랙 - 이 몽타주용으로 정의된 브랜치 포인트(분기점)를 표시합니다. 브랜치 포인트를 왼쪽 버튼으로 끌어 타임라인 상의 다른 위치에 이동시킬 수 있습니다.

[REGION:note]
하나의 몽타주에 원하는 수 만큼의 슬롯 트랙을 넣을 수 있으며, 각 트랙마다 자체적인 이름과 고유의 애니메이션이 들어 있습니다. 그러나 섹션 트랙과 브랜치 포인트 트랙은 각 몽타주에 대해 하나씩만 있을 수 있습니다.
[/REGION]


### 섹션

몽타주 섹션은 하나의 슬롯을 다수의 애니메이션 부분으로 나눌 수 있는 수단이 됩니다. 각 섹션은 슬롯의 타임라인 안에 이름과 위치가 있습니다. 그 이름을 사용해서 특정 섹션으로 바로 점프하거나, 현재 부분의 재생 완료시 다음에 재생할 큐에 등록시킬 수도 있습니다. 블루프린트에서 현재 섹션 질의, 어느 한 섹션으로 점프, 다음에 재생할 섹션 설정 등이 가능합니다.

섹션은 음악 재생목록의 노래, 슬롯은 앨범으로 생각해 보면 쉽습니다. 최근의 미디어 플레이어가 그렇듯이, 현재 곡의 재생이 완료되면 다음에 재생할 곡을 선택하거나, 바로 다음 곡으로 점프할 수도 있습니다.

섹션의 생성은 섹션 트랙에 우클릭한 다음 **New Montage Section** (새 몽타주 섹션)을 선택하면 됩니다.


### 슬롯

[EXCERPT:Slots]
몽타주 안의 **Slot** (슬롯)은 하나의 트랙으로, 여기에는 애니메이션을 몇 개든 담을 수 있습니다. 이 슬롯에는 이름을 지을 수 있으며, 나중에 그 슬롯 이름을 호출하여 지정된 애니메이션으로 블렌딩해 들어갈 수 있습니다. 캐릭터의 무기 재장전 애니메이션이 좋은 예입니다. 플레이어가 서 있을 때, 웅크리고 있을 때, 누워 있을 때 각기 다른 버전의 재장전 애니메이션을 준비할 수 있겠죠. 세 가지 애니메이션 모두 같은 타이밍을 사용한다는 가정 하에, 그 각각을 몽타주 내 별도의 슬롯에 넣고서, 그 슬롯 이름을 _Standing_, _Crouching_, _Prone_ 으로 짓습니다. 애니메이션 블루프린트의 애님 그래프에서 _Slot_ 노드를 사용하여 캐릭터의 현재 상태에 따라 재생하고자 하는 슬롯을 결정할 수 있습니다. 서있을 때는 _Standing_ 슬롯의 애니메이션 결과를 사용할 수 있습니다. 누워 있을 때는 _Prone_ 슬롯의 결과를 보면 됩니다.

한가지 유념해야할 중요한 점은, 몽타주 콘트롤의 다수가 애니메이션 블루프린트의 _이벤트 그래프_ 안에서 벌어짐에도 슬롯은 실제 _애님 그래프_ 안에서 처리된다는 점입니다. 이는 Slot 노드를 사용하는 식으로 이루어지며, 거기서는 단순히 슬롯 이름을 받을 뿐입니다. 애님 그래프의 실행상 전략적인 지점에 이 노드를 배치하는 것으로, 다수의 몽타주에 같은 슬롯 이름을 활용하도록 할 수 있습니다.
[/EXCERPT:Slots]


### 브랜치 포인트

브랜치 포인트(분기점)는 애니메이션 재생과 동시에 일어나는 이벤트를 만들 수 있습니다. 이러한 브랜치 포인트 이벤트는 코드나 블루프린트에서 다른 일이 발생하도록 만드는 데 사용할 수 있으나, 브랜치 포인트가 특히나 좋을 때는, 몽타주 안에서 다른 애니메이션 섹션으로 변경할 때 입니다.

[애니메이션 노티파이](Engine/Animation\Sequences\Notifies) 에 이미 익숙하신 경우, 이 두 시스템이 매우 비슷하다는 느낌을 받으실 수 있습니다. 둘 다 스크립트에서 활용할 수 있는 이벤트를 노출시키기 때문입니다. 핵심적인 차이점이라면, 노티파이는 _비동기식_, 브랜치 포인트는 _동기식_ 이라는 점입니다. 최종 사용자 입장에서 보자면, 브랜치 포인트로는 애니메이션 타임라인 상에서 어떠한 일이 발생하는 지점을 훨씬 더 정밀하게 지정할 수 있다는 점입니다.

높은 정밀도는 타임라인 내 매우 정밀한 순간에 특정 애니메이션 지점으로 점프할 필요가 있을 때 중요합니다. _노티파이_ 를 사용해서도 같은 작업을 할 수는 있지만, 노티파이의 비동기적 속성때문에 노티파이 이벤트가 잘못된 애니메이션 프레임에 발동되어 모션에 버벅임이나 끊김이 발생할 수 있다는 뜻입니다.

[REGION:warning]
브랜치 포인트의 동기적 속성과 그에 따른 정밀도로 인해, 노티파이 보다는 퍼포먼스 비용이 비쌉니다. 그렇기에 애니메이션 타임라인 상의 정교한 순간에 _반드시_ 발동되야만 하는 이벤트, 이를테면 프레임 단위로 일치하는 다른 애니메이션에 직접 점프하는 경우에만 사용해야 할 것입니다. 한 프레임이나 그 몇 퍼센트 정도 어긋나는 것이 중요치 않다면 _노티파이_ 를 대신 사용하는 것이 좋습니다.
[/REGION]

## 섹션 영역

섹션 영역은 몽타주 영역에 정의한 섹션간의 관계를 설정할 수 있는 곳입니다. 예를 들어 애니메이션의 특정 섹션(이나 섹션 그룹)을 특정 시퀀스나 심지어 반복 재생시키고자 하는 경우입니다.

[REGION:raw]
![](SectionsArea.png)
[/REGION]


1. **Create Default and Clear Buttons** 디폴트 생성 / 비우기 버튼 - 디폴트는 모든 섹션간의 기본적인 관계를 생성, 서로간의 관계를 엮어 줍니다. 비우기는 모든 관계를 지워버립니다.
1. **Section Buttons** 섹션 버튼 - 이 영역에는 몽타주 영역에 정의한 각 섹션의 버튼이 보입니다. 기존 섹션을 선택한 다음 이 버튼 중 하나를 클릭하면, 해당 버튼에 대한 섹션을 선택된 트랙에 연결해 줍니다. 예를 들어 위 그림에서, _Swing2_ 에 _Swing1_ 을 연결해 줬습니다. 실제 순서는 _Swing1_, _Swing2_, 다음 _Swing1_ 이 다시 와서 루프가 됩니다. 자세한 것은 아래 [루핑](#루핑) 부분을 참고해 주시기 바랍니다.
1. **Section Association Tracks** 섹션 연결 트랙 - 애니메이션 섹션간의 관계를 시각화시켜 미리볼 수 있는 곳입니다. **Preview** (미리보기) 버튼을 클릭하면 각 개별 트랙의 결과를 확인할 수 있고, **Preview All Sections** (모든 섹션 미리보기) 버튼을 클릭하면 모든 섹션을 차례대로 재생시켜 볼 수 있습니다.


### 루핑

섹션은 무한 루프 설정이 가능하여, 반복시키고자 하는 동작이 있을 경우에 매우 좋습니다. Section Association (섹션 연결 트랙)에 동일한 섹션을 두 번 이상 연결시켜 주면, 해당 섹션이 루프로 실행되게 됩니다. 루프가 된 섹션은 파랗게 표시됩니다. 예를 들어 캐릭터가 샷건 총알을 한 번에 한 발씩 재장전하는 애니메이션을 생각해 봅시다. 캐릭터가 총알을 삽입하는 섹션만 잡아다가 루프를 겁니다. 그 후 노티파이를 사용해서, 애니메이션 재생이 한 번 끝날 때마다 탄환 카운트를 늘리도록 하는 노티파이 이벤트를 블루프린트에서 만듭니다. 카운트가 설정된 (최대 탄환) 수에 도달하면, 캐릭터는 리시버를 닫는 애니메이션으로 전환시킨 다음 빈둥 상태로 돌아갑니다.


## 노티파이 영역

![](NotifiesArea.png)

[INCLUDE:Engine/Animation/Sequences\Notifies#Intro]

자세한 정보는 [](Engine/Animation\Sequences\Notifies) 문서를 확인해 주시기 바랍니다.

## 커브 영역

![](CurvesArea.png)

[INCLUDE:Engine/Animation\Sequences\Curves#Intro]

자세한 정보는 [](Engine/Animation\Sequences\Curves) 문서를 확인해 주시기 바랍니다.


## 몽타주 실전 예제


이 예제에는 모든 방향으로 자유로이 뛰어다니면서 공격 애니메이션은 상체에서만 재생되는 캐릭터가 있습니다. 이 공격은 그 중간에 벌어질 수 있는 여러가지 애니메이션을 갖게 됩니다. 몽타주의 조합을 나타내는 데는 물론 이벤트 그래프에서 제어하는 방법이나 애님 그래프 안에서 블렌딩해 들어가는 방법을 보여주기에 완벽한 방법입니다.

그러나 미리 구성해 둬야 하는 것이 몇 가지 있습니다:

* 이미 스테이트 머신 정의 보행이 있습니다. Third Person Project 템플릿에서 사용된 것과 똑같은 것입니다.
* 아티스트가 제공해 준 애니메이션이 여럿 있어, 서로 엮어서 몽타주를 만들면 좋습니다.
* 입력 정보를 받아올 수 있는 [캐릭터 블루프린트 클래스](Engine\Blueprints\UserGuide\Types\ClassBlueprint\Creation) 를 생성했습니다.
 * 이 예제에서 **IsAttacking** 불리언은 **마우스 왼쪽 버튼** 이 눌리면 TRUE 로, 떼면 FALSE 로 설정됩니다.
  ![](CharacterBlueprint.png)

### 몽타주 생성

몽타주 생성은 쉽게 콘텐츠 브라우저에 우클릭한 다음 **애니메이션 > 애니메이션 몽타주** 를 선택하면 됩니다. 기존 애니메이션 시퀀스에 우클릭한 다음 맥락 메뉴에서 **몽타주 생성** 을 선택해도 됩니다. 그러면 선택된 애님 시퀀스가 디폴트 슬롯에 이미 설정된 상태로 새 몽타주가 자동 생성됩니다.

![](MakeMontage.png)

### 몽타주 셋업

첫 번째 할 일은 슬롯 이름을 지어주는 것이었습니다. 이 몽타주에서는 하나만 필요한데, 공격이 상체에만 영향을 끼치도록 하고프니 이름을 _Upper Body_ 로 해 주는 것이 완벽해 보였습니다. 그런 다음 이 슬롯에 필요할 애니메이션을 끌어 놓았습니다. 이 애니메이션이 하는 일은 다음과 같습니다:

* 우에서 좌로 해머 휘두르기
* 좌에서 우로 해머 휘두르기
* 우에서 좌 휘두르기가 끝에서 빈둥 상태로 복귀
* 좌에서 우 휘두르기가 끝나면 빈둥 상태로 복귀

[REGION:note]
두 가지 휘두르기 애니메이션 모두 다른 애니메이션의 시작 포즈에서 끝이 납니다. 즉 두 애니메이션을 루프로 재생하면 캐릭터가 해머를 앞뒤로 매끄럽게 휘두른다는 뜻입니다.
[/REGION]

순서가 엄청나게 중요하지는 않지만, 초반에 처음 두 애니메이션 이후 뒤로 돌아가는 것이 나중의 작업이 단순해 집니다.

![](MontageSetup.png)


### 섹션 생성

다음 단계는 몽타주 안에 애니메이션 섹션을 만들어, 필요할 때 블루프린트 코드에서 질의하여 호출할 수 있도록 하는 것입니다. 이 작업은 쉽게 몽타주 영역 상단의 섹션 트랙에 클릭중일 때 우클릭한 다음 **새 몽타주 섹션 추가** 를 선택하면 됩니다.

각 섹션마다 꽤 단순한 이름을 사용했습니다. 참고로 몽타주에 기본으로 딸려오는 디폴트 섹션을 (새로 만든 다음 디폴트에 우클릭한 후 **몽타주 섹션 삭제** 를 선택해서) 대체했습니다. 필요에 따라 섹션 트랙 위에서 섹션을 끌어 마우스를 놓으면 두 애니메이션 세그먼트 사이의 경계에 약간 달라붙는 것을 볼 수 있습니다. 이 기능을 활용해 보세요.

![](AddNewSections.png)



### 섹션 관계 정의


섹션이 생성되었으니, 섹션 영역을 사용해서 그 특수 관계를 정의할 수 있습니다. 예를 들어 _Swing1_ 과 _Swing2_ 섹션 사이의 관계를 정의하여 앞뒤로 루프 재생되도록 할 수 있습니다. 이 기능이 매우 유용합니다. 먼저 **비우기** 버튼을 클릭하여 기본 관계를 삭제합니다. 그런 다음 트랙을 선택해서 _Swing1_ 이 그 안에 들어가게 하고서, 섹션 영역 상단 근처의 **Swing2** 라벨이 붙은 녹색 버튼을 클릭하기만 하면 되는 일입니다. 그러면 _Swing2_ 트랙이 제거되고 _Swing1_ 트랙에 _Swing2_ 가 추가됩니다.

![](Swing2Track.png)

위 과정을 반복하여, 새로운 _Swing2_ 세그먼트를 클릭한 다음 _Swing1_ 버튼을 누르면, 시스템이 루프 생성을 감지하고 트랙이 파랗게 변합니다. 즉 Swing1 과 Swing2 세그먼트는 루핑 섹션으로 간주된다는 뜻입니다. 계속해서 앞뒤로 재생되어 무한 반복됩니다.

![](LoopingTracks.png)

### 브랜치 포인트 셋업

이제 약간의 브랜치 포인트를 설정하여 공격 애니메이션의 루프를 계속할지, 가능한 두가지 엔딩 중 하나로 점프할지를 테스트해 보겠습니다. 해줘야할 작업은 브랜치 포인트 트랙에 우클릭한 다음 **새 브랜치 포인트** 를 선택하는 것입니다. 이름은 _Swing_1_End_ 와 _Swing_2_End_ 로 지어 줬습니다. 마우스 휠로 매우 크게 줌 인 하여, 그 각각의 브랜치 포인트가 자신의 해당 섹션 가장 마지막 순간에 발동되도록 해 줬습니다. 즉 둘 사이 경계선에서 아주 약간 왼쪽으로 위치시켜 줬다는 뜻입니다.

![](BranchPointsSetUp.png)



[REGION:note]
브랜치 포인트 대신 노티파이를 사용하여 비슷한 구성을 할 수도 있지만, 타임라인상의 약간 이른 지점에 발동되도록 해 줘야 하며, 애니메이션 블루프린트 이벤트 그래프에서는 **Montage Jump to Section** 노드로 직접 전환해 주기 보다는 **Montage Set Next Section** 노드를 사용해서 적합한 엔딩 애니메이션 큐에 등록시켜줘야 합니다. 이러한 노티파이 작업은 퍼포먼스 비용이 약간 싸게 먹히는데, 노티파이는 비동기식이기 때문입니다. 저희 예제가 학습용이긴 하나, 다른 방법도 있음을 언급해 두고 싶었습니다.
[/REGION]


### 애님 그래프 셋업

이 시점에서 우리 몽타주 셋업은 끝났습니다. 이제 우리 몽타주의 결과를 읽어들일 수 있도록 애님 그래프 설정을 해 줄 필요가 있습니다. 이는 매우 단순한 프로세스이나, 진행 방식에 대해 진중히 고민하지 않아도 되게 해 줍니다. 우리 애님 그래프는 이와 같이 스테이트 머신의 결과만 보이는 곳을 살펴보는 것으로 시작합니다:

![](StateMachineResult.png)


몽타주의 재생이 Spine_01 본 (허리) 위로만 재생되도록 하고자 하니, **Layered Blend per Bone** 노드를 사용하겠습니다. 거기에 Blend Pose 를 추가하여 웨이트를 1 로 설정합니다. 노드의 프로퍼티에 이 Blend Pose 를 Spine_01 과 연결시켜 주기도 합니다. 그런 다음 **Slot** 노드를 들여온 다음 우리 슬롯 이름인 _UpperBody_ 로 설정합니다. 그런데 이제 문제가 생겼습니다:

![](SlotAndBlend.png)

Slot 노드는 몽타주 재생 완료시 예비로 쓸 Source 연결이 필요합니다. 그게 없을 경우 몽타주가 끝나면 캐릭터는 허리 위에서 부터 T 포즈로 돌아가 버립니다. 그러나 스테이트 머신을 **Layered Blend per Bone** 의 Base Pose 와 **Slot** 노드의 Source 에도 연결해 줄 수는 없는 노릇입니다. 해법은? **Cache** 노드를 사용합니다! 스테이트 머신의 결과를 Cache 노드에 저장한 다음, **Cached Pose** 노드를 사용하여 두 개의 인풋 모두에 연결해 주면 됩니다. 이는 스테이트 머신의 결과를 변수에 저장하여 여러 곳에 사용하는 것과 어느정도 비슷합니다. 이 예제의 경우 Cache 이름은 _LocoCache_ 로 합니다.

![](CachedLocomotion.png)

우리 애님 그래프가 완성되었습니다. UpperBody Slot 노드가 _아무_ 애님 몽타주에서 데이터를 받자 마자 (_UpperBody_ 라는 이름의 슬롯이 있기만 하면 어느 몽타주를 사용해도 됩니다), 블렌드 인 해 들어갑니다. 더이상 데이터를 받지 않게 되면, 스테이트 머신의 결과물로 돌아가게 됩니다.


### 이벤트 그래프 셋업

이벤트 그래프 셋업은 매우 기본적입니다. **Event Blueprint Update Animation** 노드를 사용하여 **Get Player Character** 노드의 출력 핀을 끌어놓으면, **캐릭터 블루프린트** (이 예제에서는 _MyCharacter_) 로 **Cast To** (형변환)시켜 그 블루프린트에서 변수와 함수 접근이 가능합니다. (블루프린트끼리의 통신 관련 상세 정보는 [](Engine\Blueprints\UserGuide\BlueprintComms) 문서를 참고하세요.)

_클릭하면 원래 크기로 봅니다._
[REGION:lightbox]
[![](PlayMontageEventGraph.png)(w:1020)](PlayMontageEventGraph.png)
[/REGION]

먼저 해 줄 것은 캐릭터 블루프린트의 **IsAttacking** 변수가 TRUE 인지 검사한 다음 그렇다면, 몽타주가 이미 재생중인지 검사합니다. 몽타주가 재생중이라면, 다시 재생하지 않습니다. 하지만 재생중이지 않다면, 몽타주를 재생합니다. 이런 식으로 재생 중간에 애니메이션이 재시작되어 안좋아 보이지 않도록 할 수 있습니다.

**Cast To** 노드에서 뻗어나오는 **IsAttacking** 노드에 이어서, 마우스 버튼이 계속 눌려 있는지 확인하고, 눌려있지 _않다면_ 루프의 어느 반쪽이 재생중이었는가에 따라 적합한 엔딩 애니메이션으로 점프합니다. 브랜치 포인트 이벤트의 생성은 우클릭한 다음 **Add Montage Branching Point Event** 아래 적합한 이벤트를 선택하면 됩니다.

![](EndLoopEventGraph.png)

다 됐습니다. 컴파일하면, 마우스 버튼이 눌려있는 한 계속해서 휘두르다가, 마우스 버튼을 놓는 시점에 따라 똑똑하게 애니메이션을 끝내는 캐릭터를 볼 수 있습니다!

[REGION:lightbox]
[![](HammerMontage.png)](HammerMontage.gif)
[/REGION]

**클릭하면 애니메이션이 재생됩니다.**

<!--------------------

[EXCERPT:MontageReplication]이 시점에서 루트 모션은 서버에 리플리케이트됩니다만, 애님 몽타주는 그렇지 않습니다. 즉 루트 모션을 활용하는 사용자들은 전체 네트웍에 걸쳐 애님 몽타주의 상태(위치, 재생 속도 따위)가 리플리케이트 되었는지 확인을 해 줘야 한다는 뜻입니다.[/EXCERPT:MontageReplication]


-------------------->