INTSourceChangelist:2590930
Availability:Public
Title:AnimMontage
Crumbs: %ROOT%, Engine, Engine/Animation
Description:AnimMontage の詳細と UE4 のアニメーション システムにおけるその活用法
Related:Engine/Content/FBX/Animations
Related:Engine/Content/Types/SkeletalMeshes
Related:Engine/Animation/PhysicallyDrivenAnimation
Related:Engine/Animation/StateMachines
Related:Gameplay/AI
Related:Engine/Content/Tools/MayaRiggingTool
Related:Gameplay/Input


[TOC(start:2 end:3)]

## 概要

[EXCERPT:Intro]
**AnimMontages** (または省略して単にモンタージュ) は、幅広い種類のアニメーション エフェクトを有効にする多目的ツールです。主にコードやブループリント内部のアニメーション制御の公開に関わっています。インテリジェントなアニメーションのループ、ロジックベースのアニメーションの切り替え、ルートモーション処理などを含めて、多岐に渡るアニメーション エフェクトも作成します。
[/EXCERPT:Intro]

_AnimMontages_ は、コンテンツブラウザで作成し、このブラウザに存在するアニメーション アセットです。これらのアセットは実行中に AnimGraph へ直接プラグインし、そのステートを編集することができます。例えば、別のセクションへジャンプしたり、別のセクションに再度リンク付けができます。主にコードで操作するアニメーションまたはメレー攻撃などの 1 回限りのアニメーション用で、トリガーの制御、好きな時に停止、 (ループか非ループ) のステートの変更が可能になります (下の図を参照してください)。 

![](Montage_Screen2.png)

上の画像は [Start、Loop、End] の 3 セクションによるメレー攻撃です。プレイヤーが **クリック** すると、モンタージュをプレイするよう要請する時にデフォルトで開始セクションをトリガーします。中間セクションはループに設定します。開始が実施されると、ループへ移り、そこでずっとループします。プレイヤーがマウスボタンを離すと停止しますが、アニメーションがループの真っ最中にポップ表示されるのですぐには停止してくないです。終了にループを再度リンク付けすると、ループは終了へ移動してそこでアニメーションが終わります。 

他にも以下のような使用方法があります。
* AnimBlueprint の **EventGraph** からアニメーションを再生する能力
* 単一アニメーションを意図した複雑なアニメーション シーケンスの連鎖
* アニメーションの特定部分のみ、またはコードやブループリント スクリプトに基づいたアニメーションのループ
* コードやブループリント スクリプトに基づいた複数アニメーションのイベントベース切り替えによる処理
* キャラクターの [ルートモーション](Engine/Animation/RootMotion) の適切な処理
* コードやブループリントで切り替え可能な指定スロットへ複雑なアニメーションシーケンスを割り当てる能力
* コードやブループリント スクリプトに基づいたさまざまなアニムシーケンス間の正確な切り替え

このように、モンタージュを使用してさまざまなことができます。システムとして運用するモンタージュに圧倒されてしまうかもしれません。しかし要約すると、モンタージュの重要なポイントは、コードやブループリントをアニメーション コントロールへ公開することです。システムで可能なその他の機能のほとんどは、この点から引き継がれます。

[REGION:tip]
**Aim Offset** をキャラクターに適用した例として、セクション 1.4 の [アニメーション コンテンツの例](Resources\ContentExamples\Animation) を参照することもできます。
[/REGION]


## システムの注意事項

_AnimMontages_ に関して留意して頂きたい詳細がいくつかあります。

* 一度に再生できるモンタージュは 1 つのみです。2 番目のモンタージュを再生すると、最初のモンタージュは停止します。
* [INCLUDE:#MontageReplication]



## モンタージュのプロパティ

以下は _AnimMontage_ アセットプロパティの内訳です。モンタージュを見ている時に、これらのプロパティは **ペルソナ** で利用可能です。 **コンテンツ ブラウザ** 内でモンタージュを右クリックして、コンテキスト メニューから _[Properties]_ を選択してアクセスすることも出来ます。

![](MontageProperties.png)



|モンタージュのプロパティ||
|---|---|
|[REGION:tablesection]Montage[/REGION]||
|**Blend In Time**|モンタージュの再生開始時間です。キャラクターはこの間に現在のポーズからブレンドインします。|
|**Blend Out Time**|モンタージュ再生の終わりの時間です。キャラクターはこの間にオリジナルのポーズに再びブレンドします。|
|[REGION:tablesection]Root Motion[/REGION]||
|**Enable Root Motion Translation**|ルートモーション変換の処理を有効にします。キャラクターのコリジョンカプセルへ再適用できるように、ルートに適用された変換を無効にします。詳細は、 [](Engine/Animation/RootMotion) を参照してください。|
|**Enable Root Motion Rotation**|ルート モーション回転の処理を有効にします。キャラクターのコリジョン カプセルへ再適用できるように、ルートに適用された回転を無効にします。詳細は、 [](Engine/Animation/RootMotion) を参照してください。|
|[REGION:tablesection]追加設定[/REGION]||
|**Preview Base Pose**|加算ブレンドスペースで使用するプレビューポーズのベースを設定します。|
|[REGION:tablesection]Animation[/REGION]||
|**Rate Scale**| モンタージュの再生の速度を示す乗数値です。デフォルトは値 1.0 です。|
**Skeleton**|モンタージュと関連したスケルトンを格納します。エディタで変更することができません。|

##モンタージュ UI

ペルソナでモンタージュを見る時に、各領域とその役割を知っておくと便利です。

[REGION:raw]
![](MontageUI.png)
[/REGION]

1. [Montage 領域](#Montage領域)
1. [Sections 領域](#Sections領域)
1. [Notifies 領域](#Notifies領域)
1. [Curves 領域](#Curves領域)

##Montage 領域

モンタージュの領域は以下のように分類できます。

[REGION:raw]
![](MontageArea.png)
[/REGION]

1. **セクション トラック** - このモンタージュのために定義された [セクション](#セクション) を表示します。セクションはタイムラインと一緒に、左マウスボタンで別の位置へドラッグできます。
1. **スロット トラック** - 右側にスロット名を表示した現在のスロットを表示します。スロットは必要に応じて好きなアニメーション数で埋めることができます。アニメーションは順番に再生されます。複数のアニメーションが、上、下、そして再度上の [スロット トラック] で交互に行われていることに留意してください。異なるアニメーション間でそれぞれのアニメーションを識別する際に役立ちます。
1. **分岐点トラック** - モンタージュのために定義された Branch Point (分岐点) を表示します。分岐点はタイムラインと一緒に、左マウスボタンで別の位置へドラッグできます。

[REGION:note]
単一モンタージュ内にスロット トラックを好きな数だけ設定できます。各スロットトラックには独自の名前があり、独自の固有アニメーションがあります。ただし、各モンタージュには、 [セクション トラック] と [分岐点] が 1 つずつだけ存在する場合もあります。
[/REGION]


### セクション

モンタージュ セクションは、スロットを複数部のアニメーションへ分割します。各セクションは、スロットのタイムラインに名前と位置が設定されています。現在のセグメントの終了時に、名前を使用して特定のセクションへ直接ジャンプしたり、次に再生させるためにキューに入れることができます。ブループリントでは、現在のセクションのクエリ、セクションへジャンプ、再生する次のセクションを設定することができます。

セクションをミュージックプレイリストの歌、スロットをアルバムと考えるとイメージがわくかもしれません。主流メディアプレイヤー同様に、再生中の曲の終了時に次に再生する曲を選択したり、今すぐ聞きたい曲にジャンプすることができます。

セクションは、セクション トラックを **右クリック** して、 **[New Montage Section]** を選択して作成します。 


### スロット

[EXCERPT:Slots]
モンタージュ内では、 **スロット** は好きな数だけのアニメーションを保持することができる単一トラックです。このスロットを指定し、その後スロット名を呼び出して特定のアニメーションへブレンドすることができます。武器をリロードしたアニメーションキャラクターが良い例です。キャラクターが直立している時、かがんでいる時、うつ伏せ状態の時にそれぞれのリロードバージョンが必要かもしれません。3 つ全てのアニメーションを同じタイミングで使用するのであれば、各アニメーションをモンタージュの単独のスロット内に配置することができます。スロットには、 _Standing_ 、 _Crouching_ 、 _Prone_ と名前を付けます。_Animation ブループリント_ の **AnimGraph** で、進行中のキャラクターのステートに基づいて次に再生するアニメーションを決定する際に、 _Slot_ ノードを使用することができます。キャラクターが立っている時、アニメーションの結果を _Standing_ スロットで使用します。キャラクターがうつ伏せになっている時は、 _Prone_ スロットの結果を確認できます。

ほとんどのモンタージュ制御は _Animation ブループリント_ の **イベントグラフ** で行われますが、スロットは実のところ **Anim Graph** で処理されていることを覚えておくのは大変重要です。これは、単にスロットの名前を受け取る Slot ノードを経由して実行します。AnimGraph の実行に合わせてこのノードを戦略ポイント位置づけることにより、同じスロット名を活用する複数のモンタージュを保持することができます。
[/EXCERPT:Slots]


### 分岐点

分岐点はアニメーション再生と一致するイベントを作成します。これらの Branch Point Event はコードもしくはブループリントで使用して他の事が生じるようにできますが、 分岐点はモンタージュ内の別のアニメーション セクションへの切り替えに便利です。 

既に [アニメーション通知](Engine/Animation/Sequences\Notifies) に精通しているユーザーは、スクリプトで活用するイベントを公開するという点で、両システムには顕著な類似性があることにお気づきかもしれません。アニメーション通知は _非同期_ 、分岐点は _同期_ である点が大きな違いです。エンドユーザーにとって分岐点は、アニメーション タイムラインと一緒に実行した時により高度な正確性を持つことを意味します。

正確なタイミングに合わせて特定のアニメーションへジャンプしなくてはいけない時、高精度な結果が重要です。同じジョブの実行に通知を使用することも _できます_ が、Notify Event が間違ったアニメーション フレームで発行される場合もある通知の非同期的な性質が、モーションの処理落ちやジャンプの原因となることがあります。

[REGION:warning]
Branch Point がもつ同期性質、そしてその結果もたらされる精度のため、分岐点は通知よりもパフォーマンス コストが大きいです。フレーム対フレームを一致させる別のアニメーションへ直接ジャンプさせるなど、イベントをアニメーション タイムラインと一緒に正確なタイミングで発行させなければ _いけない_ 時のみ分岐点を使用してください。フレームとずれてしまう可能性がある場合は、代わりに通知を使用してください。
[/REGION]

## Sections 領域

Section 領域は、モンタージュ領域で定義したセクション間の関係を確立する領域です。例えば、アニメーションの特定セクションやセクションのグループを、ある特定のシーケンスやループなどで再生します。 

[REGION:raw]
![](SectionsArea.png)
[/REGION]


1. **[Create Default] ボタンと [Clear] ボタン** - **[Create Default]** は、セクションを交互に並べて、全セクション間のデフォルトの関連性を作成します。 **[Clear]** は関連性を全てクリアします。
1. **[Section] ボタン** - モンタージュ領域で定義した各セクションに対応するボタンが表示されます。既存のセクションを選択してボタンの 1 つをクリックすると、ボタンと対応するセクションと選択したトラックを関連付けます。例えば上記の画像は、 _Swing2_ を _Swing1_ と関連付けました。実際の順番は、_Swing1_、 _Swing2_、 そして再びループを発生させる _Swing1_ となります。詳細は、以下の [ループ](#ループ) セクションを参照してください。 
1. **Section Association Tracks** - アニメーション セクション間を可視化およびプレビューする領域です。**[Preview]** ボタンをクリックすると、それぞれのトラックの結果を見ることができます。または、 **[Preview All Sections]** ボタンをクリックすると、次々に再生する全セクションをみることができます。


### ループ

セクションには無制限にループを設定することができます。繰り返しが必要なアクションなどには非常に実用的です。Section Association Track で同じセクションを 1 回以上関連付けることにより、この関連付けをループで実行することができます。この時セクションは青色に変わります。例えば、一度に 1 つの砲弾をショットガンにリロードするキャラクターのアニメーションを作成すると仮定します。キャラクターが砲弾を挿入するセクションのみを取り込んで、これをループさせます。それから Notifies を利用して、アニメーションが再生されるごとに弾薬カウントをインクリメントするように、ブループリントで通知イベントを作成します。カウントが設定数に達した (銃弾の許容量) ら、キャラクターがレシーバーをクローズするアニメーションに切り替えて、アイドルステートに戻ります。


## Notifies 領域

![](NotifiesArea.png)

[INCLUDE:Engine/Animation/Sequences\Notifies#Intro]

詳細は、 [](Engine/Animation/Sequences\Notifies) を参照してください。

## Curves 領域

![](CurvesArea.png)

[INCLUDE:Engine/Animation/Sequences\Curves#Intro]

詳細は、 [](Engine/Animation/Sequences\Curves) を参照してください。


##モンタージュの実例


この例は、上体のみで再生する攻撃アニメーションと一緒に、あらゆる方向へ自由に走り回ることができるキャラクターを作成します。この攻撃には、ゲーム中に発生する複数のアニメーションが設定されています。モンタージュの組み立てを表現する上に、イベントグラフでこれをコントロールする方法や AnimGraph 内へブレンドする方法を表現する完璧な方法です。

しかし、いくつかの事前設定が必要となります。

* 移動を定義するステートマシーンを既に設定済みです。これは、サードパーソン プロジェクト テンプレートで使用したマシーンと同じです。
* アーティストが作成したいくつかのアニメーションで、モンタージュを制作するためにこれらをつないでみましょう。
* 入力情報を取得する [Character Class ブループリント](Engine\Blueprints\UserGuide\Types\ClassBlueprint\Creation) が作成されています。 
 * この例の場合、 **IsAttacking** Boolean は **マウスボタン** を押すと TRUE に、マウスボタンを解放すると FALSE に設定されます。 
  ![](CharacterBlueprint.png)

### モンタージュの作成

モンタージュの作成は、 **コンテンツ ブラウザ** を右クリックして、 **[Animation] > [Animation Montage]** の順に選択するだけであり、とても簡単です。既存のアニメーションシーケンスを **右クリック** して、コンテクストメニューから **[Create Montage]** を選択して作成することも出来ます。デフォルトスロットに既に作成されている AnimSequence を選択すると、新規のモンタージュが自動的に作成されます。

![](MakeMontage.png)

###モンタージュの設定

最初にスロットに名前を付けます。上半身のみに攻撃を与えるため、このモンタージュに対しては名前が 1 つだけ必要になります。ここでは「_Upper Body_」と名前を付けるのが自然です。その後必要なアニメーションをこのスロットへドラッグ / ドロップします。アニメーションは、以下の動作を行います。

* 右から左へハンマーを振ります
* 左から右へハンマーを振ります
* 右から左へハンマーを振り終わった後にアイドルステートへ戻ります
* 左から右へハンマーを振り終わった後にアイドルステートへ戻ります

[REGION:note]
ハンマーを振りかざす 2 つのアニメーションは、別のアニメーションが開始すると同一ポーズで終了します。つまり、 2 つのアニメーションをループで交互に再生すると、キャラクターはシームレスにハンマーをあちこちへ振りかざします。
[/REGION]

順序は重要ではないため、まず最初に 2 つのアニメーションを用意して、これらを交互に再生すると後の作業を簡略化することができます。

![](MontageSetup.png)


### セクションの作成

次に、必要時にブループリントコードでクエリや呼出しができるように、モンタージュのアニメーションを分割していきます。Montage 領域上部のセクショントラックをクリックして、 **[Add New Montage Section]** を右クリックして選択するだけでとても簡単です。 

この例は、各セクションに比較的簡単な名前を使用しました。モンタージュに付随していた デフォルト セクションを置き換えたことに留意してください (新規セクションを作成して、 デフォルト セクションを右クリック、 **[Delete Montage Section]** を選択して削除)。必要に応じてこれらのセクションをセクショントラックと一緒にドラッグすることも出来ます。マウスを解放すると、 2 つのアニメーションセグメント間の境界線でセクションが多少スナップするのが分かります。この手法を作業に役立ててください。

![](AddNewSections.png)



### セクション関係の定義


セクションが作成されたので、 [セクション領域] を使用してこれらの間に特別な関係性を定義していきます。例えば、 _Swing1_ と _Swing2_ セクションの関係を、ループで交互に連続再生するように定義します。これはとても実用的な手法です。まず最初に、デフォルトの関係を消去するために **[Clear]** ボタンをクリックします。その後は、トラックに _Swing1_ を選択して、Section 領域上部にある緑でラベル表示されている _Swing2_ をクリックします。 _Swing2_ トラックが削除されて、_Swing1_ トラックに _Swing2_ トラックが追加されます。

![](Swing2Track.png)

このプロセスを繰り返した場合、新規の _Swing2_ セグメントをクリックした後に _Swing1_ ボタンをクリックすると、システムはユーザーがループを作成していることを理解して、トラックが青色表示に変わります。つまり、 Swing1 と Swing2 セグメントはループセクションとみなされます。これらのセグメントは連続再生されて、無期限に反復されます。

![](LoopingTracks.png)

###分岐点の設定

次に、ループを継続、または攻撃アニメーションに想定される 2 つの結果のうちの 1 つへジャンプするかをテストするために、分岐点をいくつか作成します。[分岐点トラック] で右クリックして **[New Branch Point]** を選択するのみです。ここでの分岐点は _Swng_1_End_ と _Swing_2_End_ と名付けました。各分岐点が対応するセクションのぎりぎり最後の瞬間に発行されることを確認するために、マウスホイールで密接にズームインします。つまり、 2 つのセクション間のわずか左寄りの境界線に配置します。

![](BranchPointsSetUp.png)



[REGION:note]
分岐点の代わりに通知を使用する似たようなシステムも設定できますが、その場合タイムラインに沿って多少早めに発行しなくてはいけません。また、アニメーションブループリントイベントグラフは、例で使用している **Montage Jump to Section** ノードによる直接的な切り替えではなく、 **Montage Set Next Section** ノードを使用して適切な最終アニメーションをキューに入れます。Notifies は非同期なので、Notifies で設定するとパフォーマンスコストが若干下がります。専門的な例を取り上げましたが、他の手法があることもお伝えするために紹介しています。
[/REGION]


### AnimGraph の設定

この時点でモンタージュは全て設定されました。次に AnimGraph を設定して、モンタージュの結果をこれに読み込ませます。大変簡単なプロセスですが、継続方法に注意をはらわなくてはいけません。AnimGraph アニムグラフはこのような設定で開始します。画像は、ステートマシーンの結果のみを表示しています。

![](StateMachineResult.png)


モンタージュでは、「Spine_01」ボーン (ウエスト) よりも上半身のみを再生させるため、 **Layered Blend per Bone** ノードを使用します。[Blend Pose] を追加して、ウエイトを「1」に設定します。また、ノードのプロパティで Blend Pose と Spine_01 を関連付けます。その後 **Slot** ノードを導入して、 _UpperBody_ へ設定します。ここで問題が発生します。

![](SlotAndBlend.png)

Slot ノードは、モンタージュ再生終了後に戻るための「Source」接続が必要です。この接続なしでは、モンタージュ終了後にキャラクターの腰から上は T ポーズに戻ってしまいます。ただし、ステートマシーンは、 **Layered Blend per Bone** ノードの「Base Pose」と **Slot** ノードの「Source」両方へ接続することはできません。解決法？**Cache** ノードを使用します!ステートマシーンの結果を Cache ノードに格納して、その後必要な両入力値と接続するために **Cached Pose** ノードを作成します。これはさまざまな場面で活用するために、ステートマシーンの結果を変数へ格納する方法と多少似ています。この例では、 Cache ノードを _LocoCache_ と名付けます。

![](CachedLocomotion.png)

AnimGraph はこれで終了です。UpperBody Slot ノードが _任意の_ _AnimMontage_ からデータを受け取るとすぐに (_UpperBody_ と名付けれたスロット名であれば全てのモンタージュの使用可能) 、ブレンドされます。データを受け取らない時点で、ノードはステートマシーンの結果へ戻ります。


### イベントグラフの設定

イベントグラフの設定は極めて基本的なものです。**Event Blueprint Update Animation** ノードを使い **Get Player Character** ノードの出力ピンからドラッグすれば、 **Character ブループリント** (_MyCharacter_ in this example) へ **キャストして** ブループリントの変数と機能を利用することができます (ブループリント間通信の詳細は [ブループリント通信](Engine\Blueprints\UserGuide\BlueprintComms) を参照してください)。 

_クリックしてフルサイズで表示_
[REGION:lightbox]
[![](PlayMontageEventGraph.png)(w:1020)](PlayMontageEventGraph.png)
[/REGION]

Character ブループリントから受け取った **IsAttacking** 変数が TRUE かどうかをまず確認し、 TRUE であればモンタージュが既に再生しているか確認します。モンタージュが再生中であれば、再び再生する必要はありませんが、もし再生していない場合はモンタージュを再生します。これにより、再生途中のアニメーションの再スタートを防ぎます。 

**Cast To** ノードから伸びている **IsAttacking** ノードドラッグして、マウスボタンがまだ押されたままか否かを確認します。 _そうでない場合_ 、再生中のループの半分に基づいて適切な最終アニメーションへジャンプします。Branch Point イベントの作成は、 **[Add Montage Branching Point Event]** の下の適切なイベントを **右クリック** および選択します。

![](EndLoopEventGraph.png)

これで終わりです。コンパイルすると、キャラクターはボタンが押されている限りハンマーを振りかざし、マウスボタンが解放されると合理的な最終アニメーションを実行します！

[REGION:lightbox]
[![](HammerMontage.png)](HammerMontage.gif)
[/REGION]

**クリックして再生**

<!--------------------


[EXCERPT:MontageReplication]現段階では、ルートモーションはサーバー全域でレプリケートされます。しかし _AnimMontage_ はそうではありません。つまりルートモーションを使用しているユーザーは、ネットワーク全域で _AnimMontage_ のステートがレプリケートされていることを確認しなくてはいけません。(位置、再生レートなど)。[/EXCERPT:MontageReplication]


-------------------->
