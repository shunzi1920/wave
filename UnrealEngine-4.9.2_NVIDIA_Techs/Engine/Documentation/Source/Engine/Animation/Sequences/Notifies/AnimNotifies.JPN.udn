INTSourceChangelist:2593658
Availability:Public
Title:アニメーション通知
Crumbs: %ROOT%, Engine, Engine/Animation, Engine/Animation/Sequences
Description:外部アクションを実行するためにアニメーション シーケンスにイベントの設定及び受信をする通知システム。

[VAR:Topic]
[OBJECT:Topic]
	[PARAM:image]
		![%Engine/Animation/Sequences/Notifies:title%](Engine/Animation/animation_topic.png)
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%/anim_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Engine/Animation/Sequences/Notifies:title%
	[/PARAM]
	[PARAM:description]
		%Engine/Animation/Sequences/Notifies:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Animation/Sequences/Notifies]
	[/PARAM]
[/OBJECT]
[/VAR]


[TOC (start:2 end:2)] 

## 概要

[EXCERPT:Intro]
**アニメーション通知** (**AnimNotifies** または単に **Notifies**) は、**アニメーション シーケンス** の特定ポイントでイベント発生をアニメーション プログラマが設定できるようにします。**通知** は、一般的に歩行時や走行時の足音エフェクトの追加、アニメーションの実行、アニメーション中のパーティクル システムのスポーンなどに使用されます。しかし、その他にも使用法がたくさんあります。ゲームの種類に応じたカスタム通知へシステムを拡張することができます。
[/EXCERPT:Intro]

通知の作成と編集は **ペルソナ** の **Notify Editor** (通知エディタ) を使用して実行します。詳細は、[アニメーション シーケンスの編集](Engine/Animation/Sequences/Editor) のドキュメントを参照してください。 

## アニメーションの通知タイプ

**通知** のタイプが異なると、異なるイベントをトリガーします。Camera Effect (カメラ エフェクト)、Particle Effect (パーティクル エフェクト)、Sound (サウンド) など、全てのイベントはアニメーションのどの時点でもトリガーできます。 

以下は、現在利用可能な **通知** とその使用方法です。 


### Play Particle Effect

**Play Particle Effect** 通知は、任意のソケット位置で、またアニメーションのタイムラインの特定ポイントでパーティクル システムをスポーンし、再生することを通知します。これは、プレイヤーが動く際にその足元で砂ぼこりをたてる、プレイヤーがニトロブーストのパワーアップ時に排気管から発火するようなエフェクトなどに役立ちます。

![](PlayParticleEffectNotify.png)

**Play Particle Effect** 通知は、ビヘイビアを制御するために Animation ブループリントを使用しません。かわりに、**[詳細]** パネルで定義されているいくつかの簡単なプロパティを使用し、どの **パーティクル システム** が使用されているか、どの **ソケット** からパーティクルが発生するかを決定します。

![](PlayParticleEffectDetails.png)

| **プロパティ** | **説明** |
| --- | --- |
| **Socket Name** | パーティクル システムのスポーン ポイントとして使用されるスケルタルメッシュのソケットを含みます。 |
| **PSTemplate** | 通知の設定時点でスポーンするパーティクル システムを保持します。 |
| **Attached** | エフェクトをボーン/ソケットにアタッチするかを決めます。 |
| **Location Offset** | ソケットからの位置オフセット。 |
| **Rotation Offset** | ソケットからの回転オフセット。 |
| **Notify Color** | 通知バーで通知のカラーを変更します。|

一度セットアップすると、ソケットの位置をスポーン ポイントとして関連するパーティクル システムが再生します。

![](DustyFeet.png)


### Play Sound

**Play Sound** 通知は、サウンド エフェクトをアニメーションと同期させる簡単な手段を提供します。 _Play Particle Effect_ と同様に、この通知にはいくつかの簡単なプロパティがあります。**[詳細]** パネルで設定可能であり、高速かつ簡単なサウンドエフェクトのセットアップを実現します。たとえばロボットが動く際の機械的なうなり音、キャラクタの動作中の衣擦れの音、類似エフェクトで役立ちます。

![](PlaySound.png)

**Play Sound** 通知は、**[詳細]** パネルで定義されているいくつかの簡単なプロパティを使用し、どのサウンド エフェクトが使用されているか、どの **ソケット** または **ボーン** からサウンドが発生するかを決定します。

![](PlaySoundDetails.png)

| **プロパティ** | **説明** |
| --- | --- |
| **Attach Name** | サウンド エフェクトのスポーン ポイントとして使用されるスケルタルメッシュのソケットまたはボーンを含みます。 |
| **Volume Multiplier** | このスケーリング乗数は、サウンド エフェクトのボリュームに適用されます。|
| **Pitch Multiplier** | このスケーリング乗数は、サウンド エフェクトのピッチに適用されます。 |
| **Follow** | チェックを入れると、スタティックメッシュの動きに従い、サウンド エフェクトのソースが後に続きます。チェックを入れないと、サウンドはスポーンされた場所に留まります。
| **Notify Color** | 通知バーで通知のカラーを変更します。|

### Custom

**Custom** 通知は、アニメーションの任意のポイントで **Animation ブループリント** 内でアーティストが行いたい作業に対して多様な対応をします。Custom 通知を作成するには、通知トラックを **右クリック** し、コンテキスト メニューから **New Notify** 選択します。

![](MySpecialNotify.png)

これを行うと、ただちにその新規通知に対して名前を入力する必要があります。

![](NotifyName.png)

名前を入力すると、タイムラインにその新規通知が表示されます。

![](MyNotifyIn.png)

カスタム通知では、**[詳細]** パネルで編集するプロパティはありません。かわりに、スケルタルメッシュのアニメーション ブループリントのステートマシンで **Event Graph** またはいずれかの **Transitions** で同じ名前で通知イベントを作成できます。

![](SwitchToAnimBP.png)

**EventGraph** の任意の場所で **右クリック** すると、Animation Notifies Event を追加するためのセクションが表示されます。

![](rightClickAddNotify.png)

![](MySpecialNotifyBlueprint.png)

##アニメーション通知ステート 

**AnimNotifyStates** (**Notify States**) は、上記の標準的な通知のように機能し、start、「tick」、end の3 種類のイベントがあります。これらは簡単に開始し、通知が開始、終了する瞬間に発行し、その中にある **EventGraphs** はアニメーションで時間がくると発生します。end event に到達するまで、アニメーションがアップデートされるたびに tick が発生します。標準の Notifies との違いは、**AnimNotifyStates** は、自己完結型の **ブループリント** であるという点です。

**AnimNotifyState** を使用するには以下の手順に従います。

1. **コンテンツ ブラウザ** で、「AnimNotifyState」から継承する新規の **ブループリント** を作成することにより、新規の **AnimNotifyState** アセットを作成します。

	![](newBP.png)

	![](AnimNotifyStateCreate.png)

1. **アニメーション シーケンス** または **アニメーション モンタージュ** 上で、通知領域を **右クリック** し、新規の **AnimNoitfyState** を追加します。

	![](addNotifyState.png)

1. **AnimNotifyState** 上で **右クリック** し、**Set AnimNotifyState Duration** を選択することで、AnimNotifyState の長さを設定できます。

	![](AnimNotifyStateSetLength.png)

	![](duration.png)

1. 最後に、**コンテンツ ブラウザ** から該当する **AnimNotifyState** を **左ダブルクリック** し、**ブループリント** を呼び出して、何を行うかについての定義を開始することができます。
	[REGION:lightbox]

		[![](animNotifyStateImplementFunction.png)(w:860)](animNotifyStateImplementFunction.png)
	[/REGION]

この時点で、 **AnimNotifyState** の 3 つの関数の実装を開始することができます。すべての関数を実装する必要はありませんが、最低限「Recieved_NotifyTick」、または「Recieved_NotifyStart」 と「Recieved_NotifyEnd」の両方を実装してください。「Recieved_NotifyStart」と「Recieved_NotifyEnd」だけを実装すると、単に標準のアニメーション通知だけを使用できます。

![](Recieved_NotifyStart.png)

![](Recieved_NotifyEnd.png)

![](Recieved_NotifyTick.png)

| **ピン** | **説明** |
| --- | ----------- |
| **Mesh Comp** | この AnimNotifyState をトリガーしているアニメーション シーケンスまたはモンタージュのスケルタルメッシュのコンポーネントです。 |
| **Anim Seq** | この AnimNotifyState をトリガーしている特定のアニメーション シーケンスです。 |
| **Frame Delta Time** | Received Notify Tick 関数にのみ存在し、アニメーションの最終アップデートからの時間を表します。 |

[REGION:note]
現在、ブループリント内で AnimNotifyState の長さを取得する方法はありません。
[/REGION]

### 規則

* 必ず NotifyBegin Eventで開始します。
* 必ず NotifyEnd Eventで終了します。
* 必ず NotifyBegin と NotifyEnd のイベントの間に NotifyTick をラップします。
* 異なる AnimNotifies (normal または state) 間の順序は保証されません。2 つの AnimNotifyStates を互いに隣に入れると、最初の AnimNotifyStates が、次の AnimNotifyStates が開始するまでに終了することは保証されません。これは、他の通知に依存していない各アクションにのみ使用してください。
* 負の再生速度をサポートしています。それでも NotifyBegin が最初に呼ばれ、NotifyEnd が最後に呼ばれます。

### 順序とロジック

**AnimNotifyState** が最初にトリガーされると、**Start** ブループリントが呼び出され、次に同じフレームの更新で **Tick** ブループリントが呼び出されます。その後の `tick` では、**Tick** ブループリントのみが呼び出されます。最終的な「tick」の更新では、**Tick** ブループリントが呼び出され、その後に **End** ブループリントが呼び出されます。

フレーム毎に何かを修正する場合、**Tick** ブループリントに入れるようにします。「tick」に到達する前に、変数、フラグ、またはプロパティを何らかの値に設定する必要がある場合、それは **Start** ブループリントに入れるようにします。最後に、最終「tick」に到達後、**End** ブループリントを使用して、変数、フラグ、またはプロパティを変更できます。


## ネイティブ通知ステート 
**Notify State** を追加することを選択する際に、2 つある **Native Notify States** のいずれかを割り当てることができます。その 1 つは、**Timed Particle Effect** (時限式パーティクルエフェクト) で、もう 1 つが、アニメーションの **Trail** という形式です。 

![](AddingNotifyStates.png)

### Timed Particle Effects

**Timed Particle Effect** (時限式パーティクルエフェクト) は、**Play Particle Effect** (パーティクルエフェクト再生) 通知と非常に似ています。両方とも、アニメーションの任意のポイントで **パーティクル エフェクト** を再生できるからです。この 2 つの違いは、**Timed Particle Effect** では、通知そのものの内部でエフェクトの長さを定義できるという点です。 

![](TimedParticleEffect.png)

上の画像では、**Play Particle Effect** と **Timed Particle Effect** の両方がアニメーションに割り当てられています。黄色い枠内には、**Timed Particle Effect** があり、この通知にはハンドルバーが 2 つあることにお気づきでしょう。1 つはイベントの開始点であり、もう 1 つは終了点です。終了点のハンドルバー (緑色の矢印で表記) を **左クリック** してドラッグすることで、エフェクトの長さを延長または短縮することができます。

### Animation Trails
**Animation Trails** (または略して **AnimTrail**) は、シーン内で移動するオブジェクトの後にトレイル (軌跡) を残すことができるエミッタです。 
これは、各 tick で **スケルタルメッシュ** の 2 つのソケット位置をサンプリングして、ソケット間のトライアングルをつなぎ合わせて、トレイルの長さにします。 
  
**AnimTrail** エミッタを使用するには、以下を行う必要があります。 
1.        **AnimTrail** タイプのデータを使用してエミッタを含む **パーティクルシステム** を作成します。 
1.        **Animation Editor** で、タイプ **Trail** の **AnimNotifyState** を追加します。 

_パーティクル システムをセットアップする_ 

通常どおり **パーティクル システム** を作成し、タイプ **AnimTrail** データの新規エミッタを追加します。 
このタイプのデータ モジュールのいくつかのプロパティは、トレイルのビヘイビアに影響を及ぼします。以下は、システム セットアップ時の **カスケード** の表示です。後で説明するように、トレイルは **スケルタルメッシュ** コンポーネントと合わせて使用しなければならないため、このプレビュー ウィンドウには何も表示されません。 

[REGION:lightbox]  
[![](TrailExample.png)(w:480 h:480)](TrailExample.png)
[/REGION]
_クリックしてフルサイズ表示_ 


以下は、パーティクル システムの **AnimTrail** タイプのデータ セクション内のプロパティです。 

| **プロパティ** | **説明** |
| --- | --- |
|**Dead Trails On Deactivate**| _true_ の場合、パーティクル システムが無効になると、パーティクルが自然消滅するのではなく、すべてのトレイルが効力のないトレイルとしてマークされます。これは一般的に、_true_ のままにします。 |
| **Enable Previous Tangent Recalculation** | _true_ の場合、新規パーティクルがスポーンされた時に前回のタンジェントを再計算します。システムの負荷は高くなりますが、タンジェントがより正確にトレイル カーブと一致するため、見た目はよくなります。 |
|**Tangent Recalculation Every Frame**| _true_ の場合、タンジェントがフレーム毎に再計算されます。遅くなりますが、トレイル パーティクルに速度や加速を持たせることができるようになります。 |
|**Tiling Distance** | 2 番めの UV が設定されている 2 番めの タイルまでトレイルが移動しなければならないワールド単位の推定距離です。0.0 の場合、UV が設定されている 2 番めのものはタイルではありません。 |

** テッセレーションのパラメータ**
 
テッセレーションは、ジオメトリをさらに小さなセグメントに分けるプロセスです。トレイルは、カーブ表面をトライアングルで近似します。従って、以下のオプションに基づきトレイルをテッセレーションし、正確にカーブに適合するようにし、その結果、滑らかに見た目が美しくなるようにします。 
しかし、トレイルをテッセレートするほど、負荷は高くなります。 

| **プロパティ** | **説明** |
| --- | --- |
|**Distance Tessellation Step Size**| もう 1 つのテッセレーション ポイントを含むために必要なトレイルのワールド単位の (概算) 距離。
| **Tangent Tessellation Step Size** | もう 1 つのテッセレーション ポイントを含むために、あるパーティクルから他のパーティクルでタンジェントが変化しなければならない (概算) 角差の度数。これにより、トレイルの急なターンが見ためのよい滑らかなものになります。 |
| **Width Tessellation Step Size** | テッセレーション ポイントの追加を可能にするトレイルの幅のワールド単位の (概算) 変化。 |
 
_AnimNotify のセットアップ_

パーティクル システムの用意ができたら、**AnimNotify** でそれを使用しなければなりません。 
**Animation Editor** を開き、**Timeline** を追加するか、**Notifies** セクションにある既存の **Timeline** を使用して、その上で **右クリック** してメニューを呼び出します。**Add Notify State** セクションに、**Trails** 通知があります。 

![](SetUpTrail.png)

以下は **[詳細]** パネルと **Trails** 通知の **プロパティ** です。 

![](TrailDetails.png)

| **プロパティ** | **説明** |
| --- | --- |
| **First Socket Name** | トレイルを定義する第 1 のボーン/ソケットの名前です。 |
| **Second Socket Name** | トレイルを定義する第 2 のボーン/ソケットの名前です。 |
| **PSTemplate** | 上記で説明したアニメーション トレイルを含むパーティクル システムです。 |
  
上記のプロパティは必須ですが、以下はオプションです。アニメーション中にトレイル幅を変更できます。トレイルをソケットにアタッチし、必要に応じて動かすこともできますが、これは理想的ではないかもしれません。 
この方法は、幅スケーリング値を与えることに基づいています。幅のスケーリング 1.0 は、トレイルを同じ幅に保ちます。0.0 は幅ゼロのトレイルになります。 

| **プロパティ** | **説明** |
| --- | --- |
| **Width Scale Curve** | 幅の値は各ティックでサンプリングされたカーブから得られます。このプロパティはカーブの名前です。カーブ作成についての詳細は以下をご覧ください。 |
| **Width Scale Mode** | 幅の適用方法を変更します。以下の図は、これがどのように機能するかを示しています。この例では、真ん中で 0 から 1 になり、0 に戻る正弦のようなカーブを示しています。

![](WidthScaleMode.png)

_左の画像は **From Centre** を表します。これは、中央から外側にスケーリングします。中央の画像は、**From First Socket** を表します。これは、第 1 のソケットから離れてスケーリングします。右側の画像は、**From Second Socket** を表しています、これは、第 2 のソケットから離れてスケーリングします。_ 

利用可能なデバッグ レンダリング オプションもいくつかあります。

| **プロパティ** | **説明** |
| --- | --- |
| **Render Geometry** | メインのトレイル ジオメトリのレンダリングを切り替えます。   |
| **Render Spawn Points** | トレイルで主にスポーンするポイントすなわち、各ティックでソケットからサンプリングされた位置でデバッグ レンダリングをトグルします。
| **Render Tangents** | カーブ タンジェントのデバッグ レンダリングを切り替えます。 |
| **Render Tessellation** | カーブ上の全頂点のデバッグ レンダリングを切り替えます。スポーンポイント間でカーブがどのようにテッセレーションされるかを示します。

### ブループリントでアニメーションのトレイルを制御する
上記の方法は、**AnimTrails** を制御する標準的なアプローチですが、**Anim Notify** を使用する必要なく、**ブループリント** 内から制御することもできます。 
この方法の唯一の制約は、**パーティクル システム コンポーネント** がソケットの位置のサンプリング元である **スケルタルメッシュ コンポーネント** の子でなければならないことです。 

1. **Emitter** コンポーネントを作成します (または既存のものを使用)。 
1. このコンポーネントで **BeginTrails** 関数を呼び出します。これでコンポーネントのすべてのトレイル エミッタが開始します。ここでトレイルの他のプロパティも指定する必要があります。 

    ![](TrailBlueprint2.png)
1. このコンポーネントで **EndTrails** 関数を呼び出します。 
 ![](TrailBlueprint3.png)
1. 実行中にトレイルのプロパティを変更することもできます (以下の例は、ゲーム時間を使用して各ティックで幅を変更しています)。  
 ![](TrailBlueprint4.png)

