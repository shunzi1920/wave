INTSourceChangelist:2590930
Availability:Public
Title:Decal アクタの操作ガイド
Crumbs:%ROOT%, Engine, Engine/Actors
Description:Deferred Decal アクタの操作ガイド

[VAR:Topic]
[OBJECT:Topic]
	[PARAM:image]
		![%Engine/Actors/DecalActor:title%](Engine/Actors/DecalActor/decal_topic.png)
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%/editor_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Engine/Actors/DecalActor:title%
	[/PARAM]
	[PARAM:description]
		%Engine/Actors/DecalActor:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Actors/DecalActor]
	[/PARAM]
[/OBJECT]
[/VAR]

[VAR:TopicCompact]
[OBJECT:TopicCompact]
	[PARAM:image]
		![%Engine/Actors/DecalActor:title%](Engine/Actors/DecalActor/decal_topic.png)
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%/editor_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Engine/Actors/DecalActor:title%
	[/PARAM]
	[PARAM:description]
		%Engine/Actors/DecalActor:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Actors/DecalActor]
	[/PARAM]
[/OBJECT]
[/VAR]
[TOC(start:2)]

## 概要

ディファード デカールにより、高度でより簡単な維持管理が可能になります。ライティングを再計算するかわりに GBuffer へ書き出す利点は以下の通りです。

* 全てのライトに同じコード パスが使用されるためライト数やライトの種類に制限がなく、パフォーマンスの予測が可能なライト数がかなり多くなります。 
* スクリーン空間マスクを操作することで、通常では難しいと思われるエフェクトが可能になります (例えば、湿ったレイヤー)。


デカールのレンダリングは、エリアに影響を与えるデカール周辺のボックスのレンダリングにより行われます。

## レベルにデカールを追加する

シーンへデカールを最も簡単に追加するには、適切なデカール マテリアルを **コンテンツ ブラウザ** から選択した後、ビューポート内で右クリックし、コンキスト メニューから **[Place Actor (アクタを配置)]** を選択します。このとき、デカールがサイズ変更されて、変換ツールによって正しい位置に調整されることがあります。 

![Decal_1.png](Decal_1.png)(w:720)


## サイジング、タイリング、オフセット処理

デカールが作成されると、移動または回転ウィジットによって位置を決定します。

![Decal_2.png](Decal_2.png)(w:720)

不均等なスケーリング ウィジェットが、デカールのボリュームの幅、高さ、遠方平面の距離をコントロールします。


##ディファード デカールのプロパティ

ディファード デカールには僅かなプロパティしかありません。

| アイテム | 説明 | 
|--- | --- |
|**Material**| デカールに使用されるマテリアルを保持するプロパティです。|
|**Sort Order** | スタック時に、複数のデカールのソート順序をコントロールする値を設定するプロパティです。値が高いほど上部にレンダリングされます。|

[REGION:warning]
	ソート順序の設定はを注意が必要です。多くの異なるデカールに数多くのソート値を設定すると、ステートからのデカール処理の妨げとなります。結果としてパフォーマンスに悪影響を与えます。
[/REGION]

## マテリアル設定

新しい **DecalBlendMode** 設定により、マテリアルのプロパティ (ディフューズ、スペキュラ、法線、オパシティ、他) の GBuffer への適用方法が定義されます。マテリアルは **_DBM_Auto_** モードのままにしておけます。このモードでは、接続されている出力に応じて、他のモードの中から 1 つが選択されます。オパシティを使ってデカールの効果をブレンドします。効果的なデカールは、あまり GBuffer プロパティを操作しません。現在最適化しているものは、 **_DBM_Diffuse_** 、 **_DBM_Specular_** 、 **_DBM_Emissive_** 、 **_DBM_Normal_** といった他のモードです。

**_DBM_ScreenSpaceMask_** は、SSAO (環境オクルージョン) で使用する特別なマスク チャネルに影響するので特別です。これにより、いくつかのエリアで、デカールが効果をオーバーライドあるいはフェードさせることができます。

**_DBM_DiffuseSpecularEmissive_** は複数の GBuffer チャンネルに影響を与えるモードです。

マテリアル ブレンド モードもまた GBuffer 値のブレンドのされ方に影響を与えることに注目してください。従って、ディフーズ カラーの乗算処理が可能になります。

GBuffer ビューモードを使って、ピクセルごとに格納されている GBuffer 値を調べることができます。

デカールのローカル位置は 0 から 1 の間の 3D ポジションです。テクスチャ UV により X コンポーネントと Y コンポーネントが与えられます。Z コンポーネントが必要な場合は、 CameraVector ノードを接続して 3 ベクター すべてのコンポーネントを取得することができます。

## パフォーマンス

デカールの影響を受けたオブジェクトのメッシュ複雑度は、パフォーマンスには影響しません。デカールのパフォーマンスは、スクリーン上のシェーダーの複雑度とシェーダーボックスのサイズによります。

デカールごとのパフォーマンスをさらに改善できます。デカールのバウンディング ボックスは小さい方が、ピクセル単位のパフォーマンスをあげるには理想的です。これは手動で行えます。自動でも行うことはできますが、優秀なデザイナーでもパフォーマンスをさらに上げるために配置を調整することができます。


ビュー モード **ShaderComplexity** (エディタ UI または "viewmode ShaderComplexity") でピクセル シェーディング負荷を確認することができます。ピクセル シェーディング負荷の概算で複数のデカールがオーバーラップが累積されます。
今のところ、デカールマスク機能の影響はありません (マスクされると、ステンシル ハードウェア機能が使用されるため、その個所に小さな負荷がかかり続けるはずです)。
次のシーンは、通常のレンダリング (上) と ShaderComplexity を有効にしたもの (下) で、デカールがあるもの (左) とないもの (右) です。

![](DecalShaderComplexity.jpg)

色が濃いほど、ピクセルにかかる負荷が高いことを表します。この情報を使えば、適切なシェーダーを最適化し、ほとんど見えないデカールを削除したり、より効率的に配置することが可能になります。

## 現在の制限事項

* 現在、ディファード デカールのみがサポートされており、それらは静的オブジェクト上でのみ機能します。
* 法線のブレンドは現在オブジェクトの周囲をラップしていません。
* ストリーミングはまだ接続されていないので、テクスチャがストリームされないようにしてください。
* デカールのマスク (他のオブジェクトに影響しない) は完全には実装されていません。

## 2x2 のブロックのアーティファクトの修正

デカールには、以下の画像のようにエッジに 2x2 ブロックのアーティファクトが見えることがあります。

![](2x2_artifacts.bmp)

ここで "Decal Mipmap Level" ノードを使います。このノードはパフォーマンスに非常に大きな影響を及ぼすので注意して使用しなければなりません。

![](decal_mipmap_material_1.png)

このノードを使うことで、デカール上のアーティファクトが修正されます。

![](2x2_no_artifacts.bmp)

### SampleTexture UV がない理由

計算をする場合 Decal Mipmap Level ノードはあまりに負荷が高いので、SampleTexture としての UV 入力がありません。ただしタイリングの場合は、ミップマップ レベルを手作業で修正すれば、対応することができます。以下は 2^4 = 16 タイリングを繰り返した例です。

![](decal_mipmap_material_2.png)

### 現在の制限事項

* DecalMipmapLevel は UV をサポートしていません。
* DecalMipmapLevel 異方性フィルタリングとは機能しません。





