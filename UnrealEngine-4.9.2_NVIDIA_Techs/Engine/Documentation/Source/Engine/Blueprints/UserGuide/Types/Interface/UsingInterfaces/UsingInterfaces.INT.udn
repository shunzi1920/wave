Availability:Public
Title:Implementing Blueprint Interfaces
Crumbs: %ROOT%, Engine/Blueprints, Engine/Blueprints/UserGuide/Types/Interface
Description:Blueprint Interfaces allow Blueprints to call functions in different types of targets, if they also implement the interface.

[VAR:Topic]
[OBJECT:Topic]
	[PARAM:image]
		![%Engine\Blueprints\UserGuide\Types\Interface\UsingInterfaces:title%](Engine\Blueprints\UserGuide\using_interface_topic.png)
	[/PARAM]
	[PARAM:icon]
	[/PARAM]
	[PARAM:title]
		%Engine\Blueprints\UserGuide\Types\Interface\UsingInterfaces:title%
	[/PARAM]
	[PARAM:description]
		%Engine\Blueprints\UserGuide\Types\Interface\UsingInterfaces:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine\Blueprints\UserGuide\Types\Interface\UsingInterfaces]
	[/PARAM]
[/OBJECT]
[/VAR]

[VAR:TopicCompact]
[OBJECT:TopicCompact]
	[PARAM:image]
		![%Engine\Blueprints\UserGuide\Types\Interface\UsingInterfaces:title%](Engine\Blueprints\UserGuide\using_interface_topic.png)
	[/PARAM]
	[PARAM:icon]
	[/PARAM]
	[PARAM:title]
		%Engine\Blueprints\UserGuide\Types\Interface\UsingInterfaces:title%
	[/PARAM]
	[PARAM:description]
		%Engine\Blueprints\UserGuide\Types\Interface\UsingInterfaces:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine\Blueprints\UserGuide\Types\Interface\UsingInterfaces]
	[/PARAM]
[/OBJECT]
[/VAR]

[TOC (start:2)]

## Using Interfaces in Blueprints

[EXCERPT:intro]
The use of _Blueprint Interfaces_ allows for a common method of interacting with multiple different types of objects that all share 
some specific functionality. This means you can have completely different types of objects, such as a car and a tree, that 
share one specific thing, like they can both be shot by weapon fire and take damage. By creating a _Blueprint Interface_ that 
contains an `OnTakeWeaponFire` function, and having both the car and the tree implement that _Blueprint Interface_, you can treat the 
car and the tree as the same type and simply call the `OnTakeWeaponFire` function when either of them is shot.
[/EXCERPT:intro]


### Adding Interfaces

_Blueprint Interfaces_ as well as _Interfaces_ defined in native code (C++) can be added to any type of _Blueprint_ other than a _Level Blueprint_.

1. Click the ![](BlueprintProps.png) button in the [Toolbar](Engine/Blueprints/Editor/UIComponents/Toolbar).

1. In the **Details** tab, scroll to the **Interfaces** category. Click the ![](button_AddInterface.png) button to see a list of the available Interfaces. Click the one you want to add it.

	![](InterfacesCategory.png)

	![](InterfacesListPopulated.png)

[REGION:tip]
	Interfaces can be removed by clicking the ![](button_X_Remove.png) button located next to each one on the _Implemented Interfaces_ list. You can also migrate from Blueprint Interfaces to normal Blueprint functions. For more information, see [](Engine/Blueprints\UserGuide\BlueprintComms\InterfaceMigration).
[/REGION]

[REGION:note]
	The _Inherited Interfaces_ section within the Interfaces category automatically populates with any Interfaces that were inherited by this object (i.e. implemented in the Blueprint from which the current Blueprint was derived).
[/REGION]



### Implementing Interface Members

When an _Interface_ is added to a _Blueprint_, that _Blueprint_ must **implement** the _Interface's_ functions in order to have 
them perform any action when called. This is done by placing _Event_ nodes for the _Interface_ functions in the **EventGraph**. 
The nodes connected to the _Event_ define the functionality, or implementation, for the function.

1. **Right-click** in the **EventGraph** of the _Blueprint_ and choose **Add Event > Event Example Function** (substitute the name of the 
function in the _Interface_ you are implementing for **Example Function**). The _Event_ node is shown in the **Graph** tab. 

	![Implement Interface - Add Event](k2_interface_event_menu.png) ![Implement Interface - Event Node](k2_interface_event_graph.png)

1. Create a network of nodes connected to the _Event's_ exec pin to give it functionality.

	![Implement Interface - Event Implementation](k2_interface_event_implementation.png)

	
### Calling Interface Functions

The functions of the _Interface_ are executed through the use of **Interface Message** nodes, These look and act like regular 
[](Engine/Blueprints/UserGuide/Functions/FunctionCalls), except that they can fail silently if the target does not implement 
the _Interface_.

![Implement Interface - Call Function](k2_interface_event_call.png)


### Calling Interface Functions on Other Blueprints

Interfaces are useful for allowing communication between different Blueprints. Functions from a single interface can be called on other Blueprints. This can be done when 2 criteria are met:

* Both Blueprints implement the same interface with the required function.
* The calling Blueprint knows the name of the in-game instance of the other Blueprint.


When creating an Interface Function node within the Event Graph, you will often see two versions of the function listed in the context menu. 

![](MyFunctionInMenu.png)

It is important to note that the version listed beneath **Call Function** is a local version, intended only to be called within this Blueprint. 

The version listed under **Interface Messages** is designed to call the function via the interface on other Blueprints implementing the same interface.

There is some labeling beneath the node title in place to help differentiate:

[REGION:imagetable]
| ![](Local_MyFunction.png)| ![](Interface_MyFunction.png) |
| ------ | ------ |
| Local version. | Interface Message version. |
[/REGION]

Calling an Interface Message Function requires that you supply the instance of the appropriate Blueprint on which you are calling the function.

Note in this image we are sending another Blueprint as the Target input. This would call the function on the supplied Blueprint. If that Blueprint did not implement the interface, then nothing would happen.

![](InterfaceMessageFunctionCalled.png)

[REGION:tip]
	To specify a Blueprint that exists within the level, it is best to make a Public variable of type 'Actor', and assign the appropriate Blueprint in the value for that variable using the **Details** tab of the Level Editor.
[/REGION]

### Overriding an Interface Function

One of the most important aspects of Interface functions is that, since they have no implementation of their own, their functionality can be independently defined for each Blueprint that implements the Interface.

Once an Interface has been implemented by a Blueprint, the functions of that interface will be visible in the **My Blueprint** panel.

![](iFunctionInExplorer.png)

If you **double-click** that function, it will open up within the Blueprint Editor. This shows the local implementation for this function. Whatever functionality is defined here will be unique to this Blueprint. In this way, you can define custom functionality for each Blueprint that implements the interface.

For example, in this image we see a basic interface function as opened within a Blueprint. Right now, the function does nothing.

![](DefaultFunction.png)(w:600)

We could create a simple network to do a number comparison, and output the value, like so.

![](ComparisonFunction.png)(w:600)

Now, when the function is called locally, it will take in a float, compare it against the number 10, and then output the boolean result to the screen.

![](FunctionLogging.png)
