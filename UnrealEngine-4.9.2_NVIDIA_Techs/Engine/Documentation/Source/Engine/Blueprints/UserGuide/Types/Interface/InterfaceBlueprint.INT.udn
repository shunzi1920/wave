Availability:Public
Title:Blueprint Interface
Crumbs: %ROOT%, Engine/Blueprints, Engine/Blueprints/UserGuide/Types
Description:Blueprints that declare functions to define an interface between Blueprints.

[VAR:Topic]
[OBJECT:Topic]
	[PARAM:image]
		![%Engine/Blueprints\UserGuide\Types\Interface:title%](Engine/Blueprints/UserGuide/Types/blueprint_interface.png)
	[/PARAM]
	[PARAM:icon]
	[/PARAM]
	[PARAM:title]
		%Engine/Blueprints\UserGuide\Types\Interface:title%
	[/PARAM]
	[PARAM:description]
		%Engine/Blueprints\UserGuide\Types\Interface:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Blueprints\UserGuide\Types\Interface]
	[/PARAM]
[/OBJECT]
[/VAR]

[VAR:TopicCompact]
[OBJECT:TopicCompact]
	[PARAM:image]
		![%Engine/Blueprints\UserGuide\Types\Interface:title%](Engine/Blueprints/UserGuide/Types/blueprint_interface.png)
	[/PARAM]
	[PARAM:icon]
	[/PARAM]
	[PARAM:title]
		%Engine/Blueprints\UserGuide\Types\Interface:title%
	[/PARAM]
	[PARAM:description]
		%Engine/Blueprints\UserGuide\Types\Interface:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Blueprints\UserGuide\Types\Interface]
	[/PARAM]
[/OBJECT]
[/VAR]

[TOC (start:2)]

[EXCERPT:Intro]
A **Blueprint Interface** is a collection of one or more functions - name only, no implementation - that can be added to 
other _Blueprints_. Any _Blueprint_ that has the _Interface_ added is guaranteed to have those functions. The functions 
of the _Interface_ can be given functionality in each of the _Blueprints_ that added it. This is essentially like the 
concept of an interface in general programming, which allows multiple different types of Objects to all share and be accessed 
through a common interface. Put simply, _Blueprint Interfaces_ allow different _Blueprints_ to share with and send data to one another.

_Blueprint Interfaces_ can be made by content creators through the editor in a similar fashion to other _Blueprints_, but they 
come with certain limitations in that they cannot:

* Add new variables
* Edit graphs
* Add _Components_


[/EXCERPT:Intro]

The use of _Blueprint Interfaces_ allows for a common method of interacting with multiple disparate types of Objects that all share 
some specific functionality. This means you can have completely different types of Objects, such as a car and a tree, that 
share one specific thing like they can both be shot by weapon fire and take damage. By creating a _Blueprint Interface_ that 
contains an `OnTakeWeaponFire` function, and having both the car and the tree implement that _Blueprint Interface_, you can treat the 
car and the tree as the same type and simply call the `OnTakeWeaponFire` function when either of them is shot. Read about how to implement
_Blueprint Interfaces_ on the [](Engine/Blueprints\UserGuide\Types\Interface\UsingInterfaces) page.

## Creating Blueprint Interfaces

_Blueprint Interface_ creation within the **Content Browser** is as simple as **right-clicking** and choosing _Blueprint Interface_ from the context menu, then naming your new Interface.

![](CreateInterface.gif)

![](CreatedBlueprintInterface.gif)

Once created, you need to edit the Interface's functions.

## Editing Blueprint Interfaces

_Blueprint Interfaces_ are edited the **Blueprint Editor**. Since you cannot create your own variables, graphs, or components, the process of Interface editing differs greatly from the process of editing standard _Blueprint Classes_. 

When you first open up a new Interface, the editor looks like this:

![](InterfaceEditor.png)

If you have just created your Interface, you will see that the Editor has created a new blank Function for you named `NewFunction_0` and it will be highlighted for you to rename it.

### Adding Functions

Functions are the primary component of an Interface. Interface functions have no implementation. They exist simply as a definition of inputs and outputs. These can be used to send data through the interface, or can be overridden within any Blueprint that implements that Interface.

To add a new function:

1. In the **My Blueprint** tab create a new function, by clicking on the **Add Button** ![](Engine\Blueprints\Editor\UIComponents\MyBlueprint\plus_Button.png) on the functions list header ![](Engine\Blueprints\Editor\UIComponents\MyBlueprint\myblueprint_function.png).

1. In the **My Blueprint** pane, enter a name for the new function.

	![](RenameMyFunction.png)

1. The new Graph area will appear with the new function. Note that the function has neither inputs nor outputs.

	![](NewFunctionCreated.png)


### Editing Function Signatures

Since an interface function has no implementation, all you can do as a designer is designate a series of typed inputs and outputs. 

To edit a function's signature:

1. In the **Details** tab, scroll to the _Inputs_ category and click the ![](button_New.png) button to create a new Input Parameter.

	![](Details_Signature.png)

1. Set the Input Name and Type as desired. You may also expand the input using the ![](button_DropdownArrow.png) button next to the name, and thereby set a Default Value.

	![](FloatInput.png) ![](MyFunctionGraph.png)

1. In the same manner, outputs can also be added. Note how the graph automatically updates to show them.

	![](OutputBool.png) ![](InputWithOutput.png)




### Other Considerations

* On any input or output parameter, you can click the ![](button_X_Remove.png) button to remove that parameter.

* Input parameters can be given a default value using the small text field immediately under of the parameter name field, though you must expand the property entry in the **Details** tab to see it.

* You can change where the input and output parameters appear on the node using the ![](button_moveUp.png) and ![](button_moveDown.png) found in the **Details** tab when the parameter properties are expanded.

* You can use the Replicates checkbox for any Interfaces containing functions that need to replicate across the server. This is found within the **Details** tab by first clicking the ![](BlueprintProps.png) button.

## Reference Links

Refer to the following links for additional documentation regarding **Blueprint Communication**: 

* For information on **Blueprint Communication Guidelines**, see: [**Blueprint Communication Usage**](Engine\Blueprints\UserGuide\BlueprintCommsUsage) 

* For information on **How to Setup Different Blueprint Communications**, see: [**How to Use Blueprint Communications**](Engine\Blueprints\UserGuide\BlueprintCommsUsage\BPComHowTo) 

* For information on **Event Dispatchers**, see: [**Event Dispatchers**](Engine\Blueprints\UserGuide\EventDispatcher) 

* For information on **Direct Blueprint Communication**, see: [**Direct Blueprint Communications**](Engine\Blueprints\UserGuide\BlueprintComms)
