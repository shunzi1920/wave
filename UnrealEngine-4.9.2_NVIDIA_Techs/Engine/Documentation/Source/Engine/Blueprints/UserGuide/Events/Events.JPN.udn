INTSourceChangelist:2599455
Availability:Public
Title:イベント
Crumbs: %ROOT%, Engine, Engine/Blueprints, Engine/Blueprints/UserGuide
Description:EventGraph 内の個々のネットワークの実行を開始するためにゲームプレイ コードから呼び出されるノード

[VAR:Topic]
[OBJECT:Topic]
	[PARAM:image]
		![%Engine/Blueprints/UserGuide/Events:title%](Engine\Blueprints\UserGuide\Events.png)
	[/PARAM]
	[PARAM:icon]
	[/PARAM]
	[PARAM:title]
		%Engine/Blueprints/UserGuide/Events:title%
	[/PARAM]
	[PARAM:description]
		%Engine/Blueprints/UserGuide/Events:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Blueprints/UserGuide/Events]
	[/PARAM]
[/OBJECT]
[/VAR]

[VAR:TopicCompact]
[OBJECT:TopicCompact]
	[PARAM:image]
		![%Engine/Blueprints/UserGuide/Events:title%](Engine\Blueprints\UserGuide\Events.png)
	[/PARAM]
	[PARAM:icon]
	[/PARAM]
	[PARAM:title]
		%Engine/Blueprints/UserGuide/Events:title%
	[/PARAM]
	[PARAM:description]
		%Engine/Blueprints/UserGuide/Events:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Blueprints/UserGuide/Events]
	[/PARAM]
[/OBJECT]
[/VAR]




[TOC (start:2)]

[EXCERPT:Intro]
**Events** は、 **EventGraph** 内の個々のネットワークの実行を開始するために 
ゲームプレイ コードから呼び出されるノードです。これらにより、 _ブループリント_ は、 
ゲームの開始、レベルのリセット、ダメージなどのゲーム内で生じる一定のイベントに反応して 
一連のアクションを実行できるようになります。新規機能を実装したり、デフォルト機能をオーバーライドあるいは補強するために、 
これらのイベントには _ブループリント_ 内でアクセスすることができます。1 つの **EventGraph** 内でいくつでも **Events** を使うことができます。 
ただし、各タイプから 1 つのみの使用となります。
[/EXCERPT:Intro]

![Blueprint Class Events Expanded](EventsExpanded.png) ![Level Blueprint Events Expanded](LevelBPEventsExpanded.png)

[REGION:note]
	各イベントが実行できるオブジェクトは 1 つのみです。1 つのイベントから複数のアクションをトリガーしたい場合、 
	それらをまとめて直線上につなげる必要があります。
[/REGION]

[REGION:tip]
マチネを使ってシネマティック シーケンスの再生中に指定回数トリガーされるイベントを作成する情報は、 [](Engine/Matinee\UserGuide\BlueprintComponents) を参照してください。
[/REGION]

<!--

[EXCERPT:LevelBPOnly]
[REGION:note]
この Blueprint Event ノードは Level ブループリントのみで使用できます。
[/REGION]
[/EXCERPT:LevelBPOnly]

[EXCERPT:ServerOnly]
[REGION:note]
この Blueprint Event ノードはサーバー上でのみ実行します。シングル プレイヤー ゲームの場合、ローカルクライアントがサーバーと見なされます。
[/REGION]
[/EXCERPT:ServerOnly]

-->

## Event Level Reset

[INCLUDE:#levelbponly]

[INCLUDE:#ServerOnly]

![LevelReset.png](LevelReset.png)

LevelReset イベントはレベルの再起動時に実行シグナルを送ります。プレイヤーは死んだもののレベルをリロードする必要がないゲームなど、 
レベルをリロードした時点で 
何かをトリガーする必要のある場合に便利です。

![LevelReset_Example.png](LevelReset_Example.png)(w:500)


## Event Actor Begin Overlap
[EXCERPT:EventBeginOverlap]
![](BeginOverlap.png)

いくつもの条件が同時に一致すると、このイベントが実行されます。

* アクタは両方とも Overlap に設定しなければなりません。
* イベントを実行するアクタは Generate Overlap Events が _true_ に設定されています。
* 最後に、両方のアクタのコリジョンがオーバーラップを開始します。一緒に動くか、一方が他方にオーバーラップするように作成されます。

コリジョンの詳細については、 [**コリジョン反応**](Engine\Physics\Collision) をご覧ください。

![](BeginOverlapEX.png)

_このブループリント アクタが Player Actor 変数に格納されているアクタとオーバーラップすると、整数型のカウンタ変数をインクリメントします。_

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]出力ピン[/REGION] ||
| **Other Actor** | **Actor** - このブループリントにオーバーラップする アクタ です。 |
[/EXCERPT:EventBeginOverlap]

## Event Actor End Overlap
[EXCERPT:EventEndOverlap]
![](EndOverlap.png)

いくつもの条件が同時に一致すると、このイベントが実行されます。

* アクタは両方とも Overlap に設定しなければなりません。
* イベントを実行するアクタは Generate Overlap Events が _true_ に設定されています。
* 最後に、両方のアクタのコリジョンがオーバーラップを停止します。バラバラに動くか、一方が破壊されます。

コリジョンの詳細については、 [**コリジョン反応**](Engine\Physics\Collision) をご覧ください。

![](EndOverlapEX.png)

_このブループリント アクタが Player Actor 変数に格納されているアクタ以外のアクタとのオーバーラップを停止すると、オーバーラップされていた側のアクタを破壊します。_

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]出力ピン[/REGION] ||
| **Other Actor** | **Actor** - このブループリントにオーバーラップする アクタ です。 |
[/EXCERPT:EventEndOverlap]

## Event Hit

![](EventHit.png)

このイベントは、コリジョンに関わる両方のアクタのコリジョン設定の **Simulation Generates Hit Events** が _true_ の場合にのみ実行されます。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]出力ピン[/REGION] ||
| **My Comp** | **PrimitiveComponent** - ヒットされた実行中のアクタ上のコンポーネント。 |
| **Other** | **Actor** - コリジョンに関わるもう一方のアクタ。 |
| **Other Comp** | **PrimitiveComponent** - ヒットされたコリジョンに関わるもう一方のアクタ上のコンポーネント。 |
| **Self Moved** | **Boolean** - |
| **Hit Location** | **Vector** - 衝突する 2 つのアクタ間のコンタクト位置。 |
| **Hit Normal** | **Vector** - コリジョンの方向。 |
| **Normal Impulse** | **Vector** - アクタが衝突する力。 |
| **Hit** | **Struct** `HitResult` - Hit 内に収集されたすべてのデータである「HitResult」を取り出して、この結果を「細分化して」個々のデータへアクセスすることができます。 |

![](EventHitEX.png)

_このサンプルでは、ブループリントが _Hit_ を実行すると、影響のポイントで爆発のエフェクトをスポーンします。_

## Event Any Damage

[INCLUDE:#ServerOnly]

![](AnyDamage.png)

このイベントは、一般的なダメージを与えるべき時にパスされます。ポイント ダメージやラジアル ダメージとは全く違う、水死や環境的なダメージなどです。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]出力ピン[/REGION] ||
| **Damage** | **Float** - アクタへ渡されているダメージの量。 |
| **Damage Type** | **Object 'DamageType'** - 処理中のダメージに追加データを格納するオブジェクトです。 |
| **Instigated By** | **Actor** - ダメージに反応するアクタです。ダメージを与えるために銃を発砲したり手榴弾を投げたりするアクタになります。 |
| **Damage Causer** | **Actor** - ダメージを与えるアクタです。弾丸や爆発などがこれにあたります。|

[REGION:lightbox]
[![](AnyDamageEX.png)(w:940)](AnyDamageEX.png)
[/REGION]

_アクタに与えられているダメージが水から発生した場合、ヘルス値が減算され画面に警告が表示されます。_

## Event Point Damage

[INCLUDE:#ServerOnly]

![](PointDamage.png)

Point Damage とは、発射物、即着弾武器、そして近接武器などのことをいいます。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]出力ピン[/REGION] ||
| **Damage** | **Float** - アクタへ渡されているダメージの量。 |
| **Damage Type** | **Object** `DamageType` - 処理中のダメージに追加データを格納するオブジェクトです。 |
| **Hit Location** | **Vector** - ダメージが適用されている位置。 |
| **Hit Normal** | **Vector** - コリジョンの方向。 |
| **Hit Component** | **PrimitiveComponent** - ヒットされた実行中のアクタのコンポーネント。 |
| **Bone Name** | **Name** - ヒットされたボーンの名前。 |
| **Shot from Direction** | **Vector** - ダメージが与えられた方向。 |
| **Instigated By** | **Actor** - ダメージに反応するアクタ。ダメージを与えるために銃を発砲したり手榴弾を投げたりするアクタになります。 |
| **Damage Causer** | **Actor** - ダメージを与えるアクタです。弾丸や爆発などがこれにあたります。|

[REGION:lightbox]
[![](PointDamageEX.png)(w:940)](PointDamageEX.png)
[/REGION]

_このサンプルでは、ダメージを受けた時、与えられたダメージがアクタのヘルス値から減算されますが、アクタの頭が撃たれた場合、アクタのヘルス値は -1 に設定されます。_

## Event Radial Damage

[INCLUDE:#ServerOnly]

![](RadialDamage.png)

このシーケンスに対する親アクタがラジアル ダメージを受けとるたびに ReceiveRadiusDamage アクタが呼び出されます。爆発によるダメージや、間接的に引き起こされたダメージに合わせてイベント処理する場合に便利です。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]出力ピン[/REGION] ||
| **Damage Received** | **Float** - イベントから受け取ったダメージの量。 |
| **Damage Type** | **Object** `DamageType` - 処理中のダメージに追加データを格納するオブジェクトです。 |
| **Origin** | **Vector** - ダメージが発生した 3D 空間に位置を表示します。 |
| **Hit Info** | **Struct** `HitResult` - Hit内に収集されたすべてのデータである「HitResult」を取り出して、この結果を「細分化して」個々のデータへのアクセスすることができます。 |
| **Instigated By** | **Controller** - ダメージを仕掛けるコントローラー (AI またはプレイヤー) です。 |
| **Damage Causer** | **Actor** - ダメージを与えるアクタです。弾丸、ロケット、レーザー、相手にパンチするキャラクターなどがこれに当たります。|

[REGION:lightbox]
[![](RadialDamageEX.png)(w:940)](RadialDamageEX.png)
[/REGION]

## Event Actor Begin Cursor Over

![](BeginCursorOver.png)

マウス インターフェースを使用中、マウスのカーソルがアクタにかざされるとこのイベントが実行されます。

![](BeginCursorOverEX.png)

_マウスがこのアクタに渡されると、 Highlight on the Dynamic Material Instance という名前のスカラー パラメータが 1.0 に設定されます。_


## Event Actor End Cursor Over

![](EndCursorOver.png)

マウス インターフェースを使用中にマウスのカーソルがアクタから離れるとこのイベントが実行されます。

![](EndCursorOverEX.png)

_これにより、アクタは **Target Notification** に格納されるように設定され、ゲーム中は非表示になります。_


## Event Begin Play
[EXCERPT:EventBegin]
![](BeginPlay.png)

ゲームが開始すると、このイベントがすべてのアクタにトリガーされます。ゲーム開始後にスポーンされたアクタはすべて、このイベントを直ちに呼び出します。

![](BeginPlayEX.png)

_プレイの開始に伴い、アクタはヘルス値を 1000 に、スコアを 0 に設定します。_
[/EXCERPT:EventBegin]

## Event End Play
[EXCERPT:EventEnd]
![](EndPlay.png)

アクタがワールド内で破壊されると、このイベントが実行されます。

![](EndPlayEX.png)

_アクタがワールドからいなくなると、 String が出力されて、イベントが呼び出されている理由を表示します。_

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]出力ピン[/REGION] ||
| **End Play Reason** | **enum** `EEndPlayReason` - Event End Play 呼び出しの理由を表示する列挙型変数。 |
[/EXCERPT:EventEnd]

## Event Destroyed

![](Destroyed.png)

アクタが破壊されると、このイベントが実行されます。

![](DestroyedEX.png)

_このサンプルでは、 **Score** の変数は **Value** プラス Score に設定されています。_

[REGION:warning]
	Destroyed Event は今後のリリースで廃止される予定です。Destroyed 関数の機能は Endplay 関数に組み込まれています。
[/REGION]

## Event Tick
[EXCERPT:EventTick]
![](Tick.png)

ゲームプレイのフレームごとに呼び出される単純なイベントです。 

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]出力ピン[/REGION] ||
| **Delta Seconds** | フレーム間の合計時間を出力します。 |

[![](TickEX.png)(w:940)](TickEX.png)

_このサンプルでは、Delta Seconds を使って「発射！」直前のティックでログに表示するカウントダウン タイマーを作ります。_
[/EXCERPT:EventTick]

## Event Receive Draw HUD

[REGION:note]
このイベントは、HUD クラスから派生する Blueprint クラスのみで利用できます。
[/REGION]

![](DrawHud.png)

このイベントは、ブループリントが HUD に描画できるようにするための指定イベントです。 HUD 描画ノードからは、このイベントそのものをノード作成用イベントにするように要求されます。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]出力ピン[/REGION] ||
| **Size X** | **Int** - レンダリング ウィンドウの幅 (ピクセル単位)。 |
| **Size Y** | **Int** - レンダリング ウィンドウの高さ (ピクセル単位)。 |


[REGION:lightbox]
[![](DrawHudEX.png)(w:940)](DrawHudEX.png)
[/REGION]

_このイベントは、レンダリング ウィンドウの中央に、クリック可能な **Hit Box** を作成します。後ろに赤いボックスが表示されます。_


## Custom Event

![Custom Event Node](Engine\Blueprints\UserGuide\Events\Custom\name_custom_event.png)

Custom Event ノードは専用のワークフローを持つ特殊なノードです。詳しくは [Custom Event] (Engine\Blueprints\UserGuide\Events\Custom) をご覧ください。
