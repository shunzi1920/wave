Availability:Public
Title: Blueprint Debugging
Crumbs:%ROOT%, Engine/Blueprints, Engine/Blueprints/UserGuide
Description:Pause execution using breakpoints to inspect graphs and the values of variables.

[EXCERPT:Overview]
Blueprint debugging is a very powerful feature that allows you to pause execution of the game in Play In Editor or Simulate In Editor mode and step through any graph of a Blueprint or Level Blueprint through the use of breakpoints.
[/EXCERPT:Overview]

[TOC (start:2)]

## Debugging Controls

The debug controls allow execution of the game in Play In Editor and Simulate In Editor mode to be controlled. The controls become enabled in the Blueprint Editor when the game is running. Different debugging-specific buttons appear on the 
[Toolbar](Engine/Blueprints/Editor/UIComponents\Toolbar) depending on the type of _Blueprint_ being debugged and the current state of the debugging. 

[REGION:fullwidth]
![](debugging_editor.png)
[/REGION:fullwidth]

Both the **Debug** tab, which can be opened from the **Blueprint Editor's** window menu, and the **Blueprint Debugger** will also display the context-sensitive debugging buttons when Simulate in Editor or Play in Editor modes are active.

The debug controls allow execution of the game in Play In Editor and Simulate In Editor mode to be controlled. The controls become enabled when the game is running. Different debugging-specific buttons appear on the 
[Toolbar](Engine/Blueprints/Editor/UIComponents\Toolbar) depending on the type of _Blueprint_ being debugged and the current state of the debugging. Some controls only become enabled when relevant, i.e. when a **breakpoint** is hit.

![](blueprint_debugger.png)

## Breakpoints

**Breakpoints** allow execution of the game to be paused at a certain point when running the game in the editor. All breakpoints for all graphs belonging to a Blueprint or Level Blueprint are displayed in the **Debug** tab. The names of the breakpoints in this list are hyperlinked allowing you to click on them and be taken directly to the node associated with the breakpoint in the **Graph** tab.

Breakpoints can be set on any node in the graph that gets executed, such as **Function Calls** and **Flow Control** operations, by **right-clicking** on the node and choosing **Add breakpoint**. When a breakpoint has been set on a node, a graphic is displayed in the upper-left corner of the node.

![Blueprint Debugging - Breakpoint Enabled](k2_breakpoint.png)

Breakpoints can be disabled as well by **right-clicking** on the node and choosing **Disable breakpoint** or clicking the icon next to the breakpoint in the **Debug** to toggle it off. This can also be done by **right-clicking** the breakpoint in the **Debug** tab and choosing **Disable breakpoint**.

![Blueprint Debugging - Breakpoint Disable Option](k2_breakpoint_toggleoff.png)

This leaves the breakpoint in place, but it will not stop the game when the node is executed. A disabled breakpoint is displayed as just an outline.

![Blueprint Debugging - Breakpoint Disabled](k2_breakpoint_disabled.png)

To enable a disabled breakpoint, **right-click** on the node and choose **Enable breakpoint** or click the icon next to the breakpoint in the **Debug** tab. This can also be done by **right-clicking** the breakpoint in the **Debug** tab and choosing **Enable breakpoint**.

![Blueprint Debugging - Breakpoint Enable Option](k2_breakpoint_toggleon.png)

Breakpoints can be removed by **right-clicking** the node or **right-clicking** the breakpoint in the **Debug** tab and choosing **Remove breakpoint**.

When a breakpoint is hit, the graph will focus on the node containing the breakpoint and an indicator is displayed on the breakpoint.

![Blueprint Debugging - Breakpoint Hit Indicator](k2_breakpoint_indicator.png)

In addition, the viewport will display an overlay to alert the player that the game has been paused for debugging.

![Blueprint Debugging - Viewport overlay](k2_debug_viewport.png)


## Debug Tab and Blueprint Debugger


[EXCERPT:DebugTab]

[EXCERPT:DebugPanel]
The **Debug** tab shows information designated as important by the designer in the form of breakpoints and watch values as well as a trace stack of all nodes belonging to the Blueprint that have been executed. This window also shows controls for controlling execution of the game when using breakpoints.
[/EXCERPT:DebugPanel]

### Watch Values

**Watch values** allow you to quickly and easily see the values of variables during execution. All watch values for the selected Actor as well as the Level Blueprint are displayed in the Debug window when debugging after a breakpoint is hit and update as you step through the graph.

![Blueprint Debugging - Watch Values](k2_watch_value.png)

Values being watched also have the ability to be displayed directly in the graph as a bubble above the variable.

![Blueprint Debugging - Watch Value Info Bubble](k2_watch_bubble.png)

To enable the display of the watch information bubble, simply click the magnifying glass (![Blueprint Debugging - Watch Value Button](k2_icon_watch.png)) next to the variable's name.

### Execution Trace

The **Execution Trace** stack shows a list of the nodes executed with the most recent at the top.

![Blueprint Debugging - Execution Trace Stack](k2_debug_exectrace.png)

This list updates as you step through the graph when debugging.

[/EXCERPT:DebugTab]
