Availability:Public
Title:マクロを作成する
Crumbs: %ROOT%, Engine, Engine\Blueprints, Engine\Blueprints\BP_HowTo
Description:マクロ作成とマクロ ライブラリ使用の例 
Related:Engine/Blueprints/UserGuide/Macros
Related:Engine/Blueprints/UserGuide/Types/MacroLibrary
Related:Engine/Blueprints


[TOC(start:2)]

## 概要

**マクロ** は実質上、折り畳まれたグラフのノードと同じです。マクロには、トンネル ノードで指定される入口ポイントと出口ポイントがあります。各トンネルは任意の数の実行ピンまたはデータピンを持つことができます。こうしたピンは別のブループリントやグラフで使用される場合、マクロノード上で見ることができます。

**マクロ ライブラリ** は、他のブループリントへノードとして配置可能なマクロのコレクションや自己完結型のグラフを保持するコンテナです。実行とデータ転送の両方の入出力を備えた一般的に使用するノードのシーケンスを格納できるため、時間節約の手段となります。

以下では、マクロの作成とマクロ ライブラリの作成の例を示します。 

## マクロを作成する

この例では、プレイヤー キャラクターがジャンプするのに十分なエネルギーを持っているかをチェックするために使用する **マクロ** を作成します。ジャンプするのに十分なエネルギーを持っていれば、プレイヤーからエネルギーを差し引き、その現在値を画面に出力し、ジャンプを許可します。十分なエネルギーがなければ、エネルギー不足である旨、画面に出力し、ジャンプさせないようにします。 

_ここでは **スターター コンテンツ** を有効にした状態で **Blueprint Third Person Project** を使います。_

1. **Content/ThirdPersonBP/Blueprints** フォルダで **ThirdPersonCharacter** ブループリントを開きます。 

1.	**[My Blueprint]** ウィンドウで、 **マクロ追加** ボタンをクリックします。 

	![](MacroHT1.png)

1.	新しいマクロが作成されます。それを選択して **F2** を押して **EnergyCheck** に名前を変更します。 

	![](MacroHT2.png)

1.	マクロを選択した状態で **[詳細]** パネルで、**[New]** ボタンをクリックして、入力を 1 つと出力を 2 つ作成します。 

	![](MacroHT3.png)

	これで、マクロ ノードの入出力ノードが作成されます。入出力ノードは、マクロのデータの受け渡しに利用できます。 

1.	**入力** については、テキスト ボックスに **BeginCheck** という名前を入力し、その型を **Exec** (実行可能ピン) に変更します。 

1.	**出力** については、両方とも **Exec** 型にし、ひとつを **HasEnergy** 、もうひとつを **NoEnergy** と名前を付けます。 

	![](MacroHT4.png)

	入力については、 **BeginCheck** と呼ばれる実行ピンを使用してマクロを開始します。プレイヤーがジャンプするのに十分なエネルギーを持っているかをチェックするスクリプトを作成します (十分なエネルギーを持っていれば、 **HasEnergy** ピンに接続します)。十分なエネルギーを持っていなければ、 **NoEnergy** ピンに接続します。このマクロを実装すると、**HasEnergy** ピンは **Jump** コマンドに送られます。**NoEnergy** ピンは送られません。 

1.	**[MyBlueprint]** ウィンドウ内で、 **[変数を追加]** ボタンをクリックします。

	 ![](AddVariableButton.png)

1.	変数に **Energy** と名前を付け、**Float** 型に変更し、ツールバーから **Compile** をクリックし、その値を **100** に設定します。 

	![](MacroHT5.png)

	これで、100 に初期化されたプレイヤーのエネルギーの変数が用意できました。 

1.	**Inputs** の隣のグラフで、**B** キーを押したまま、**左クリック** して、**Branch** ノードを作成します。 

1.	**Ctrl** を押したまま、 **My Blueprint** ウィンドウから **Energy** をグラフにドラッグして、それを **>** ノードに接続し、**Branch** に接続します。 

	![](MacroHT6.png)

	ここでは、Branch を使用して、エネルギーが > 0 であるかを判定し、 > 0 であれば **True** が実行されます。そうでなければ **False** が実行されます。 

1.	**Alt** を押しながら **Energy** 変数をドラッグして **Set** ノードを追加します。 

1.	**Ctrl** を押しながら **Energy** を再度ドラッグして、それを **-** ノードに接続して **10** に設定し、**Set** ノードに差し込みます。 

	![](MacroHT7.png)

	このスクリプトは、エネルギーが > 0 であれば現在のエネルギー値から 10 を差し引くことを表しています。 

1.	グラフを **右クリック** して **Print String** ノードを追加し、 **Energy** を **In String** ピン に接続します。 

	![](MacroHT8.png)

	**Conversion** ノードを追加します。これは、エネルギー値を画面に出力する文字列に変換し、その値を表示します。 

1.	**Branch** の **False** ピンから、**Print String** を追加し、ボックスに **Out of Energy!** というテキストを入力します。 

1.	両方の **Print String** ノードを **HasEnergy** ピンと **NoEnergy** ピンに接続します。 

	![](MacroHT9.png)

	これで、マクロは **Energy** 変数をチェックする (該当する場合はエネルギー変数から差し引く) ようにセットアップされ、プレイヤーが十分なエネルギーを持っているか否かを出力します。これはプレイヤーがジャンプできるか否かを判定するために使用されます。このマクロをジャンプ実行前の Jump キーを押した後に実装する必要があります。 

1.	 **EventGraph** で、**InputAction Jump** の **Pressed** ピンをドラッグし、 **EnergyCheck** を検索します。 

	![](MacroHT10.png)

	作成したマクロが **Utilities** の下に一覧表示され、その名前の隣にマクロ アイコンがあるのがわかります。 

1.	マクロを追加したら、このジャンプ スクリプトは以下のようになるはずです。 

	![](MacroHT11.png)

1.	**[Compile]** ボタンと **[Save]** ボタンをクリックし、ブループリントを閉じます。 

1.	メイン ツールバーで **Play** ボタンをクリックしてエディタで再生します。 

	[![](ExampleImage.png)](MacroExample.mp4)

	ジャンプするために **Spacebar** を押すと、画面の左上隅で **Energy** の値が画面に出力されます。**Energy** が 0 だと、もうジャンプできません。 
	これは、マクロを使用して、スクリプトを実行し、統合して単一ノードにし、イベント グラフとメイン キャラクターのスクリプトの可読性を向上させる基本的な例です。さらに、このマクロを他のインスタンスでも呼び出すことができます。例えば、プレイヤーのエネルギーを減らす他のアクションがあって、そのアクション (例、攻撃) を行うのに十分なエネルギーを持っているかをチェックしたい場合があるとします。このマクロを実行して、Attack キーを押した後に、プレイヤーが十分なエネルギーを持っているかをチェックし、 **HasEnergy** 実行ピンから攻撃を実行することができます。 





## マクロ ライブラリを作成する

この例では、複数ブループリント間で共有される 2 つのマクロを含むマクロ ライブラリを作成します。 

_ここでは **スターター コンテンツ** を有効にした状態で **Blueprint Third Person Project** を使います。_

1.	プロジェクト内で、**コンテンツ ブラウザ** で **右クリック** して、 **ブループリント** で **Blueprint Macro Library** を選択します。 

	![](MacroHT12.png)

1.	 **[Pick Parent Class]** ウィンドウで、 **Actor** を選択します。 

	![](MacroHT13.png)

	[Pick Parent Class] では、このライブラリ内のマクロがスコープ内であるかのように親クラスで宣言された変数や関数にアクセスできるようにします。例えば、ポーンに基づいたライブラリ内のマクロは、ポーンを渡されることなく **GetController** を呼び出すことが可能であり、ポーンまたは Character などの派生クラスに基づいたブループリントのコンテキスト メニューのオプションとしてのみ表示されます。

1.	マクロ ライブラリに名前を付けて、その上で **ダブルクリック** して開きます。 

	![](MacroHT14.png)

	マクロ ライブラリを開くと、通常のブループリントの外観とは少し違うことにお気づきになるかもしれません。 

1.	**My Blueprint** ウィンドウ内のマクロを選択し、**F2** を押して、**RotateMacro** に名前変更します。 

	![](RotateMacroRenamed.png)

1.	 Input の下にある **New** ボタンを 2 回クリックし、Outputs の下にある **New** ボタンを 2 回クリックしてそれぞれに 2 つのピンを作成します。 

	![](MacroHT16.png)

1.	**入力** については 1 つのピンを **In** と呼ばれる **Exec** に設定し、もう 1 つのピンを **Target** と呼ばれる **Actor** に設定します。 

1.	**出力** については、1 つのピンを **Out** と呼ばれる **Exec** に設定し、もう 1 つのピンを **Rotation** と呼ばれる **Rotator** に設定します。 

	![](MacroHT17.png)

	このスクリプトは指定したアクタを指定した量で回転させるために使用します。 

1.	グラフ内で **Target** ピンをドラッグして、**Get Actor Rotation** ノードを追加し、それを **Break Rot** ノードに接続します。 

	![](MacroHT18.png)

1.	グラフ内を **右クリック** して、**Make Rot** ノードを追加します。 

1.	**Break Rot** ノードの **Yaw** をドラッグして、値を **5** に設定した **+** ノードを追加します。 

1.	**+** ノードの出力を **Make Rot** ノードの **Yaw** に接続します。 

1.	**Break** ノードの **Pitch** と **Roll** を **Make** ノードに接続します。 

1.	以下のように残りのノードを接続します。 

	![](MacroHT19.png)

	上記のスクリプトで、アクタの Yaw の現在の回転に+ 5 を加え、それを **Rotation** 値として設定します。 

1.	別のマクロを作成するには **マクロ追加** ボタンをクリックし、**HideMacro** と名前をつけて 2 つの入力ピンを追加します。 

1.	入力ピンのひとつを **In** と呼ばれる **Exec** に、もうひとつを **Target** と呼ばれる **Actor** に設定します。 

	![](MacroHT20.png)

	必ずしも出力を持つ必要はありませんが、マクロを入力するための入力をいくつか持つ可能性は高くなります。 

1.	グラフ内の **In** ピンから **FlipFlop** ノードを追加します。 

	![](MacroHT21.png)

	上の画面ではマクロが入力されるたびに、A ピンと B ピンの間を循環します (A とB との間を切り替わります)。 

1.	 **Target** ピンを引き出して、**Set Actor Hidden in Game** ノードを探して追加します。 

1.	**A** ピンを **Set Actor Hidden in Game** ノードの入力ピンに接続し、**New Hidden** ボックスにチェックを入れます。 

1.	**B** ピンについても前の 2 つの手順を繰り返しますが、**New Hidden** ボックスにはチェックを入れないままにします。 

	![](MacroHT22.png)

	これでマクロは最初に実行されたときに Target Actor を Hidden に設定し、次回は表示します。 

1.	**コンテンツ ブラウザ** に進み、**Content/StarterContent/Blueprints** で **Blueprint_CeilingLight** ブループリントを開きます。 

	![](MacroHT23.png)

1.	**Event Graph** タブをクリックして、イベント グラフにジャンプします。 

	![](OnTheEventGraph.png)

1.	グラフ内を **右クリック** して、**RotateMacro** と **HideMacro** を追加します。 

	![](MacroHT24.png)

1.	グラフをどこか **右クリック** して、 **Event Tick** ノードを追加し、それを **RotateMacro** の入力ピンに接続します。 

1.	**Target** からドラッグして **Get Reference to Self** ノードを追加します。 

1.	**Self** ノードからドラッグして **Set Actor Rotation** ノードを追加します。 

1.	**Rotation** を、**RotateMacro** から **Set Actor Rotation** ノードの **New Rotation** に接続します。 

	![](MacroHT25.png)

	残りのワイヤーを接続後、スクリプトは上の画面のようになるはずです。 

1.	**Set Actor Rotation** の出力ピンから、1 秒に設定された **Delay** ノードを探し追加します。 

1.	**Completed** ピンから **HideMacro** ノードを追加し、 **Target** をドラッグし、**Get Reference to Self** を追加します。 

	![](MacroHT26.png)

	スクリプト全体は上の画面のようになるはずです。 

1.	**左クリック** し、スクリプト周囲に選択ボックスをドラッグし、**Control+C** キーを押してコピーします。 

1.	**コンパイル** し **保存** してから、ブループリントを閉じます。 

1.	**コンテンツ ブラウザ** の **Content/StarterContent/Blueprints** で **Blueprint_WallSconce** ブループリントを開きます。 

1.	グラフで **Control+V** を押してスクリプトを貼り付けます。 

1.	グラフ内を **右クリック** して、新しい **Event Tick** ノードを追加します。 

	![](MacroHT26.png)

	コピーしたスクリプトは上の画面のようになるはずです。 

1.	**コンパイル** し **保存** してから、ブループリントを閉じます。 

1.	**Blueprint_CeilingLight** と **Blueprint_WallSconce** をレベルにドラッグします。 

	![](MacroHT28.png)

1.	メイン ツールバーで **Play** ボタンをクリックしてエディタで再生します。 

	![](ExampleGIF.gif)(convert:false)

	エディタで再生する場合、両方のブループリント アクタが継続的に回転し、非表示と表示との間で切り替わります。アクタに行わせたい機能を実現する **マクロ ライブラリ** と **マクロ** を作成することで、各アクタに対してスクリプトを再作成する必要なく複数アクタにそうした機能を素早く提供することができました。次に何かをスクリプティングする場合には、他のブループリントが使用する可能性があることを念頭においてください。マクロやマクロ ライブラリを作成することは時間の節約につながりうるからです。 



