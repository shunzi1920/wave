Availability: Public
Title:Working with Variables
Crumbs:
Description:Demonstrates how to create and use Variables in Blueprints.

[OBJECT:Redirect]
[PARAM:link]
[%Engine/Blueprints/UserGuide/Variables:title%](Engine/Blueprints/UserGuide/Variables "%Engine/Blueprints/UserGuide/Variables:description%")
[/PARAM]
[/OBJECT]

<!--
[TOC(start:2)]

## Overview

**Variables** are properties that hold a value or reference to an **Object** or **Actor** in the game world. The variable can be set to only be accessible internally to the Blueprint that it resides in, or they can be made **Public** so that their values can be accessed and (or) modified externally by designers working with instances of the Blueprint placed in a level, making iteration on gameplay elements like health of an enemy that much easier to tune and tweak. 

This page will show you how to create and edit variables, work with the different variable settings, promoting input/output pins to a variable as well a sample use case for a variable which is used to define the color of a light when a player enters or exits a trigger box. 

## Creating Variables

[EXCERPT:creatingvars]

Creating a variable inside a Blueprint can be achieved by following the steps below. 

1.  [Create a Blueprint](Engine/Blueprints/UserGuide/Types/ClassBlueprint/Creation) and open it up to the **Graph** tab. 

1.  Create a new variable from the **MyBlueprint** window, by clicking on the **Add Button** ![](Engine\Blueprints\Editor\UIComponents\MyBlueprint\plus_Button.png) on the variable list header ![](Engine\Blueprints\Editor\UIComponents\MyBlueprint\myblueprint_variable.png).

	![](MyBlueprintPane_createVar.png)

1.  A new variable will be created, prompting you to enter a name for it. 

	![](HT5.png)

	Enter a name for your Blueprint, then proceed to the **Details** panel to adjust the properites of the variable.

1.  In the **Details** panel, there are several settings that can be used to define how your variable is used or accessed. 

	![](HT6.png)

	[REGION:note]
	In order to set the **Default Value** for a variable, you must first **Compile** the Blueprint. 
	[/REGION]

| Option | Description |
|----------------------|----------------------|
| **Variable Name** | The name of the variable. |
| **Variable Type** | Set the [Variable Type](Engine/Blueprints/UserGuide/Variables#variabletypes) via the dropdown menu and determine if the variable is an [Array](Engine/Blueprints/BP_HowTo/WorkingWithArrays) or not. |
| **Editable** | Whether the variable is publically editable on instances of the Blueprint. |
| **Tooltip** | Extra information about this variable, shown when the cursor is over the variable. |
| **Expose on Spawn** | Should the variable be exposed as a pin when spawning the Blueprint. |
| **Private** | Should the variable be private (derived Blueprints cannot modify it). |
| **Expose to Matinee** | Should the variable be exposed for **Matinee** to modify it. |
| **Config Variable** | Allows the variable to be set from a config file. |
| **Category** | Allows you to categorize the variable by a label given. Variables will be sorted by their label. |
| **Replication** | Should this variable be [Replicated](Gameplay/HowTo/Networking/ReplicateVariable/Blueprints) over the network or not. |

There are some serialization options that can be defined by expanding the **Details** panel as well. 

![](HT37.png)

Here you can set whether or not the variable is serialized and is zero-filled at load with the **Transient** option. You can also set whether or not the variable is serialized for saved games with the **SaveGame** option.

[/EXCERPT:creatingvars]

### Editable Variables

[EXCERPT:editingvars]

When a variable is set to **Editable**, this allows the variable to modified from outside of the Blueprint that the variable resides in. 

[REGION:raw]
![](HT21.png)
[/REGION]

You can set a variable to Editable from either the **Details** panel under the **Editable** setting, or by clicking the **Closed Eye** icon next to the variable inside the **MyBlueprint** window. When the eye icon is closed, the variable is currently set to non-editable (which is the default setting). When the eye icon is open, the variable is set to **Public** (or **Editable** as seen below). 

When a variable is set to Editable, you can set the value of the variable from the **Details** panel of the Main Editor window. 

![](HT23.png)

Above, the variable **LightColor** has been set to Editable and we can now set this value in the **Details** panel of the Level Editor. 

[/EXCERPT:editingvars]

### Variable Tooltips

You can also add a **Tooltip** for your variables that will appear when mousing over the variable in the editor. 

![](HT25.png)

You can add the **Tooltip** from the **Details** panel of the variable. When doing so, if the variable is set to **Public**, the Eye Icon will change from yellow to green indicating that a Tooltip has been written for the variable.

[REGION:raw]
![](HT24.png)
[/REGION]

### Expose on Spawn

The **Expose on Spawn** option allows you to set if the variable should be accessible at the time of spawning the Blueprint it sits in. 

![](HT26.png)

Above we have a variable called **LightColor** which is a Linear Color property that is set to **Expose on Spawn**. This variable is implemented in a Blueprint for a Point Light that uses the **Set Light Color** node and the **LightColor** variable to determine the color the light should be. 

Below, inside a different Blueprint, a script is used to spawn the Point Light Blueprint and since the **LightColor** variable was set to Expose on Spawn, the option to set the value is made available on the **Spawn Actor from Class** node, allowing us to set its color when the light spawns in the game world. 

![](HT27.png)

### Private Variables

With the **Private** option checked on a variable, this prevents the variable from being modified from external Blueprints. 

For example, we have a variable below that is not set to private: 

![](HT42.png)

Inside another Blueprint, we spawn the Blueprint that contains the variable, then off the **Return Value** we can access our variable. 

![](HT43.png)

If we were to set it Private however: 

![](HT41.png)

And spawn the Blueprint again and try to access that variable, we cannot. 

![](HT44.png)


### Expose to Matinee

In order for a variable to be affected by **Matinee**, you need to check the **Expose to Matinee** option. 

![](HT31.png)

Below, we have created a Matinee and added a track containing our Blueprint. We then want to modify the Linear Color variable in that Blueprint through Matinee and can do so by adding the **LinearColor Property Track**. 

![](HT32.png)

We are then prompted to select the LinearColor variable to modify from our Blueprint (our **LightColor**) property. 

![](HT33.png)

Once we have done so, we can then add keys to the track to modify the value of the variable over time. 

![](HT34.png)

[REGION:note]
See the [](Engine/Matinee) documentation for more information on working with **Matinee**. 
[/REGION]


## Promoting to Variables

[EXCERPT:promote]

You can also create variables by using the **Promote to Variable** option. 

**Right-click** on any input or output data pins on a Blueprint node and select the **Promote to Variable** option. 

![](HT38.png)

By **Right-clicking** on the **New Light Color** pin and selecting **Promote to Variable**, we can assign a variable as the **New Light Color** value. 

![](HT40.png)

Alternatively, you can drag off an input or output pin and select the **Promote to Variable** option. 

![](HT39.png)

[/EXCERPT:promote]


## Accessing Variables in Blueprints

When working with variables in Blueprints, typically you will be accessing them in one of two ways: by use the **Get** node (referred to as a Getter) to get the value of the variable or using the **Set** node (referred to as a Setter) to set the value of the variable. 

![](HT45.png)

You can create a **Set** node (1 above) or **Get** node (2 above) for a variable by **Right-clicking** in the graph and typing either **Set (variable name)** or **Get (variable name)**. Another method you can use is to hold down the **Ctrl** key and drag in the variable from the **MyBlueprint** window to create a **Get** node or hold down the **Alt** key and drag in the variable from **MyBlueprint** window to create a **Set** node. 

<!--
## Example Variable Usage

In this example, we will use a variable to change the color of a light when entering a trigger box. 

[REGION:note]
For this example, we created a new project using the **Blueprint Third Person** template. 
[/REGION]

1.  From the **Modes** menu inside your project, drag into your level a **Point Light** and a **Box Trigger**. 

	![](HT1.png)

	Above, we have positioned the light above the box and moved it into the corner of the level so that it is more visible. We also moved the Player Start near the light and trigger. 

1.	Select both the **Point Light** and the **Box Trigger**, then in the **Details** panel select **Replace With Composited Blueprint**. 

	![](HT2.png)

	This will create a new Blueprint and include these two assets as [Components](Engine/Blueprints/UserGuide/Components) of the Blueprint. 

1.	In the window that opens, give the Blueprint a name and select **Create Blueprint**. 

1.	Inside the **Components** tab of the Blueprint, click the **Box Trigger** and in the **Details** panel, un-check **Hidden in Game**. 

	![](HT3.png)

	This will allow the Box Trigger to appear in the level when the game is launched. 

1.  Create a new variable from the **MyBlueprint** window, by clicking on the **Add Button** ![](Engine\Blueprints\Editor\UIComponents\MyBlueprint\plus_Button.png) on the variable list header ![](Engine\Blueprints\Editor\UIComponents\MyBlueprint\myblueprint_variable.png).

	![](MyBlueprintPane_createVar.png)

1.	A variable will be added which you can rename as you wish, for this example call it **LightColor**. 

	![](HT5.png)

1.	In the **Details** panel, click the **Variable Type** dropdown menu and search for and select **LinearColor**. 

	![](HT8.png)

1.	Click the **Compile** button to compile the Blueprint. 

	![](HT10.png)

	With the Blueprint having successfully compiled, you can now set the **Default Value** of your variable. 

1.	In the **Details** panel under **Default Value**, click the color picker box. 

	![](HT11.png)

1.	In the **Color Picker** window, select any color for the variable's default color setting. 

	![](HT12.png)

1.	In the **MyBlueprint** window, **Right-click** on the **TriggerBox** and select **Add Event** then **Add OnComponentBeginOverlap**. 

	![](HT13.png)

1.	Repeat the previous step and select the **Add OnComponentEndOverlap**. 

1.	Hold **Ctrl** and drag in the **PointLight** component into the graph. 

	![](HT14.png)

1.	Hold **Ctrl** and drag in the **LightColor** variable. 

1.	Drag off the **PointLight** variable, search for and add the **Set Light Color** node. 

	![](HT15.png)

1.	Connect the **LightColor** to the **Set Light Color** node, then create another copy of the **Set Light Color** node and connect as shown.

	![](HT16.png)

1.	Hold **Alt** and drag in the **LightColor** variable.

	![](HT17.png)

1.	Click on the box in the **Set** node to define a color to set the variable to. 

1.	Copy the **Set** node and select a different color and hook them up as shown below. 

	![](HT18.png)

	Above we are setting the value of the **LightColor** property to one color when overlapping the box and another when leaving the box. 

1.	Click the **Compile** button, then close the Blueprint and click **Play** to play in the editor.

	![](HT19.png)(w:340)

	When you walk into the trigger box with the character, the color will change. 

	![](HT20.png)(w:340)

	When you leave the trigger box, the color should change to a different color. 

	-->

	-->
	

