INTSourceChangelist:2597114
Availability:Public
Title:配列の作業
Crumbs: %ROOT%, Engine, Engine\Blueprints, Engine\Blueprints\BP_HowTo
Description:複数の変数に配列を使用する様々な方法例。 
Related:Engine/Blueprints/UserGuide/Arrays
Related:Engine/Blueprints/UserGuide/Arrays/ArrayNodes

[TOC(start:2)]

プログラミング用語に精通していない場合、配列は単一エンティティ内に格納された同じ型の変数群と考えてください。例えば **Float** 配列を作成する場合、この配列は Float 変数のみを保持することができます。配列を作成したら、配列内の個々の変数にアクセスし、修正するか、配列内のすべてのアイテムを一度に修正します (これは個々に比べて一度にすべてを行うので繰り返しタスクを大幅に削減します)。 

このページでは、ブループリント内で配列の変数を作成する方法および **Make Array** ノードを使用して配列を作成する方法について学習します。配列の作成方法を理解したら、配列で作業するサンプル使用例として **配列の使用例** のセクションをご覧ください。 

[REGION:note]
詳しい情報と使用については [](Engine/Blueprints/UserGuide/Arrays) および [](Engine/Blueprints/UserGuide/Arrays/ArrayNodes) のドキュメントをご覧ください。 
[/REGION]

## 配列の変数

配列の変数を作成するには以下の手順に従います。 

1. ブループリント内で **変数を追加** ボタンをクリックし、変数に名前を付けて変数の型を設定します。 

	![](HT1.png)

	ここでは、**TextArray** と呼ばれる新規 **Text** 変数を作成しました。 

1. 変数の **[詳細]** パネルで **[Variable Type]** の隣にある **配列** グリッド ボタンをクリックします。 

	![](HT2.png)

	これは変数を配列に変換します。 

	![](HT3.png)

1. **[コンパイル]** ボタンをクリックします。配列にアイテムを追加するには、**Default Value** の下のゴミ箱の隣にある **+** 記号をクリックします。 

	![](HT4.png)

1. 配列にお好きな数だけ要素を追加し、その値をインデックスに代入できます。 

	![](HT5.png)

	例えば、最初のエントリを **Hello!** に、 2 番目のエントリは **GoodBye!** に、そして 3 番目のエントリを **...** に設定した Text Array を作成しました。この例は、セットアップした任意の条件に基づき様々なテキストでプレイヤーに反応するノンプレイヤー キャラクター (NPC) で使用できます。 

[REGION:note]
前の画像からわかるように、配列は **ゼロ基点** のインデックス値を使用します。これは、最初のインデックスが 1 ではなく **ゼロ** であることを意味します。配列を埋める場合には上記に注意してください。インデックス値で配列のアイテムにアクセスするからです。最初のアイテムにアクセスしたければ 1 ではなく 0 をインデックス値として入力する必要があります。配列の 2 つめのアイテムでは、インデックスとして 1 を入力します。以降、同様です。 
[/REGION]


## 配列を作る

配列変数を作成する場合、変数の Default Value 設定を介して配列に現れるアイテムを定義します。ランタイムに配列が追加される場合があるかもしれません。例えば、レベルに存在するアクタを配列に追加するなどがあります。この場合、配列変数を作成し、デフォルト値を割り当てる代わりに **Make Array** ノードを使用して一連のアイテムから配列を作成することができます。 

この例では、循環可能なカメラ アクタの配列をレベルに用意することを想定します。 

以下の手順では、**Make Array** ノードを使用する方法について説明します。 

1.	レベル内にいくつかのアクタを配置後 (この例ではカメラ アクタ)、そのすべてを選択し、**Level ブループリント** を開きます。 

1.	グラフ内で **右クリック** し、**Add Reference to Selected Actors** （選択したアクタに参照を追加する）オプションを選択します。 

1.	配列に含めるアクタへの参照ができたらグラフ内で **右クリック** し、**Make Array** ノードを追加します。 

	![](HT6.png)

1.	**Make Array** ノード上で **+** 記号をクリックし、配列に現れるアクタのそれぞれに必要な数のピンを追加します。 

	![](HT7.png)

1.	アクタのひとつからドラッグしてそれを **Make Array** ノード上の **0** (または任意の他のピン) に接続します。 

	![](HT8.png)

	これで配列が選択したアクタに対する配列の型に変換します (コンパイルするとエラーメッセージは消えます)。 

1.	残りのアクタを、 **Make Array** ノードの残りのピンに接続します。 

	![](HT9.png)

1.	 **Array** ピンを引き出して、**Get** ノードを探して追加します。 

	![](HT10.png)

	**Get** ノード上のボックスにある値は **Make Array** ノードからアクセス (Get) する **Index** (配列要素) です。 
	これは以下で **Get Camera** と呼ばれる変数として示される **整数型 (Integer)** 変数でもあります。 

	![](HT11.png)

	何らかの形式のスクリプトを通して、**Get Camera** を整数値に **Set** し、どの **Camera Actor** が **Get** ノードで選択されるかを効果的に変更できます。以下では、このセットアップを使用してレベルに配置されたカメラ アクタ間の循環を操作できます。 

	![](HT12.png)


## 配列の使用例

この例では、配列を使用してスポーンし、ランダムな位置でレベル内でランダムなブループリント効果を得ます。 

_この例では with **Starter Content** を有効にし、**Blueprint 3rd Person Template** プロジェクトを使用します。_

1.	プロジェクト内で **[Basic]** タブの **[Modes]** メニューから 5 つの **Target Point** をレベルにドラッグします。 

	![](HT13.png)

	これはエフェクトをスポーンする位置になります。 

1.	 **ワールド アウトライナー** で **Target** を検索します。 **Shift** を押したままの状態ですべてのターゲットポイントを選択します。 

	![](HT14.png)

1.	メイン ツールバー で **[ブループリント]** ボタンをクリックして、次に **Open Level ブループリント** をクリックします。 

	![](HT15.png)

1.	グラフ内で **右クリック** し、**[Create References to 5 selected Actors]** オプションを選択します。 

	![](HT16.png)

	これでレベル内の各ターゲット ポイントに対する参照が作成され、アクセスできるようになります。 

1.	グラフ内で再度 **右クリック** して、 **Make Array** ノードを探して選択します。 

	![](HT17.png)

1.	 **Make Array** 上の **+** 記号を 4 回クリックし、ノードにピンを追加し、ターゲット ポイントを接続します。 

	![](HT18.png)

1.	グラフ内で **右クリック** して、**F** キー イベントを追加し、**Pressed** ピンから **Spawn Actor from Class** ノードを追加します。 

	![](HT19.png)

1.	**[MyBlueprint]** ウィンドウで、新規に **Actor** クラス型の変数を作成します。 

	![](HT20.png)

1.	変数に **ActorClassArray** と名前を付けて、**Array** グリッド アイコンをクリックして変数を配列にします。 

1.	**Compile** をクリックして **Default Value** セクションで 3 つのアクタを追加します (Fire、Explosion、Spark のエフェクトを使用します)。 

	![](HT21.png)

1.	**Control** キーを押した状態で **ActorClassArray** 変数内からドラッグして **Get** ノードを追加します。 

1.	**Index** ピンから、 **Random Integer in Range** ノードを探して追加します。 

	![](HT22.png)

1.	**Max** 設定を **2** に設定します。**Get** ピンを **Spawn Actor** ノードの **Class** ピンに接続します。 

	![](HT23.png)

	**Max** 設定を **2** にしたのは、インデックス値が 0 から始まるため、2 に設定することでアクタのそれぞれを get できるからです。 

1.	**Make Array** ノードの out ピンからドラッグして、**Get ** ノードを追加します。 

1.	**Index** ピンから、**Max** を 4 に設定した状態で **Random Integer in Range** ノードを探して追加します。 

1.	**Get** ピンから、 **Get Actor Transform** ノードを探して追加します。 

	![](HT24.png)

	**Selected Actors** セクションではなく、Utilities にある **Get Actor Transform** を選択するようにします。 

	![](HT25b.png)

	上の画面のように 2 つの **Get Actor Transform** オプションがあります。これは、レベル内で選択状態になっているアクタがまだあるためです。赤いボックス内のノードはレベル内で選択されているすべてのアクタを変換しますが、それはここでは望ましくありません。**ワールド アウトライナー** に戻り、アクタの選択を解除するか、上の画面の黄色いボックスで囲まれたものを単独で使用することを選択します。 

1.	**Get Actor Transform** の **Return Value** を **Spawn Actor** ノードの **Spawn Transform** ピンに接続します。 

1.	**[コンパイル]** ボタンと **[Save]** ボタンをクリックするとグラフは以下のようになります。 

	![](HT25.png)

1.	ブループリントを閉じて、**[Play]** ボタンをクリックしてエディタで再生します。 

	![](ExampleGIF.gif)(convert:false)

	エディタで再生すると、**F** キーを押すたびにブループリントがランダムに選択され (配列に追加したものの中から選択)、ターゲット ポイントの配列からランダムな位置でスポーンされます。**F** キー イベントでアイテムをスポーンする代わりに、またスポーンされるエフェクトの代わりに、同じロジックを使用して、プレイヤーが得ることができる Health や Ammo (銃弾) のピックアップ、またプレイヤーが得ることができる Loot (略奪品) などランダムなスポーン位置をセットアップできます。 








