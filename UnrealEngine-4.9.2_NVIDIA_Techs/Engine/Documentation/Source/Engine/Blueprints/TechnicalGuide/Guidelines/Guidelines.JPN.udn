INTSourceChangelist:2515048
Availability:Public
Title:ブループリントフレンドリーな API を記述するためのガイドライン
Crumbs: %ROOT%, Programming, Engine/Blueprints/TechnicalGuide
Description:ブループリントフレンドリーなAPI を記述するためのヒントとトリック
Related:Engine/Blueprints/TechnicalGuide/ExtendingBlueprints 

[TOC (start:2 end:2)]

## 概要
C++ コードまたはブループリントどちらを使用するかの判断には2つの検討事項があります。
-	スピード
-	複雑な数式表現

これ以外の検討事項では、多くの要因はゲームの複雑度やチームの構成がポイントとなります。開発チームにプログラマーよりもアーティストが多数属する場合は、 
C++ コードのよりもブループリントを多用するはずです。その一方でプログラマーの人数が多いチームの場合は、おそらく C++ コードを活用したがるかと思います。弊社はその中間点でプロジェクトを進めてほしいと思っています。エピックが採用しているワークフローの大部分は、 
コンテントクリエーターが非常に複雑なブループリントを作成して、プログラマーがこの作業を分析して、新規 Blueprint ノードをコーディングすることにより大部分を C++ コードへ圧縮しすることにより、 
機能の大部分を新しく作成する C++ 関数へ移行させます。ブループリントを広範囲に渡って使用してから、複雑性が増すにつれて C++ コードを活用することが従うべきグッドプラクティスと言えます。 
これを慣行することにより、より簡潔な機能の表現式（そうでなければプログラマー以外の人々に複雑すぎます）を作成、さもなければ実行速度が C++ コードによる実装を決定付けます。


### スピード
スピードに関しては、ブループリントによる実行は C++ プログラムによる実行よりも実際に遅くなります。パフォーマンスが悪くなるということではなく、高頻度で多数の演算が必要な何かを行う場合は、 
ブループリントではなく C++ の使用が好ましい場合もあります。ただしチームとプロジェクトのパフォーマンス最も効果的にするために、2つの方法を組み合わせることも可能です。
たくさんの機能を設定したブループリントがある場合は、いくつかの機能を C++ へ転送して速度を上げることができますが、残りの機能は柔軟性を維持するためにブループリントで保持します。  
ブループリントのある操作に時間がかかりすぎている由がプロファイリングに表示された場合は、残りの機能はブループリントに残しつつ、この問題のある機能を C++ コードのセクションへ移行させることを検討してください。  

ブループリントのビジュアルススクリプティングで実行すると長時間かかるシステムの例に、無数のアクタをコントロールするクラウドシステムがあります。 
この場合は、C++ プログラムでパフォーマンスによる意思決定、パス設定、またその他の Crowd 関数を処理します。そして調整を行うパラメータとコントロールを行う関数をブループリントに公開することも可能です。

### 複雑度
表現式の複雑度に関しては、ブループリントよりも C++ コードの使用が簡単な場合もあります。ブループリントはたくさんのゲームプレイ要素を処理しますが、一部に関しては 
ノードでこれらを表現するのが簡単ではありません。大規模なデータセットの操作、文字列操作、大規模なデータセットの複雑な演算などはすべてとても複雑な処理であるため、ビジュアルシステムで行うのは容易ではありません。 
理解が簡単で状況を把握しやすいので、ブループリントの使用よりも C++ コードの記述による実装をおすすめします。複雑な数式表現も、ブループリントではなく
C++ コードでクラウドシステムの実装を行った方がよい別の理由です。 



## 例

C++ コードによる処理、またはブループリントによる処理が最善となるさまざまな機能があるため、ゲーム制作過程における C++ プログラマーとブループリント作成者の
共同作業例を紹介します。 

* プログラマーは一部のカスタムイベントを定義する Character クラスを C++ コードで実装して、この Character クラスをブループリントで拡張して、実際にメッシュとデフォルト設定を割り当てます。 
ShooterGame サンプルプロジェクトでこの実装例に似たプレイヤーキャラクターとエネミーボットをチェックしてみてください。

* C++ コードで基底クラスを実装するアビリティシステムを実装して、デザイナーは実際に機能するブループリントを作成します。StrategyGame サンプルは、 C++ コードでベースの砲塔を定義していますが、
フレームスロワー（火災放射器）、キャノン、arrow turrets のビヘイビアはすべてブループリントで定義します。

* "Collect" または "Respawn" 関数がブループリントに実装可能なイベントであるピックアップは、デザイナーがささまざまなパーティクルエミッタやサウンドエフェクトをスポーンするためにオーバーライドすることができます。ShooterGame と 
StrategyGame 両方にこの方法で実装したピックアップの例があります。


## ブループリント API の作成: ヒントとトリック

ブループリントに公開した API を作成するにあたり、プログラマーが検討しなくてはいけないいくつかのポイントがあります。

* 任意のパラメータはブループリントがうまく処理します。

		/**
		 * Prints a string to the log, and optionally, to the screen
		 * If Print To Log is true, it will be visible in the Output Log window.Otherwise it will be logged only as 'Verbose', so it generally won't show up.
		 *
		 * @param	InString		The string to log out
		 * @param	bPrintToScreen	Whether or not to print the output to the screen
		 * @param	bPrintToLog		Whether or not to print the output to the log
		 * @param	bPrintToConsole	Whether or not to print the output to the console
		 * @param	TextColor		Whether or not to print the output to the console
		 */
		UFUNCTION(BlueprintCallable, meta=(WorldContext="WorldContextObject", CallableWithoutWorldContext, Keywords = "log print", AdvancedDisplay = "2"), Category="Utilities|String")
		static void PrintString(UObject* WorldContextObject, const FString& InString = FString(TEXT("Hello")), bool bPrintToScreen = true, bool bPrintToLog = true, FLinearColor TextColor = FLinearColor(0.0,0.66,1.0));

* 関数に対し多数のリターンパラメータがある Favor 関数は構造体を返します。ノードにたくさんの出力ピンを作成する方法を示したスニペットがこちらです。

		UFUNCTION(BlueprintCallable, Category = "Example Nodes")
		static void MultipleOutputs(int32& OutputInteger, FVector& OutputVector);

* 既存関数に新規パラメータを追加することはできますが、パラメータを削除したり変更する場合は、オリジナル関数を使用せずに新規関数を追加しなくてはいけません。新規関数に関する情報がブループリントに表示されるように、必ず非推奨にしたメタデータを使用してください。

		UFUNCTION(BlueprintCallable, Category="Collision", meta=(DeprecatedFunction, DeprecationMessage = "Use new CapsuleOverlapActors", WorldContext="WorldContextObject", AutoCreateRefTerm="ActorsToIgnore"))
		static ENGINE_API bool CapsuleOverlapActors_DEPRECATED(UObject* WorldContextObject, const FVector CapsulePos, float Radius, float HalfHeight, EOverlapFilterOption Filter, UClass* ActorClassFilter, const TArray<AActor*>& ActorsToIgnore, TArray<class AActor*>& OutActors);

* 関数で列挙型変数を受け取らなくてはいけない場合は、簡単にノードを使用できる 'expand enum as execs' メタデータの利用を検討してください。 

		UFUNCTION(BlueprintCallable, Category = "DataTable", meta = (ExpandEnumAsExecs="OutResult", DataTablePin="CurveTable"))
		static void EvaluateCurveTableRow(UCurveTable* CurveTable, FName RowName, float InXY, TEnumAsByte<EEvaluateCurveTableResult::Type>& OutResult, float& OutXY);

* 完了までに長時間がかかるオペレーション (例えば move here) は Latent 関数でなければいけません。

		/** 
		 * 遅延が生じる潜在アクションを実行。
		 * 
		 * @param WorldContext	World context.
		 * @param Duration 		length of delay.
		 * @param LatentInfo 	The latent action.
		 */
		UFUNCTION(BlueprintCallable, Category="Utilities|FlowControl", meta=(Latent, WorldContext="WorldContextObject", LatentInfo="LatentInfo", Duration="0.2"))
		static void	Delay(UObject* WorldContextObject, float Duration, struct FLatentActionInfo LatentInfo );

* 可能な場合は、関数を共有ライブラリに格納することを検討してください。複数クラスで関数を簡単に使用できて、 'target' ピンを回避します。

		class DOCUMENTATIONCODE_API UTestBlueprintFunctionLibrary : public UBlueprintFunctionLibrary

* 可能な場合は、忘れずにノードを pure とマークしてください。配線が必要なノードの実行ピンがいらなくなります。

		/* Returns a uniformly distributed random number between 0 and Max - 1 */
		UFUNCTION(BlueprintPure, Category="Math|Random")
		static int32 RandomInteger(int32 Max);

* 関数を `const` として作成しても、実行ピンがない Blueprint ノードを作成します。 
		/**
		 * ワールド変換にアクタを取得
		 * @return The transform that transforms from actor space to world space.
		 */
		UFUNCTION(BlueprintCallable, meta=(DisplayName = "GetActorTransform"), Category="Utilities|Transformation")
		FTransform GetTransform() const;
