INTSourceChangelist:2519584
Availability:Public
Title:コリジョン反応
Crumbs: %ROOT%, Engine, Engine/Physics
Description:コリジョン、コリジョン反応、コリジョン プリセットのすべてについて

[VAR:Topic]
[OBJECT:Topic]
	[PARAM:image]
		![%Engine/Physics/Collision:title%](physics_topic.png)
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%\rendering_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Engine/Physics/Collision:title%
	[/PARAM]
	[PARAM:description]
		%Engine/Physics/Collision:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Physics/Collision]
	[/PARAM]
[/OBJECT]
[/VAR]

[TOC(start:2 end:3)]

## 概要

**コリジョン反応 (Collision Responses)** と **トレース反応 (Trace Responses)** は、アンリアル エンジン 4 がランタイム中にコリジョンとレイキャストをどのように処理するかの基礎となります。衝突しうるあらゆるオブジェクトは、**オブジェクト タイプ** と他のすべてのタイプのオブジェクト タイプとどのように相互作用するかを定義する一連の反応を得ます。コリジョンまたはオーバーラップのイベントが発生すると、それに伴う両方の (すなわちすべての) オブジェクトはブロック、オーバーラップ、または互いに無視することで影響を与える、または影響を受けるように設定することができます。

**トレース反応** は基本的に同様に機能します。ただし、トレース (レイキャスト) 自体は、トレース反応のタイプの 1 つとして定義されることがあり、アクタが _その_ トレース反応に基づき、ブロックまたは無視することができます。

## プロパティ

![](COL_collisionBasics.png)

プロパティ リストには、多数の物理関連のキーワードがあります。わかりづらいのは、 **Simple** と **Complex Collision** の2 つです。簡単にいうと、 **Simple Collision** の形状は、 [ボックス、KDOP、球体、カプセル、凸型](Engine/Physics\Collision\Reference) であり、そのすべてはスタティックメッシュのエディタで生成できます。**Complex Collision** はポリゴン毎で、物理をシミュレートするアクタに対しては絶対に使用しません (単にワールドの中を通り抜けます)。


| **プロパティ** | **説明** |
| -------- | ----------- |
| **Simulation Generates Hit Events** | この PrimitiveComponent を伴う物理コリジョンに対して **Event Hit** と **OnComponentHit** が呼び出されるかを表します。さらに簡単に説明すると、実際に物理的コリジョンがあったことをこのオブジェクトに通知します。しかし、これは単なる通知であり、静的環境と衝突するように設定された動的オブジェクトは、この設定に関わらず衝突し、単にこうしたイベントを発行しません。**これはグラウンドで砕け散る被破壊アクタを作成する場合には、重要です。** |
| **Generate Overlap Events** | **Event Actor Begin Overlap** や **Event Actor End Overlap** のように、オブジェクトにオーバーラップ イベントを生成させたい場合は、このフラグを **true** にする必要があります。さらに、オブジェクトを何らかの役に立つようにするには、そのオブジェクトを他のオブジェクトにオーバーラップできるようにする必要があります。
| [REGION:tablesection] &nbsp; [/REGION]||
| **Collision Presets** | 以下の **Collision Responses** に対するプリセットのコレクションです。プロファイルを変更または追加するために編集可能な INI ファイルがあります。**このポイントより下のものを編集するには、これを "Custom..." に設定する必要があります。**|
| **Collision Enabled** | ここでの 3 つの設定を以下に示します。|
| ^ | _No Collision_ - このオブジェクトに対してコリジョンだけでなく、トレースも物理も行われません。 |
| ^ | _No Physics Collision_ - このボディはレイキャスト、スイープ、オーバーラップに対してのみ使用されます。 |
| ^ | _Collision Enabled_ - このボディは物理シミュレーションとコリジョン クエリに使用されます。|
| **Object Type** | オブジェクトが移動する場合にオブジェクトをどのようなものと考えるかを定義します。これはどちらかといえば、静的または動的としてオブジェクトを定義するというよりもむしろ、以下のように相互作用に関わるものです。
| [REGION:tablesection] &nbsp; [/REGION]||
| **Collision Responses** | ここでチェックを入れた値が、以下に続く値にも設定されます。従って、ここで [Block] にチェックを入れると以降のすべての行の [Block] にもチェックが入ります。 |
| **Trace Responses** | あるトレースと相互作用する場合にオブジェクトがどのように振る舞うかを定義します (通常は単にレイキャストで行われます)。オブジェクトは任意のソースからのトレースを **Block**、**Overlap**、または単に **Ignore** するかを選択できます。デフォルトのトレース反応はその名前以外に違いはありません。コードまたはブループリントでは、いずれかを使用してあるものから他のものへのレイキャストをトレースできます。しかし、複数トレースのグループに対してはその名前が示すように使用する必要があります。**Trace Responses** のデフォルト反応は以下のとおりです。
| ^ | _Visibility_ - ある位置から別の位置へのトレースで、このタイプのトレースをブロックするオブジェクトが行く手を阻む場合、このトレースはブロックされます。 |
| ^ | _Camera_ - _Visibility_ と全く同じですが、カメラからトレースする場合に使用します。|
| **Object Responses** |あるオブジェクトが相互作用するオブジェクトを **Block**、**Overlap**、または単に **Ignore** するかを選択できます。**Object Responses** のデフォルト反応を以下に示します。
| ^ | _WorldStatic_ - ボリュームとワールド ジオメトリは _WorldStatic_ です。 | 
| ^ | _WorldDynamic_ -  _Pawns_, _PhysicsBodies_, _Vehicles_, _Destructible_ Actors の外側にアクタを移動します。エレベータのような感じです。| 
| ^ | _Pawn_ - キャラクター。 | 
| ^ | _PhysicsBody_ - ワールド内に存在するか、ワールド内でシミュレーションできる物理オブジェクト。 | 
| ^ | _Vehicle_ - _ポーン_ をビークルに乗り込ますことができるように持つとよい反応。 | 
| ^ | _Destructible_ -被破壊アクタ。 |
| [REGION:tablesection] &nbsp; [/REGION]||
| **Use CCD** | コンポーネントに対して **Continuous Collision Detection** を使用するかどうかに関わるものです。コリジョン検知の精度を高めます。|
| **Always Create Physics State** | (コリジョンとシミュレーションに関して) 常に **物理ステート** (コリジョンのプロパティ、質量、スリープ状態であるかなど、すべて **物理ステート** になります) を作成するかを示します。_false_ に設定されていると、このアクタでコリジョンまたはシミュレーションが、たとえばブループリントやコードによってアクティベートされるとこのステートはなおも生成されます。しかし、新規オブジェクトで完全な物理シミュレーションを行わなければならないためオーバーヘッドが幾分あります。これを **true** に設定すると、 (コリジョンまたはシミュレーションで) 実際に必要になった場合にオブジェクトの物理ステートを計算するためのオーバーヘッドを取り除くことによってパフォーマンスを向上させることができます。| 
| **Multi Body Overlap** | **true** の場合、マルチボディ コンポーネントであれば、このコンポーネントはオーバーラップする各物理ボディに対して個々のオーバーラップを生成します。個々のすべてのコリジョン形状を持つスケルタル物理アセットを考えてみてください。これが有効になっていれば、キャラクターの手が _独自_ のオーバーラップ イベントを生成するでしょう。これにより、具体的なケースで何をレポートするか、何を行うかについての制御を強化します。|
| **Check Async Scene on Move** | **true** とフラグ付けされている場合、物理シーン (同期と非同期) の両方でコンポーネントはコリジョンを探します。非同期シーンは主に被破壊アクタの破片によって使用されます。|
| **Trace Complex on Move** | **true** の場合、このコンポーネントと一緒にスイープするコンポーネントは、移動中に複雑なコリジョンに対してトレースします。 **Complex Collision** はわかりやすくいうと、面単位のコリジョンです。これに対して **Simple Collision** は、球体、カプセル、ボックス、生成された凸型の形状のコリジョンです。 |
| **Return Material on Move ** | **true** に設定すると、 **Hit Info** に物理マテリアルを返します。 |

一部のコンポーネントでは、コリジョン カテゴリにさらに多くの、または少ない数のオプションがあります。多くの場合、こうした特定のオプションはそのコンポーネントの適切なエディタでのみ表示されます。

| プロパティ | 説明 |
| -------- | ----------- |
| [REGION:tablesection] **Destructible Actor (被破壊アクタ)** [/REGION] || 
| **Collision Complexity** | Collision Trace の振る舞いで、デフォルトで単純な (凸型) 、複雑な (ポリゴン単位) コリジョンを分けます。**スタティックメッシュ** などのいくつかのオブジェクトのタイプでは、このプロパティはそのエディタ、および **スタティックメッシュ** カテゴリの **Body Setup** サブカテゴリのみでリストされます。 |
| ^ | _Default_ - 単純なコリジョンは単純なものとして、複雑なコリジョンは複雑なものとして維持します。 |
| ^ | _Use Simple Collision as Complex_ - あらゆるものに対して凸型コリジョンを使用します。 |
| ^ | _Use Simple Collision as Complex_ - 単純なコリジョンのニーズに対してもポリゴン単位のコリジョンを使用します。 |
| [REGION:tablesection] ** Physics Asset の Physics Body** [/REGION] ||
| **Colision Response** | 物理アセットで特定の物理ボディが衝突するかどうかを設定します。 |

## 相互作用

コリジョンがどのように処理されるかについて、覚えておくべきルールが以下のようにいくつかあります。

* **Blocking** は、Block に設定された 2 つ (以上) のアクタの間に自然に発生します。ただし、ブループリント、非破壊アクタ、トリガーなどで使用する **Event Hit** を実行するために **Simulation Generates Hit Events** を有効にする必要があります。
* アクタを **Overlap** に設定するとお互い **無視** しているかのように見えます。 **Generate Overlap Events** がない場合は、本質的に同じになります。
* 2 つ以上のシミュレーションしているオブジェクトが互いをブロックするには、互いのオブジェクト タイプをブロックするように両方のオブジェクトを設定する必要があります。
* 2 つ以上のシミュレーションしているオブジェクトに対して、1 つのオブジェクトががあるオブジェクトをオーバーラップするように設定され、2 つめのオブジェクトがもうひとつのオブジェクトをブロックするように設定されている場合、このオーバーラップは起こりますが、ブロックは起こりません。
* あるオブジェクトが他のオブジェクトを **ブロック** しても、特に高速で移動している場合は、オーバーラップ イベントは生成 **可能** です。
	* 1 つのオブジェクトがコリジョンとオーバーラップの両方のイベント持つのはお勧めしません。可能ではありますが、手作業が必要なものが多くあります。
* あるオブジェクトが無視に設定されていて他のオブジェクトがオーバーラップに設定されている場合、オーバーラップ イベントは発行されません。
* リストされている **Object Responses** は、単にデフォルトであり、オブジェクトが _何であるか_ には実際に影響を及ぼしません。詳細は、 [カスタム仕様のオブジェクトタイプとトレースチャンネル](#カスタム仕様のオブジェクトチャンネルとトレースチャンネル) を参照してください。

レベルをテストし、ワールドをあちこち見る目的では、以下のようになります。

* デフォルトの **Play In Editor** カメラはポーンです。従って、ポーンをブロックするように設定されたものがあればそれによってブロックされます。
* 何かを所有する前の **Simulate in Editor** カメラはポーンでは **ありません。**何でも自由にくっつけることが可能で、コリジョンやオーバーラップのイベントは作成しません。


## 一般的なコリジョンの相互作用

[REGION:note]
一般的なコリジョンの相互作用では、何もかもと完全に衝突するように **コリジョンを有効にする** が **Collision Enabled** に設定されていることを前提とします。コリジョンが無効な場合、すべての **Collision Responses** に対して **ignore** が設定されているかのようになります。
[/REGION]

この後のセクションでは、以下が何が起こっているかを説明するために使用するセットアップになります。

![](COL_setup.png)(w:940 convert:false)

球体は **PhysicsBody** であり、ボックスは **WorldDynamic** です。コリジョン設定を変更することで、数多くの振る舞いが得られます。

### コリジョン

<!--
[EXCERPT:spacerEX]
[REGION:raw]
![](spacer.png)
[/REGION]
[/EXCERPT:spacerEX]
 -->

[VAR:spacer]
[INCLUDE:#spacerEX]
[/VAR]

コリジョン設定を互いにブロックすると設定することで、衝突が得られます。これは、オブジェクトを互いに相互作用させるうえで最適です。

![](COL_collideNoEvent.png)(w:940 convert:false)

| 球体コリジョンのセットアップ| ウォール コリジョンのセットアップ |
| --- | ---- |
| ![](COL_collideNoEvent_Sphere.png)(w:300) %spacer% |![](COL_collideNoEvent_Box.png)(w:301) %spacer% |
| この場合、球体は **PhysicsBody** であり、 **WorldDynamic** (これはウォールを示します) をブロックするように設定されます。 | ウォールは **WorldDynamic** であり、 **PhysicsBody** アクタ (これは球体を示します) をブロックするように設定されます。 |

この場合、球体とウォールは単に衝突し、コリジョンの通知はこれ以上ありません。

### Collision と Simulation Generates Hit Events

コリジョンは有用であり、一般的に物理相互作用で最低限必要なものです。しかし、ブループリントまたはコードのセクションがトリガーできるように衝突した何かを報告したい場合、以下のようにします。

![](COL_collideEvent.png)(w:940 convert:false)

| 球体コリジョンのセットアップ| ウォール コリジョンのセットアップ |
| --- | ---- |
| ![](COL_collideEvent_Sphere.png)(w:300) %spacer%|![](COL_collideNoEvent_Box.png)(w:301) %spacer%|
|上記の例のように、球体は **PhysicsBody** であり、**WorldDynamic** (これがウォールを示します) をブロックをするように設定されます。この場合、この球体では **Simulation Generates Hit Events** も有効にし、球体が何かと衝突するたびに自己のためにイベントをトリガーするようにします。 | ウォールは **WorldDynamic** であり、 **PhysicsBody** アクタ (これは球体を示します) をブロックするように設定されます。ウォールは **Simulation Generates Hit Events** に設定されていないため、自己のためにイベントを生成しません。|

球体が **Simulation Generates Hit Events** に設定されている状態で、コリジョンがあったことを自己に知らせます。その球体のブループリントで **ReceiveHit** や **OnComponentHit** などのイベントを発行します。ボックスがコリジョンのためのイベントを持つ場合、何が起こったかを決して自己通知しないため発行しません。

さらに、剛体コリジョンをレポートしているオブジェクトは、すべてをレポートし、何かに単に座っている場合にレポートをスパムします。そのため、そのブループリントまたはコードで衝突しているものをフィルタリングするよう注意を払ったほうが良いでしょう。

### Overlap (オーバーラップ) と Ignore (無視) 

あらゆる用途と目的で、**Generate Overlap Events** が無効になっていることを前提として、**Overlap** と **Ignore** は全く同じように機能します。この場合、球体はボックスをオーバーラップまたは無視するように設定されます。

![](COL_ignore.png)(w:940 convert:false)




| 球体コリジョンのセットアップ| ウォール コリジョンのセットアップ |
| --- | ---- |
| ![](COL_OverlapNoEvent_Sphere.png)(w:300) %spacer% |![](COL_collideNoEvent_Box.png)(w:303) %spacer% |
| ここでは、球体は **WorldDynamic** アクタを「オーバーラップ」するように設定されますが (ウォールのように)、**Generate Overlap Events** は有効になっていません。球体に関しては何にも衝突せず、オーバーラップもせず、ウォールを事実上、無視します。 | ウォールは **WorldDynamic** であり、 **PhysicsBody** アクタ (これは球体を示します) をブロックするように設定されます。上記のように、両方のアクタが互いの各オブジェクト タイプをブロックするように設定する必要があります。そうでない場合、衝突しません。 |

もしくは、以下のようにします。

| 球体コリジョンのセットアップ| ウォール コリジョンのセットアップ |
| --- | ---- |
| ![](COL_ignore_sphere.png)(w:300) %spacer% |![](COL_collideNoEvent_Box.png)(w:303) %spacer% |
|球体は **WorldDynamic** アクタ (ウォールと同様) を無視するように設定され、ウォールを通過します。 | ウォールは **WorldDynamic** であり、 **PhysicsBody** アクタ (これは球体を示します) を「ブロック」するように設定されます。上記のように、両方のアクタが互いの各オブジェクト タイプをブロックするように設定する必要があります。そうでない場合、衝突しません。 |



### Overlap と Generate Overlap イベント

フレーム毎に発行可能なコリジョンとは異なり、オーバーラップ イベントは **ReceiveBeginOverlap** と **ReceiveEndOverlap** であり、こうした特定のケースでのみ発行します。

![](COL_overlapEvent.png)(w:940 convert:false)

| 球体コリジョンのセットアップ| ウォール コリジョンのセットアップ |
| --- | ---- |
| ![](COL_OverlapEvent_Sphere.png)(w:300) %spacer% | ![](COL_collideNoEvent_Box.png)(w:303) %spacer% |
|球体は **WorldDynamic** アクタ (ウォールと同様) を「オーバーラップ」するように設定され、何かをオーバーラップするときに自己のためにイベントを生成します。 | ウォールは **WorldDynamic** であり、 **PhysicsBody** アクタ (これは球体を示します) を「ブロック」するように設定されます。上記のように、両方のアクタが互いの各オブジェクト タイプをブロックするように設定する必要があります。そうでない場合、衝突しません。しかし、**オーバーラップ** はここで起こり、球体に対するイベントが発行されます。|

 
## カスタム仕様のオブジェクトチャンネルとトレースチャンネル

6 つのオブジェクト レスポンス チャンネルと 2 つのトレース レスポンス チャンネルでは、作成したいものに対して詳細度が不十分な場合があります。そのような時のためにあるのが、プロジェクト設定のコリジョン エディタです。**[Edit メニュー]** -> **[プロジェクト設定]** -> **[コリジョン]** でアクセスできます。

![](COL_projectSettings_1.png)

[REGION:lightbox]
[![](COL_projectSettings_2.png)(w:940)](COL_projectSettings_2.png)
[/REGION]

ここから新規オブジェクト レスポンス チャンネルとトレース レスポンス チャンネルを追加することができます。**[New Object Channel...]** または **[New Trace Channel...]** ボタンをクリックして、名前を付け、 **Default Response** を選択し **Accept** をクリックします。

![](COL_customChannel.png)

カスタム仕様のオブジェクト レスポンス チャンネルとトレース レスポンス チャンネルは 18 まで持つことができます。

### プリセット

カスタム仕様のプリセットでは、 **Preset** カテゴリを展開し **[新規...]** ボタンをクリックしても設定可能です。

![](COL_customPresets.png)

ここでは、プリセットの命名、コリジョンの有効化または無効化、プリセットのオブジェクト タイプの選択、そして選択中のオブジェクト タイプに対する各レスポンス チャンネルのビヘイビアの定義が可能です。

