INTSourceChangelist:2608234
Availability: Public
Title:콜리전 반응
Crumbs: %ROOT%, Engine, Engine/Physics
Description:콜리전, 콜리전 반응, 콜리전 프리셋에 대한 모든 것입니다.

[VAR:Topic]
[OBJECT:Topic]
	[PARAM:image]
		![%Engine/Physics/Collision:title%](physics_topic.png)
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%\rendering_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Engine/Physics/Collision:title%
	[/PARAM]
	[PARAM:description]
		%Engine/Physics/Collision:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine/Physics/Collision]
	[/PARAM]
[/OBJECT]
[/VAR]

[TOC(start:2 end:3)]


**Collision Responses** (콜리전 반응)과 **Trace Responses** (트레이스 반응)은 언리얼 엔진 4 의 실시간 콜리전 및 레이 캐스팅 처리에 있어서의 기본을 이룹니다. 
충돌 가능한 모든 오브젝트는 **Object Type** (오브젝트 타입)과, 다른 모든 오브젝트 유형과 어떻게 상호작용하는지를 나타내는 일련의 반응(response) 속성을 갖습니다. 
콜리전 또는 오버랩 이벤트가 발생되면, 관련된 양쪽 (또는 모든) 오브젝트는 서로 막기(block), 겹침(overlap), 무시(ignore) 에 의해 영향을 주거나 받도록 설정할 수 있습니다.

**트레이스 반응** 은 기본적으로 같은 방식으로 작동하지만, 트레이스 (레이 캐스트) 자체가 하나의 트레이스 반응 유형으로 정의되어, 
액터 자신의 **트레이스 반응** 에 따라 트레이스를 막거나 무시할 수 있다는 점에서 다릅니다.

## 프로퍼티

![](COL_collisionBasics.png)

마지막으로 한 가지, 프로퍼티 리스트에 있는 한아름 키워드 중 딱 와닿지 않는 것이 두 가지, **Simple** / **Complex Collision** (단순 / 복합 콜리전)입니다. 
간단히 말하자면 **단순 콜리전** 모양은 박스, KDOP, 구체, 캡슐, 컨벡스 등 스태틱 메시 에디터에서 만들 수 있는 모양을 말합니다. 
**복합 콜리전** 은 폴리곤 단위이며, 피직스 시뮬레이션중인 액터에는 절대로 사용되지 않습니다 (그냥 월드를 뚫고 떨어집니다).


| **프로퍼티** | **설명** |
| -------- | ----------- |
| **Simulation Generates Hit Events** | 시뮬레이션이 적중 이벤트 생성 - 이 플래그는 이 프리미티브 컴포넌트에 관련된 피직스 콜리전에 대해 **Event Hit** 와 **On Component Hit** 를 호출할지를 나타냅니다. 좀 더 쉬운 용어로 풀자면, 이 오브젝트에 실제로 물리 충돌이 일어났다 "알려주는" 것입니다. 그러나 이는 단지 노티파이일 뿐이기에, 정적인 환경과 충돌하도록 설정된 동적인 오브젝트는 이 세팅과 무관하게 충돌할 뿐, 그냥 그 이벤트를 발동하지는 않습니다. |
| **Generate Overlap Events** | 오버랩 이벤트 생성 - 오브젝트가 **Event Actor Begin Overlap** 이나 **Event Actor End Overlap** 와 같은 오버랩 이벤트를 생성하도록 하려는 경우, 이 플래그를 True 로 설정해 줘야 합니다. 게다가 해당 오브젝트는 다른 오브젝트와 오버랩 가능해야 어떠한 의미가 있을 수 있습니다. |
| [REGION:tablesection] &nbsp; [/REGION]||
| **Collision Presets** | 콜리전 프리셋 - 아래 **콜리전 반응** 에 대한 프리셋 모음입니다. 프로파일 변경이나 추가를 위해 편집할 수 있는 INI 파일이 있습니다. 이 시점 이후 무언가를 수정하려면, 이 옵션은 **Custom...** 으로 설정해야 합니다.|
| **Collision Enabled** | 콜리전 켜짐 - 여기에는 세 가지 세팅이 있습니다: |
| ^ | _No Collision_ - 이 오브젝트에 대해 콜리전이나 트레이스는 물론 피직스도 계산하지 않습니다. |
| ^ | _No Physics Collision_ - 이 바디는 레이캐스트, 스윕, 오버랩에만 사용됩니다. |
| ^ | _Collision Enabled_ - 이 바디는 피직스 시뮬레이션과 콜리전 퀴리에 사용됩니다. |
| **Object Type** | 오브젝트 유형 - 오브젝트 이동시 무엇으로 간주할 것인지를 정의합니다. 오브젝트가 스태틱이냐 다이내믹이냐 정의한다기 보다는, 아래와 같은 상호작용쪽에 좀 더 관련이 깊습니다. |
| [REGION:tablesection] &nbsp; [/REGION]||
| **Collision Responses** | 콜리전 반응 - 아래 모든 콜리전 반응을 체크된 값으로 설정합니다. 즉 여기에 "Block" 을 체크하면, 아래 모든 행 역시 "Block" 체크됩니다. |
| **Trace Responses** | 트레이스 반응 - 오브젝트가 (보통 레이 캐스트로만 수행되는) 트레이스와 상호작용할 때, 오브젝트의 동작을 정의합니다. 오브젝트는 주어진 소스에서의 트레이스를 **Block** 또는 **Overlap** 하거나 아니면 그냥 **Ignore** (무시)할 수도 있습니다. 디폴트 트레이스 반응에는 그 이름 말고는 차이점이 없습니다. 코드나 블루프린트 내, 어느 것을 사용해서든 한 곳에서 다른 곳으로의 레이 캐스트 트레이스가 가능합니다. 그러나 트레이스의 정리 차원에서, 그 이름이 암시하는 대로 사용해 줘야 합니다. **Trace Response** 에 대한 기본 반응은: |
| ^ | _Visibility_ - 한 위치에서 다른 위치로의 트레이스 중간에 이 트레이스 유형을 `block` 하(가로막)는 오브젝트가 있으면, 그 트레이스는 `block` 된(가로막힌) 것입니다. |
| ^ | _Camera_ - _Visibility_ 와 똑같으나, 카메라에서의 트레이스에 사용됩니다. |
| **Object Responses** | 오브젝트 반응 - 오브젝트는 상호작용하는 오브젝트를 **Block**, **Overlap**, **Ignore** (막기, 겹치기, 무시)하도록 선택할 수 있습니다. **Object Responses** 에 대한 기본 반응은: |
| ^ | _WorldStatic_ - 볼륨과 월드 지오메트리는 _WorldStatic_ 입니다. | 
| ^ | _WorldDynamic_ - _Pawn_, _PhysicsBody_, _Vehicle_, _Destructible Actor_ 이외의 움직이는 액터, 즉 엘리베이터 같은 것입니다. |
| ^ | _Pawn_ - 캐릭터 입니다. | 
| ^ | _PhysicsBody_ - 월드에서 시뮬레이션 되는 또는 가능한 피직스 오브젝트 입니다. |
| ^ | _Vehicle_ - _Pawn_ 이 점프해 들어갈 수 있도록 하기에 좋은 반응입니다. |
| ^ | _Destructible_ - 파괴가능 액터입니다. | 
| [REGION:tablesection] &nbsp; [/REGION]||
| **Use CCD** | CCD 사용 - 이 컴포넌트에 **Continuous Collision Detection** (연속 콜리전 감지) 사용을 할 것인지 입니다. 콜리전 감지 정확도를 높입니다. |
| **Always Create Physics State** | 항상 피직스 스테이트 생성 - 항상 (콜리전과 시뮬레이션에 대해) **피직스 스테이트** 를 생성할 것인지를 나타냅니다. False 로 설정되면 이 액터에서 콜리전 또는 시뮬레이션이 활성화되는 경우, 블루프린트나 코드를 통해 스테이트가 계속해서 생성되나, 전체 피직스 시뮬레이션에 새로운 오브젝트 작업을 해야 하기에 약간의 부하가 걸릴 것입니다. 이 옵션을 **True** 로 설정하면 퍼포먼스가 향상되는데, 실제로 오브젝트의 (콜리전이나 시뮬레이션 발생시) 피직스 스테이트 계산에 들어가는 부하가 제거되기 때문입니다. |
| **Multi Body Overlap** | 멀티 바디 오버랩 - _True_ 면 이 컴포넌트는 멀티 바디 컴포넌트인 경우 각각의 겹치는 피직스 바디에 대해 오버랩 이벤트를 별도로 생성합니다. 별개의 콜리전 모양을 지닌 스켈레탈 피직스 애셋의 경우를 생각해 봅시다. 이 옵션이 켜진 상태라면, 캐릭터의 손은 _별도의_ 오버랩 이벤트를 생성하게 됩니다. 고로 무엇을 보고받을 것인지, 그리고 그 경우 무슨 작업을 할 것인지를 보다 자세히 제어할 수 있습니다. |
| **Check Async Scene on Move** | 이동시 비동기 씬 검사 - 이 플래그가 **True** 설정되면 컴포넌트는 양쪽 피직스 (동기와 비동기) 씬에서 콜리전을 확인합니다. 디스트럭터블 액터의 깨진 조각에 대해서는 비동기 씬이 주로 사용됩니다. |
| **Trace Complex on Move** | 이동시 컴플렉스 트레이스 - 이 옵션을 **True** 로 설정하면 이 컴포넌트를 가진 컴포넌트 스윕은 이동 도중 컴플렉스 콜리전에 대해 트레이스 합니다. **컴플렉스 콜리전** 이란 간단히 면 단위 콜리전, **심플 콜리전** 은 구체, 캡슐, 박스, 생성된 컨벡스 모양을 말합니다. |
| **Return Material on Move ** | 이동시 머티리얼 반환 - True 로 설정하면 **Hit Info** 의 피직스 머티리얼을 반환합니다. |

일부 컴포넌트의 콜리전 카테고리에는 옵션이 적거나 많을 수 있으며, 대다수의 경우 이와 같이 매우 구체적인 옵션들은 해당 컴포넌트에 적합한 
에디터에만 표시됩니다.

| 프로퍼티 | 설명 |
| -------- | ----------- |
| [REGION:tablesection] **피직스 애셋 내 피직스 바디** [/REGION] ||
| **Collision Response** | 콜리전 반응 - 피직스 애셋 내 특정 피직스 바디가 충돌 할것인지 말것인지 입니다. |

## 상호작용

콜리전 처리 방식에 있어 몇 가지 유념해야 할 규칙이 있습니다:

* **Blocking** (블로킹)은 Block (블록)으로 설정된 액터 둘 (이상) 사이에 자연스럽게 일어납니다. 하지만 **Simulation Generates Hit Events** (시뮬레이션이 적중 이벤트 생성) 옵션을 켜 줘야 **Event Hit** (적중 이벤트)가 실행되어 블루프린트, 디스트럭터블 액터, 트리거 등에 사용 가능합니다.
* 액터를 **Overlap** (오버랩)으로 설정하면 종종 서로 **Ignore** (무시) 설정된 것처럼 보이지만, **Generate Overlap Events** (오버랩 이벤트 생성)이 없다면 본질적으로 같습니다.
* 둘 이상의 시뮬레이션 오브젝트가 서로를 블로킹하는 경우, 둘 다 각각의 오브젝트 유형을 블로킹하도록 설정해 줘야 합니다.
* 둘 이상의 시뮬레이션 오브젝트에 대해, 하나는 오브젝트를 오버랩 하도록, 다른 하나는 블록 하도록 설정한 경우, 블록이 아닌 오버랩 이벤트만 발생합니다.
* 오브젝트에 **블록** 설정이 되어 있다 할 지라도, 특히나 고속 이동중인 경우에는 오버랩 이벤트가 생성될 수도 있습니다.
	* 한 오브젝트에 콜리전 이벤트와 오버랩 이벤트가 둘 다 있는것은 추천하지 않습니다. 가능은 하지만, 수동 처리해 줘야 하는 부분이 많습니다.
* 하나의 오브젝트는 무시, 다른 오브젝트는 오버랩으로 설정된 경우, 오버랩 이벤트는 발동되지 않습니다.
* 나열된 **Object Responses** 은 그저 기본값일 뿐, 오브젝트가 실제 무엇인지에 대해서는 영향을 끼치지 못합니다. 커스텀 [오브젝트 유형 및 트레이스 채널](#커스텀오브젝트채널및트레이스채널) 셋업 관련 상세 정보는 

레벨 테스트나 월드를 둘러보기 위해서는:

* 기본 **에디터에서 플레이** 카메라는 폰 입니다. 고로 폰을 막도록 설정된 것에 막힐 수 있습니다.
* 별도 가공 이전의 **에디터에서 시뮬레이트** 카메라는 폰이 **아닙니다*. 모든 것을 자유로이 가르며 다닐 수 있으며, 콜리전이나 오버랩 이벤트를 생성하지 않습니다.


## 흔한 콜리전 상호작용

[REGION:note]
이 상호작용은 모든 오브젝트가 다른 모든 것과 충돌하도록 **Collision Enabled** 옵션을 **Collision Enabled** 로 설정한 것입니다. 콜리전이 
꺼져 있다면, 모든 **Collision Respones** 에 대해 **무시** 설정한 것과 같습니다.
[/REGION]

다음 섹션의 경우 벌어지는 일에 대한 설명이 되는 셋업은 이렇습니다:

![](COL_setup.png)(w:940 convert:false)

구체는 **PhysicsBody**, 박스는 **WorldDynamic** 이며, 그 콜리전 세팅을 바꾸므로써 몇 가지 동작이 가능합니다.

### 콜리전

<!--
[EXCERPT:spacerEX]
[REGION:raw]
![](spacer.png)
[/REGION]
[/EXCERPT:spacerEX]
 -->

[VAR:spacer]
[INCLUDE:#spacerEX]
[/VAR]

양쪽 콜리전 세팅을 단순히 서로 블로킹 하도록 설정해 주기만 해도, 오브젝트끼리의 상호작용 느낌을 내기 좋은 콜리전이 생깁니다:

![](COL_collideNoEvent.png)(w:940 convert:false)

| 구체 콜리전 셋업 | 벽 콜리전 셋업 |
| --- | ---- |
| ![](COL_collideNoEvent_Sphere.png)(w:300) %spacer% |![](COL_collideNoEvent_Box.png)(w:301) %spacer% |
| 이 경우 구체는 **PhysicsBody** 이며, (벽인) **WorldDynamic** 을 `block` 하도록 설정되었습니다. | 벽은 **WorldDynamic** 이며, (구체인) **PhysicsBody** 를 `block` 하도록 설정되었습니다. |

이렇게 되면 구체와 벽은 단순히 충돌만 하게 되며, 그 이상의 콜리전에 대한 알림이 생기지 않습니다.

### 콜리전 및 시뮬레이션이 적중 이벤트 생성

일반적으로 콜리전만으로도 충분하고 물리적 상호작용의 아주 기본적인 요소긴 하지만, 블루프린트나 코드 부분이 발동될 수 있도록 무언가가 충돌한 것을 
**보고** 하도록 한다면 어떨까요?

![](COL_collideEvent.png)(w:940 convert:false)

| 구체 콜리전 셋업 | 벽 콜리전 셋업 |
| --- | ---- |
| ![](COL_collideEvent_Sphere.png)(w:300) %spacer%|![](COL_collideNoEvent_Box.png)(w:301) %spacer%|
| 위의 예제에서처럼, 구체는 **PhysicsBody** 이며 (벽인) *WorldDynamic** 을 `block` 하도록 설정되었습니다. 그러나 구체에는 **Simulation Generates Hit Events** 도 켜져 있어서, 무언가와 충돌할 때마다 자신에 대해 이벤트를 발동시킵니다. | 벽은 **WorldDynamic** 으로, (구체인) **PhysicsBody** 액터를 `block` 하도록 설정되었습니다. **Simulation Generates Hit Events** 설정이 되어있지는 않기에 자체적으로 이벤트를 발생시키지는 않습니다. |

구체에는 **Simulation Generates Hit Events** 설정이 되어 있기 때문에, 자체적으로 충돌이 발생했다고 알려줍니다. 구체의 블루프린트에서 **ReceiveHit** 나 
**OnComponentHit** 같은 이벤트를 발생시킵니다. 그런데 만약 박스에 콜리전 이벤트가 있었대도 스스로 발생했다 알리는 것이 없으니 발동될 일이 없습니다.

게다가 리짓 콜리전을 보고하는 오브젝트는, 무언가의 위에 놓이면 스팸성 보고를 모두에게 날릴 것이기에, 블루프린트나 코드에서 충돌 대상을 
신중히 필터링해 주는 것이 최선입니다.

### 오버랩과 무시

모든 점에서 **Overlap** 과 **Ignore** 는, **Generate Overlap Events** 옵션이 꺼져 있다는 가정하에서는 완벽히 똑같이 작동합니다. 아래의 경우는 구체가 박스를 
오버랩 또는 무시하도록 설정한 경우입니다:

![](COL_ignore.png)(w:940 convert:false)




| 구체 콜리전 셋업 | 벽 콜리전 셋업 |
| --- | ---- |
| ![](COL_OverlapNoEvent_Sphere.png)(w:300) %spacer% |![](COL_collideNoEvent_Box.png)(w:303) %spacer% |
| 여기서 구체는 (벽과 같은) **WorldDynamic** 액터를 `overlap` 하도록 설정했으나, **Generate Overlap Events** 옵션이 켜져있지는 않습니다. 구체에 한해서라면 어느 것에도 충돌하거나 겹치지 않았으니, 사실상 벽을 무시합니다. | 벽은 **WorldDynamic** 이며 (구체와 같은) **PhysicsBody** 액터를 `block` 하도록 설정되어 있습니다. 위에서 언급했듯이, 두 액터 모두 서로의 오브젝트 유형을 블로킹하도록 설정해 줘야 하며, 그렇지 않은 경우 충돌하지 않습니다. |

또는:

| 구체 콜리전 셋업 | 벽 콜리전 셋업 |
| --- | ---- |
| ![](COL_ignore_sphere.png)(w:300) %spacer% |![](COL_collideNoEvent_Box.png)(w:303) %spacer% |
| 여기서 구체는 (벽과 같은) **WorldDynamic** 액터를 `무시` 하도록 설정했기에, 벽을 통과할 것입니다. | 벽은 **WorldDynamic** 으로, (구체와 같은) **PhysicsBody** 액터를 `블로킹` 하도록 설정됩니다. 위에 언급했듯이 두 액터 모두 서로의 오브젝트 유형을 블로킹하도록 설정해 줘야 하며, 그렇지 않은 경우 충돌하지 않습니다. |



### 오버랩과 오버랩 이벤트 생성

매 프레임 발동 가능한 콜리전과는 달리, 오버랩 이벤트는 **ReceiveBeginOverlap** 와 **ReceiveEndOverlap**, 즉 겹침이 시작될 때와 끝날 때만 발동됩니다.

![](COL_overlapEvent.png)(w:940 convert:false)

| 구체 콜리전 셋업 | 벽 콜리전 셋업 |
| --- | ---- |
| ![](COL_OverlapEvent_Sphere.png)(w:300) %spacer% | ![](COL_collideNoEvent_Box.png)(w:303) %spacer% |
| 여기서 구체는 (벽과 같은) **WorldDynamic** 액터를 `오버랩` 하도록 설정되었고, 무언가에 겹치면 스스로 이벤트를 생성합니다. | 벽은 **WorldDynamic** 으로 (구체와 같은) **PhysicsBody** 액터를 `블로킹` 하도록 설정되었습니다. 위에 언급했듯이 두 액터 모두 서로의 오브젝트 유형을 블로킹하도록 설정해 줘야 하며, 그렇지 않으면 충돌하지 않습니다. 하지만 여기서 **오버랩** 과, 구체에 대한 이벤트가 발동됩니다. |

 
## 커스텀 오브젝트 채널 및 트레이스 채널

6 개의 오브젝트 반응 채널과 2 개의 트레이스 반응 채널을 가지고는 만들고자 하는 것을 충분히 담지 못할 것 같은 때가 있을 것입니다. 이때 프로젝트 세팅의 
콜리전 에디터가 등장합니다. **편집 메뉴** -> **프로젝트 세팅** -> **콜리전** 으로 접근할 수 있습니다:

![](COL_projectSettings_1.png)

[REGION:lightbox]
[![](COL_projectSettings_2.png)(w:940)](COL_projectSettings_2.png)
[/REGION]

여기서 새로운 오브젝트 반응 채널과 트레이스 반응 채널을 추가할 수 있습니다. **새 오브젝트 채널...** 또는 **새 트레이스 채널...** 버튼을 누르고, 이름을 지어준 다음, 
**기본 반응** 을 선택한 다음 **수락** 을 누릅니다.

![](COL_customChannel.png)

커스텀 오브젝트 반응 채널 또는 커스텀 트레이스 반응 채널은 최대 18 개까지 만들 수 있습니다.

### 프리셋

커스텀 프리셋 역시도 여기서 **Preset** 카테고리를 펼친 다음 **New...** 버튼을 클릭하여 설정할 수 있습니다.

![](COL_customPresets.png)

여기서 프리셋 이름을 짓고, 콜리전을 켜거나 끄고, 프리셋의 오브젝트 유형을 선택한 다음, 마지막으로 선택된 오브젝트 유형에 대한 각 반응 채널의 행위를 
정의하면 됩니다.






