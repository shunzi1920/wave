INTSourceChangelist:2407668
Availability:Public
Title:Packaging Projects
Crumbs: %ROOT%, Engine, Engine/Basics/Projects
Description:配布用のアンリアル ゲームプロジェクトのパッケージ処理

[TOC(start:2)]


## 概要

[EXCERPT:Intro]
アンリアルプロジェクトは、ユーザーへ配布する前に適切なパッケージ処理をしなくてはいけません。パッケージ処理を行うことで最新の全コードとコンテンツを保ち、対象プラットフォームで実行可能な正式なフォーマットを保証します。 
[/EXCERPT:Intro]

パッケージ処理のプロセスでは、いろいろなステップを実行します。プロジェクトがカスタムソースコードで記述されている場合、まず最初にコードをコンパイルします。そして、全ての必須コンテンツを対象プラットフォームで利用できるフォーマットへ変換 (いわゆるクック) しなくてはいけません。それが終わると、コンパイル済みのコードとクック済みのコンテンツは、Windows インストーラーのような配布可能なファイル群にまとめられます。


メインの **[File]** メニュー配下に、サブメニューを含んだ **[Package Project]** オプションがあります。サブメニューには、パッケージ処理の対象プラットフォームがすべて表示されます。パッケージ処理の目的は、単一マップではなくゲーム全体をテストすること、または 
提案や配布用のゲームを準備することです。

Android プラットフォームに関しては、複数の選択肢があります。詳細は、『Android Texture Formats』ページを参照してください。

パッケージ処理前に設定する **Advanced** オプションもいくつかあります。 

プラットフォームを選択すると、ゲームにコードが格納されている場合、エディタはゲームをコンパイル、ゲームデータ全てをクック、そしてコンテンツをパッケージ処理します。プロジェクトに Starter Content が含まれると処理速度が低下します。 
もしくは、ユーザーがたくさんのテスト / 仮コンテンツやマップを作成した場合も処理速度が低下します。




##パッケージの作成

特定のプラットフォームを対象にプロジェクトをパッケージ化するには、エディタのメインメニューで **File > Package Project > [PlatformName]** をクリックします。

![](packaging_menu.png)

ターゲット ディレクトリを選択するダイアログが表示されます。パッケージ処理が完了すると、選択したディレクトリ内にパッケージ化されたプロジェクトが格納されます。

ターゲット ディレクトリが確認されると、選択したプラットフォーム向けにプロジェクトの実際のパッケージ処理が開始します。パッケージ処理は時間がかかるためバックグラウンドで実行され、ユーザーはエディタを継続して使用することができます。エディタの右下隅に、処理の進捗を示す進行状況が表示されます。

![](progress.png)

この表示には現在アクティブなパッケージ処理を中止する [Cancel] ボタンがあります。また [Show Log] リンクをクリックすることにより、拡張した出力ログ情報を表示させることもできます。この出力ログの情報は、パッケージ処理が成功しなかった場合などの原因調査に役立ちます。

![](log.png)

経験の浅いユーザーに対する情報ですが、エラーや警告など最も重要なログ情報は正規のメッセージログに記録が残ります。

![](message_log.png)
 
## パッケージ化されたゲームの実行

パッケージ処理を行う時には、ユーザーが出力用のディレクトリを選択しました。パッケージ処理が正常に完了すると、パッケージ化されたゲームはプラットフォーム専用のサブディレクトリの中に入ります。例えば、 TappyChicken/Final を選択した場合、iOS ビルドは TappyChicken/Final/IOS に、  
Android ビルドは TappyChicken/Final/Android に入ります。選択したサブディレクトリへ移動すると、パッケージ処理済のゲームがプラットフォーム固有のフォーマットで見つかります。 
Android の場合、「.apk」、「.obb」、「.bat」ファイルがあります (デバイス上にゲームをインストールするために「.bat」ファイルを実行します)。IOS プラットフォームの場合、「.ipa」ファイルがあります。このファイルは、iTunes または Xcode 経由でインストールします。
作成されるファイルの数や種類は対象プラットフォームによって異なります。以下の画像は Windows 向けプロジェクトの出力例を示します。

![](results.png)

[EXCERPT:RunCooked]
**パッケージ化したゲームを実行する方法**

1. 以下のテーブルを参照してパッケージ化したゲームの実行ファイルを検索します。

	| Configuration | EXE Name                             | EXE Location |
	| ------------- | ------------------------------------ | --------------------------------------------------------------- |
	| Development   | [ProjectName].exe                    | [PackageDirectory]\WindowsNoEditor |
	| Shipping      | [ProjectName]-Win32-Shipping.exe.exe | [PackageDirectory]\WindowsNoEditor |

1. 実行ファイルを **ダブルクリック** してゲームを実行します。
[/EXCERPT:RunCooked]


## Distribution (分布)

IOS あるいは Android ゲームを App Store や Google Play Store にサブミットするには、ご自分のパッケージを Distribution モードで作成する必要があります。そのためには、**[Packaging]** メニューの **[Packaging Settings]** オプションの 
[Distribution] チェックボックスにチェックを入れます。これで最終パッケージが正しく署名されます。

IOS の場合、Apple の Developer サイトでディストリビューション証明書および モバイル プロビジョニングを作成する必要があります。開発証明書の場合と同ぢょうに証明書をインストールし、 
もう 1 つのファイルの隣に「Distro_」プレフィックスの付いた名前をディストリビューション プロビジョニングに付けます (「Distro_MyProject.mobileprovision」と「MyProject.mobileprovision」ができます)。

Android の場合、.apk を署名するキーを作成し、「SigningConfig.xml」と呼ばれるファイルでビルド ツールに情報を提供する必要があります。このファイルはインストール済みの「Engine」ディレクトリ (`Engine/Build/Android/Java`) 
に存在します。このファイルを編集すると、すべてのプロジェクトに適用されます。ただし、プロジェクトの「Build/Android」ディレクトリ (Java ディレクトリではない) にこのファイルをコピーすることができ、 
ファイルはそのプロジェクトのみに使用されます。キーを生成し、ファイルに入力する手順は、ファイルそのものの中に入っています。


## 詳細設定

メインメニューで **File > Package Project > Packaging Settings...** をクリックすると、いくつかの処理機能の詳細設定オプションが表示されます。

![](settings.png)

 現時点では以下のオプションを使用出来ます。

| オプション | 説明 |
| ------ | ----------- |
| Build Configuration | ユーザーのコードベースのプロジェクトをコンパイルするビルドのコンフィギュレーションです。デバッグ作業には [Debug] を選択、他の大半のプロジェクトは最小限のデバッグサポートを選択、より優れたパフォーマンスには [Development] を選択、そして最終出荷用ビルドには [Shipping] を選択します。 |
| Staging Directory | パッケージ化したビルドを格納するディレクトリです。ターゲットディレクトリの選択時に別のディレクトリが選択されると、このオプションは自動的に更新されます。 |
| Full Rebuild |全コードをコンパイルするか否かを設定します。無効な場合、修正されたコードのみがコンパイルされます。これによりパッケージ処理が迅速化する場合があります。出荷ビルドは、ビルド漏れや古いコンテンツを含まないためにも常にフルの再ビルドを実行してください。このオプションはデフォルト設定で有効です。 |
| Use Pak File | 個別ファイルまたは単一パッケージとして、プロジェクトのアセットをパッケージ化するか否かを設定します。有効な場合、各ファイル全てをコピーする代わりに、単一「.pak」ファイルへ全アセットを格納します。プロジェクトにたくさんのアセットファイルがある場合、全てのファイルの移動を省く「.pak」ファイルの利用が配布を容易にする場合もあります。このオプションはデフォルト設定で有効です。 |
[PUBLISH:Licensee]
| Directories to Always Cook | 常にクックが必要なファイル情報を含んだディレクトリのリストです。デフォルト設定は、パッケージング機能が自動的に検知してゲームで参照する全てのコンテンツをクックします。必須コンテンツの中には、カスタムスレート UI 向けのテクスチャなど、直接参照されないコンテンツもあります。このようなコンテンツが格納されているディレクトリは、パッケージに含まれるようにここにリスト表記します。 |
[/PUBLISH:Licensee]

[PUBLISH:Licensee]
##サポート プラットフォーム

このドキュメントの執筆時点のサポートプラットフォームは Windows のみです。他のサポートプラットフォーム、例えば iOS、PS4、Android などの追加プロセスを現在進めています。これらのプラットフォームは [Package Project] メニューへ現段階で表示されますが、グレーアウト表示されて選択することができません。

Windows インストーラーの作成はまだサポートされていません。パッケージ化されたファイルは、当分の間はステージング ディレクトリへコピーされます。
[/PUBLISH:Licensee]



## コンテンツのクック

新規または修正したゲーム コンテンツのイタレーション時に、まずステージン グディレクトリへ全部パッケージ処理した後でコンテンツのクックから実行するという冗長なパッケージ処理を開発者が行いたくない場合もあると思います。従って、 **File > Cook Content > [PlatformName]** をクリックすれば、特定のターゲットプラットフォームに対してパッケージ処理をせずにコンテンツのみをクックすることも可能です。

この機能により、プロジェクトに関係するローカル デベロッパーのワークスペースにあるコンテンツを更新され、アセットはステージング ディレクトリへコピーされないことにご注意ください。迅速にイタレーションを行うために、ローカル デベロッパーのワークスペースから直接ゲームを実行することができます。
