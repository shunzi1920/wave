INTSourceChangelist:2620109
Availability:Public
Title:5. Play in Editor（PIE）
Crumbs:%ROOT%, Programming, Programming/Tutorials, Programming/Tutorials/Components
Description:エディタ再生によるコードのテスト
バージョン:4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[前の手順](Programming\Tutorials\Components\4 "%Programming\Tutorials\Components\4:title%")
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[](Programming\Tutorials\Components\)
	[/PARAM]
	[PARAM:next]
		[次の手順](Programming\Tutorials\Components\6 "%Programming\Tutorials\Components\6:title%")
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

1. **アンリアルエディタ** で **Compile（コンパイル）** ボタンを押して変更したコードをロードします。

	[![](CompileFromEditor.png)](CompileFromEditor.png)

1. ワールドに **CollidingPawn** のインスタンスをドロップします。"C++ Classes/HowTo_Components/CollidingPawn" 配下の **コンテンツブラウザ** にクラスがあります。

	[![](ClassInContentBrowser.png)](ClassInContentBrowser.png)

	[![](LevelEditorBeforePlay.png)](LevelEditorBeforePlay.png)

1. **Play（再生）** を押すと、スフィアは WASD キーで移動、マウス操作で回転、そして例にあるテーブルやチェア、またはユーザーが配置するその他の物理オブジェクトなど、ワールドオブジェクトと平行に「衝突してスライド」します。スペースバーでスフィアに火を付ける（または火を消す）ことも出来ます！

	[![](CollidingAndOnFire.png)](CollidingAndOnFire.png)

----

**アンリアルエンジン4** は幅広い用途向けの **コンポーネント** を提供しています。これまでは一般的なコンポーネントをいくつか紹介しただけですが、その他にもたくさんのコンポーネントがあります。ビルトインコンポーネントを探索したり、独自のコンポーネントを記述してみてください！柔軟性に優れたパワフルな機能を提供するだけでなく、プロジェクトコードの管理と再利用に役立ちます。

[OBJECT:Section]
    [PARAMLITERAL:id]
    コード
    [/PARAMLITERAL]
    [PARAM:heading]
	    完成コード
    [/PARAM]
    [PARAM:content]
		**CollidingPawn.h**
			// Copyright 1998-2015 Epic Games, Inc.All Rights Reserved.

			#pragma once

			#include "GameFramework/Pawn.h"
			#include "CollidingPawn.generated.h"

			UCLASS()
			class HOWTO_COMPONENTS_API ACollidingPawn : public APawn
			{
				GENERATED_BODY()

			public:
				// Sets default values for this pawn's properties（このポーンのプロパティのデフォルト値を設定）
				ACollidingPawn();

				// Called when the game starts or when spawned（ゲーム開始またはスポーン時に呼ばれます）
				virtual void BeginPlay() override;
	// Called every frame（フレームごとに呼ばれます）

				virtual void Tick( float DeltaSeconds ) override;

				// Called to bind functionality to input（機能と入力を連結するために呼ばれます）
				virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;

				UParticleSystemComponent* OurParticleSystem;
				class UCollidingPawnMovementComponent* OurMovementComponent;

				virtual UPawnMovementComponent* GetMovementComponent() const override;

				void MoveForward(float AxisValue);
				void MoveRight(float AxisValue);
				void Turn(float AxisValue);
				void ParticleToggle();
			};

		**CollidingPawn.cpp**
			// Copyright 1998-2015 Epic Games, Inc.All Rights Reserved.

			#include "HowTo_Components.h"
			[INCLUDE:Included]
			#include "CollidingPawnMovementComponent.h"

			// Sets default values（デフォルト値を設定）
			ACollidingPawn::ACollidingPawn()
			{
 				// Set this pawn to call Tick() every frame.You can turn this off to improve performance if you don't need it.（このポーンがフレームごとにTick()を呼び出すように設定。必要なければパフォーマンスを向上させるためにオフにします）
				PrimaryActorTick.bCanEverTick = true;

				// Our root component will be a sphere that reacts to physics（ルートコンポーネントは物理に反応するスフィアになります）
				USphereComponent* SphereComponent = CreateDefaultSubobject<USphereComponent>(TEXT("RootComponent"));
				RootComponent = SphereComponent;
				SphereComponent->InitSphereRadius(40.0f);
				SphereComponent->SetCollisionProfileName(TEXT("Pawn"));

				// Create and position a mesh component so we can see where our sphere is（スフィアの位置が分かるようにメッシュコンポーネントを作成して配置します）
				UStaticMeshComponent* SphereVisual = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("VisualRepresentation"));
				SphereVisual->AttachTo(RootComponent);
				static ConstructorHelpers::FObjectFinder<UStaticMesh> SphereVisualAsset(TEXT("/Game/StarterContent/Shapes/Shape_Sphere.Shape_Sphere"));
				if (SphereVisualAsset.Succeeded())
				{
					SphereVisual->SetStaticMesh(SphereVisualAsset.Object);
					SphereVisual->SetRelativeLocation(FVector(0.0f, 0.0f, -40.0f));
					SphereVisual->SetWorldScale3D(FVector(0.8f));
				}

				// Create a particle system that we can activate or deactivate（アクティブまたは非アクティブに出来るパーティクルシステムを作成）
				OurParticleSystem = CreateDefaultSubobject<UParticleSystemComponent>(TEXT("MovementParticles"));
				OurParticleSystem->AttachTo(SphereVisual);
				OurParticleSystem->bAutoActivate = false;
				OurParticleSystem->SetRelativeLocation(FVector(-20.0f, 0.0f, 20.0f));
				static ConstructorHelpers::FObjectFinder<UParticleSystem> ParticleAsset(TEXT("/Game/StarterContent/Particles/P_Fire.P_Fire"));
				if (ParticleAsset.Succeeded())
				{
					OurParticleSystem->SetTemplate(ParticleAsset.Object);
				}

				// Use a spring arm to give the camera smooth, natural-feeling motion（カメラにスムースで自然な移動を再現するためにスプリングアームを使用）
				USpringArmComponent* SpringArm = CreateDefaultSubobject<USpringArmComponent>(TEXT("CameraAttachmentArm"));
				SpringArm->AttachTo(RootComponent);
				SpringArm->RelativeRotation = FRotator(-45.f, 0.f, 0.f);
				SpringArm->TargetArmLength = 400.0f;
				SpringArm->bEnableCameraLag = true;
				SpringArm->CameraLagSpeed = 3.0f;

				// Create a camera and attach to our spring arm（カメラを作成してスプリングアームに親子付け）
				UCameraComponent* Camera = CreateDefaultSubobject<UCameraComponent>(TEXT("ActualCamera"));
				Camera->AttachTo(SpringArm, USpringArmComponent::SocketName);

				// Take control of the default player（デフォルトプレイヤーをコントロール）
				AutoPossessPlayer = EAutoReceiveInput::Player0;

				// Create an instance of our movement component, and tell it to update the root.（Movementコンポーネントのインスタンスを作成してこれでルートの更新をします）
				OurMovementComponent = CreateDefaultSubobject<UCollidingPawnMovementComponent>(TEXT("CustomMovementComponent"));
				OurMovementComponent->UpdatedComponent = RootComponent;
			}

			// Called when the game starts or when spawned（ゲーム開始またはスポーン時に呼ばれます）
			void ACollidingPawn::BeginPlay()
			{
				Super::BeginPlay();
	}


			// Called every frame（フレームごとに呼ばれます）
			void ACollidingPawn::Tick( float DeltaTime )
			{
				Super::Tick( DeltaTime );

			}

			// Called to bind functionality to input（機能と入力を連結するために呼ばれます）
			void ACollidingPawn::SetupPlayerInputComponent(class UInputComponent* InputComponent)
			{
				Super::SetupPlayerInputComponent(InputComponent);

				InputComponent->BindAction("ParticleToggle", IE_Pressed, this, &ACollidingPawn::ParticleToggle);

				InputComponent->BindAxis("MoveForward", this, &ACollidingPawn::MoveForward);
				InputComponent->BindAxis("MoveRight", this, &ACollidingPawn::MoveRight);
				InputComponent->BindAxis("Turn", this, &ACollidingPawn::Turn);
			}

			UPawnMovementComponent* ACollidingPawn::GetMovementComponent() const
			{
				return OurMovementComponent;
			}

			void ACollidingPawn::MoveForward(float AxisValue)
			{
				if (OurMovementComponent && (OurMovementComponent->UpdatedComponent == RootComponent))
				{
					OurMovementComponent->AddInputVector(GetActorForwardVector() * AxisValue);
				}
			}

			void ACollidingPawn::MoveRight(float AxisValue)
			{
				if (OurMovementComponent && (OurMovementComponent->UpdatedComponent == RootComponent))
				{
					OurMovementComponent->AddInputVector(GetActorRightVector() * AxisValue);
				}
			}

			void ACollidingPawn::Turn(float AxisValue)
			{
				FRotator NewRotation = GetActorRotation();
				NewRotation.Yaw += AxisValue;
				SetActorRotation(NewRotation);
			}

			void ACollidingPawn::ParticleToggle()
			{
				if (OurParticleSystem && OurParticleSystem->Template)
				{
					OurParticleSystem->ToggleActive();
				}
			}

		**CollidingPawnMovementComponent.h**
			// Copyright 1998-2015 Epic Games, Inc.All Rights Reserved.

			#pragma once

			#include "GameFramework/PawnMovementComponent.h"
			#include "CollidingPawnMovementComponent.generated.h"

			/**
			 * 
			 */
			UCLASS()
			class HOWTO_COMPONENTS_API UCollidingPawnMovementComponent : public UPawnMovementComponent
			{
				GENERATED_BODY()
	public:

				virtual void TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override;	
			};

		**CollidingPawnMovementComponent.cpp**
			// Copyright 1998-2015 Epic Games, Inc.All Rights Reserved.

			#include "HowTo_Components.h"
			#include "CollidingPawnMovementComponent.h"

			void UCollidingPawnMovementComponent::TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)
			{
				Super::TickComponent(DeltaTime, TickType, ThisTickFunction);

				// Make sure that everything is still valid, and that we are allowed to move（全てがまだ有効で移動可能であることを確認）
				if (!PawnOwner || !UpdatedComponent || ShouldSkipUpdate(DeltaTime))
				{
					return;
				}

				// Get (and then clear) the movement vector that we set in ACollidingPawn::Tick（ACollidingPawn::Tickで設定した移動ベクターをGet（その後クリア））
				FVector DesiredMovementThisFrame = ConsumeInputVector().GetClampedToMaxSize(1.0f) * DeltaTime * 150.0f;
				if (!DesiredMovementThisFrame.IsNearlyZero())
				{
					FHitResult Hit;
					SafeMoveUpdatedComponent(DesiredMovementThisFrame, UpdatedComponent->GetComponentRotation(), true, Hit);

					// If we bumped into something, try to slide along it（何かとぶつかった場合は、ぶつかった対象物に沿ってスライド）
					if (Hit.IsValidBlockingHit())
					{
						SlideAlongSurface(DesiredMovementThisFrame, 1.f - Hit.Time, Hit.Normal, Hit);
					}
				}
			};


    [/PARAM]
[/OBJECT]

%Steps%
