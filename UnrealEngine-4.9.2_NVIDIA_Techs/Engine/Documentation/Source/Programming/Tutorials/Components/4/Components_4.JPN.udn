INTSourceChangelist:2620109
Availability:Public
Title:4.ポーンとコンポーネントの併用
Crumbs:%ROOT%, Programming, Programming/Tutorials, Programming/Tutorials/Components
Description:ポーンの機能、入力設定、コンポーネントの併用
バージョン:4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[前の手順](Programming\Tutorials\Components\3 "%Programming\Tutorials\Components\3:title%")
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[](Programming\Tutorials\Components\)
	[/PARAM]
	[PARAM:next]
		[次の手順](Programming\Tutorials\Components\5 "%Programming\Tutorials\Components\5:title%")
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

1. カスタム仕様の **Pawn Movement Component** を使用するために、まずコンポーネントを追跡する **Pawn** クラスを追加します。"OurParticleSystem" 変数を追加した付近の、 「CollidingPawn.h」 ファイルのクラス定義の下に以下のコードを追加します。

		class UCollidingPawnMovementComponent* OurMovementComponent;

1. コンポーネントを追跡するクラスを配置したら、新規変数に格納する **Colliding Pawn Movement Component** を作成しなくてはいけません。 「 `CollidingPawn.cpp` 」ファイルを開いて、コードで新規クラスの参照が出来るようにファイル上にある "#include "GameFramework/Pawn.h" 行の下に以下を追加します：

		#include "CollidingPawnMovementComponent.h"
[REGION:warning]
コンパイラーエラーが生じるため、リストの最後の #include が 「generated.h」でなくてはいけません (この場合は #include "CollidingPawn.generated.h" ).
[/REGION]

	Pawn Movement Component の作成と、このコンポーネントと Pawn の関連付けはシンプルな作業です。**ACollidingPawn::ACollidingPawn** の下に以下のコードを追加します：

		// Create an instance of our movement component, and tell it to update the root.（Movementコンポーネントのインスタンスを作成してこれでルートの更新を伝えます）
		OurMovementComponent = CreateDefaultSubobject<UCollidingPawnMovementComponent>(TEXT("CustomMovementComponent"));
		OurMovementComponent->UpdatedComponent = RootComponent;

	[REGION:note]これまでの **コンポーネント** と違って、このコンポーネントを独自のコンポーネント階層に親子付けする必要はありません。理由は、その他のコンポーネントは本質的に物理ロケーションを必要とするあらゆる種類の **Scene Components** だからです。しかし **Movement Controllers** は Scene Components ではないため物理オブジェクトを表現しません。そのためコントローラーには物理位置に存在したり、別の **コンポーネント** に親子付けするという概念があてはまりません。[/REGION]

1. Pawn には **GetMovementComponent** と言う関数があります。この関数は **Pawn** が現在使用中の Pawn Movement Component にアクセスするために、エンジン内のその他のクラスの有効化に使用します。カスタム Pawn Movement Component を返すようにこの関数をオーバーライドする必要があります。「CollidingPawn.h」ファイルのクラス定義に以下のコードを追加します：

		virtual UPawnMovementComponent* GetMovementComponent() const override;

	そして「CollidingPawn.cpp」ファイルにオーバーライド関数の定義を以下のように追加します：

		UPawnMovementComponent* ACollidingPawn::GetMovementComponent() const
		{
			return OurMovementComponent;
		}

1. 新規 Pawn Movement Component を追加したので、 Pawn が受け取る入力を処理するコードを作成します。「CollidingPawn.h」ファイルのクラス定義にいくつかの関数を定義することからスタートします：

		void MoveForward(float AxisValue);
		void MoveRight(float AxisValue);
		void Turn(float AxisValue);
		void ParticleToggle();

	「CollidingPawn.cpp」ファイルでこれらの関数の定義を以下のように追加します：

			void ACollidingPawn::MoveForward(float AxisValue)
			{
				if (OurMovementComponent && (OurMovementComponent->UpdatedComponent == RootComponent))
				{
					OurMovementComponent->AddInputVector(GetActorForwardVector() * AxisValue);
				}
			}

			void ACollidingPawn::MoveRight(float AxisValue)
			{
				if (OurMovementComponent && (OurMovementComponent->UpdatedComponent == RootComponent))
				{
					OurMovementComponent->AddInputVector(GetActorRightVector() * AxisValue);
				}
			}

			void ACollidingPawn::Turn(float AxisValue)
			{
				FRotator NewRotation = GetActorRotation();
				NewRotation.Yaw += AxisValue;
				SetActorRotation(NewRotation);
			}

			void ACollidingPawn::ParticleToggle()
			{
				if (OurParticleSystem && OurParticleSystem->Template)
				{
					OurParticleSystem->ToggleActive();
				}
			}

1. あとは関数と入力イベントをバインドするのみです。次のコードを **ACollidingPawn::SetupPlayerInputComponent** に追加しましょう：

		InputComponent->BindAction("ParticleToggle", IE_Pressed, this, &ACollidingPawn::ParticleToggle);

		InputComponent->BindAxis("MoveForward", this, &ACollidingPawn::MoveForward);
		InputComponent->BindAxis("MoveRight", this, &ACollidingPawn::MoveRight);
		InputComponent->BindAxis("Turn", this, &ACollidingPawn::Turn);

1. プログラミングが終了したので、 **アンリアルエディタ** に戻って **Compile（コンパイル）** ボタンを押して変更をロードします。

----

プログラミング作業は終了です。これでカスタム Pawn をワールドに配置してあちこちへ移動させることができます。

[OBJECT:Section]
    [PARAMLITERAL:id]
    コード
    [/PARAMLITERAL]
    [PARAM:heading]
	    完成コード
    [/PARAM]
    [PARAM:content]
		**CollidingPawn.h**
			// Copyright 1998-2015 Epic Games, Inc.All Rights Reserved.

			#pragma once

			#include "GameFramework/Pawn.h"
			#include "CollidingPawn.generated.h"

			UCLASS()
			class HOWTO_COMPONENTS_API ACollidingPawn : public APawn
			{
				GENERATED_BODY()

			public:
				// Sets default values for this pawn's properties（このポーンのプロパティのデフォルト値を設定）
				ACollidingPawn();

				// Called when the game starts or when spawned（ゲーム開始またはスポーン時に呼ばれます）
				virtual void BeginPlay() override;
	// Called every frame（フレームごとに呼ばれます）

				virtual void Tick( float DeltaSeconds ) override;

				// Called to bind functionality to input（機能と入力を連結するために呼ばれます）
				virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;

				UParticleSystemComponent* OurParticleSystem;
				class UCollidingPawnMovementComponent* OurMovementComponent;

				virtual UPawnMovementComponent* GetMovementComponent() const override;

				void MoveForward(float AxisValue);
				void MoveRight(float AxisValue);
				void Turn(float AxisValue);
				void ParticleToggle();
			};

		**CollidingPawn.cpp**
			// Copyright 1998-2015 Epic Games, Inc.All Rights Reserved.

			#include "HowTo_Components.h"
			[INCLUDE:Included]
			#include "CollidingPawnMovementComponent.h"

			// Sets default values（デフォルト値を設定）
			ACollidingPawn::ACollidingPawn()
			{
 				// Set this pawn to call Tick() every frame.You can turn this off to improve performance if you don't need it.（このポーンがフレームごとにTick()を呼び出すように設定。必要なければパフォーマンスを向上させるためにオフにします）
				PrimaryActorTick.bCanEverTick = true;

				// Our root component will be a sphere that reacts to physics（ルートコンポーネントは物理に反応するスフィアになります）
				USphereComponent* SphereComponent = CreateDefaultSubobject<USphereComponent>(TEXT("RootComponent"));
				RootComponent = SphereComponent;
				SphereComponent->InitSphereRadius(40.0f);
				SphereComponent->SetCollisionProfileName(TEXT("Pawn"));

				// Create and position a mesh component so we can see where our sphere is（スフィアの位置が分かるようにメッシュコンポーネントを作成して配置します）
				UStaticMeshComponent* SphereVisual = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("VisualRepresentation"));
				SphereVisual->AttachTo(RootComponent);
				static ConstructorHelpers::FObjectFinder<UStaticMesh> SphereVisualAsset(TEXT("/Game/StarterContent/Shapes/Shape_Sphere.Shape_Sphere"));
				if (SphereVisualAsset.Succeeded())
				{
					SphereVisual->SetStaticMesh(SphereVisualAsset.Object);
					SphereVisual->SetRelativeLocation(FVector(0.0f, 0.0f, -40.0f));
					SphereVisual->SetWorldScale3D(FVector(0.8f));
				}

				// Create a particle system that we can activate or deactivate（アクティブまたは非アクティブに出来るパーティクルシステムを作成）
				OurParticleSystem = CreateDefaultSubobject<UParticleSystemComponent>(TEXT("MovementParticles"));
				OurParticleSystem->AttachTo(SphereVisual);
				OurParticleSystem->bAutoActivate = false;
				OurParticleSystem->SetRelativeLocation(FVector(-20.0f, 0.0f, 20.0f));
				static ConstructorHelpers::FObjectFinder<UParticleSystem> ParticleAsset(TEXT("/Game/StarterContent/Particles/P_Fire.P_Fire"));
				if (ParticleAsset.Succeeded())
				{
					OurParticleSystem->SetTemplate(ParticleAsset.Object);
				}

				// Use a spring arm to give the camera smooth, natural-feeling motion（カメラにスムースで自然な移動を再現するためにスプリングアームを使用）
				USpringArmComponent* SpringArm = CreateDefaultSubobject<USpringArmComponent>(TEXT("CameraAttachmentArm"));
				SpringArm->AttachTo(RootComponent);
				SpringArm->RelativeRotation = FRotator(-45.f, 0.f, 0.f);
				SpringArm->TargetArmLength = 400.0f;
				SpringArm->bEnableCameraLag = true;
				SpringArm->CameraLagSpeed = 3.0f;

				// Create a camera and attach to our spring arm（カメラを作成してスプリングアームに親子付け）
				UCameraComponent* Camera = CreateDefaultSubobject<UCameraComponent>(TEXT("ActualCamera"));
				Camera->AttachTo(SpringArm, USpringArmComponent::SocketName);

				// Take control of the default player（デフォルトプレイヤーをコントロール）
				AutoPossessPlayer = EAutoReceiveInput::Player0;

				// Create an instance of our movement component, and tell it to update the root.（Movementコンポーネントのインスタンスを作成してこれでルートの更新をします）
				OurMovementComponent = CreateDefaultSubobject<UCollidingPawnMovementComponent>(TEXT("CustomMovementComponent"));
				OurMovementComponent->UpdatedComponent = RootComponent;
			}

			// Called when the game starts or when spawned（ゲーム開始またはスポーン時に呼ばれます）
			void ACollidingPawn::BeginPlay()
			{
				Super::BeginPlay();
	}


			// Called every frame（フレームごとに呼ばれます）
			void ACollidingPawn::Tick( float DeltaTime )
			{
				Super::Tick( DeltaTime );

			}

			// Called to bind functionality to input（機能と入力をバインドするために呼ばれます）
			void ACollidingPawn::SetupPlayerInputComponent(class UInputComponent* InputComponent)
			{
				Super::SetupPlayerInputComponent(InputComponent);

				InputComponent->BindAction("ParticleToggle", IE_Pressed, this, &ACollidingPawn::ParticleToggle);

				InputComponent->BindAxis("MoveForward", this, &ACollidingPawn::MoveForward);
				InputComponent->BindAxis("MoveRight", this, &ACollidingPawn::MoveRight);
				InputComponent->BindAxis("Turn", this, &ACollidingPawn::Turn);
			}

			UPawnMovementComponent* ACollidingPawn::GetMovementComponent() const
			{
				return OurMovementComponent;
			}

			void ACollidingPawn::MoveForward(float AxisValue)
			{
				if (OurMovementComponent && (OurMovementComponent->UpdatedComponent == RootComponent))
				{
					OurMovementComponent->AddInputVector(GetActorForwardVector() * AxisValue);
				}
			}

			void ACollidingPawn::MoveRight(float AxisValue)
			{
				if (OurMovementComponent && (OurMovementComponent->UpdatedComponent == RootComponent))
				{
					OurMovementComponent->AddInputVector(GetActorRightVector() * AxisValue);
				}
			}

			void ACollidingPawn::Turn(float AxisValue)
			{
				FRotator NewRotation = GetActorRotation();
				NewRotation.Yaw += AxisValue;
				SetActorRotation(NewRotation);
			}

			void ACollidingPawn::ParticleToggle()
			{
				if (OurParticleSystem && OurParticleSystem->Template)
				{
					OurParticleSystem->ToggleActive();
				}
			}

		**CollidingPawnMovementComponent.h**
			// Copyright 1998-2015 Epic Games, Inc.All Rights Reserved.

			#pragma once

			#include "GameFramework/PawnMovementComponent.h"
			#include "CollidingPawnMovementComponent.generated.h"

			/**
			 * 
			 */
			UCLASS()
			class HOWTO_COMPONENTS_API UCollidingPawnMovementComponent : public UPawnMovementComponent
			{
				GENERATED_BODY()
	public:

				virtual void TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction) override;	
			};

		**CollidingPawnMovementComponent.cpp**
			// Copyright 1998-2015 Epic Games, Inc.All Rights Reserved.

			#include "HowTo_Components.h"
			#include "CollidingPawnMovementComponent.h"

			void UCollidingPawnMovementComponent::TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)
			{
				Super::TickComponent(DeltaTime, TickType, ThisTickFunction);

				// Make sure that everything is still valid, and that we are allowed to move（全てがまだ有効で移動可能であることを確認）
				if (!PawnOwner || !UpdatedComponent || ShouldSkipUpdate(DeltaTime))
				{
					return;
				}

				// Get (and then clear) the movement vector that we set in ACollidingPawn::Tick（ACollidingPawn::Tickで設定した移動ベクターをGet（その後クリア））
				FVector DesiredMovementThisFrame = ConsumeInputVector().GetClampedToMaxSize(1.0f) * DeltaTime * 150.0f;
				if (!DesiredMovementThisFrame.IsNearlyZero())
				{
					FHitResult Hit;
					SafeMoveUpdatedComponent(DesiredMovementThisFrame, UpdatedComponent->GetComponentRotation(), true, Hit);

					// If we bumped into something, try to slide along it（何かとぶつかった時に、ぶつかった対象物に沿ってスライド）
					if (Hit.IsValidBlockingHit())
					{
						SlideAlongSurface(DesiredMovementThisFrame, 1.f - Hit.Time, Hit.Normal, Hit);
					}
				}
			};


    [/PARAM]
[/OBJECT]

%Steps%
