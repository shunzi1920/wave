INTSourceChangelist:2555570
Availability:Public
Title:1.タイマーを使用したアクタの作成
Crumbs:%ROOT%, Programming, Programming/Tutorials, Programming/Tutorials/VariablesTimersEvents
Description:一定速度でコードを実行するタイマーを開始/停止する

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[プログラミングチュートリアルのホームページ](Programming\Tutorials\)
	[/PARAM]
	[PARAM:next]
		[次の手順](Programming\Tutorials\VariablesTimersEvents\2 "%Programming\Tutorials\VariablesTimersEvents\2:title%")
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

[REGION:tip] **アンリアルエンジン 4** 初心者の人は、最初に [%Programming\QuickStart:title% tutorial](Programming\QuickStart) をお読みください。このチュートリアルは、 プロジェクトの作成とプロジェクトにC++コードを追加できる方を想定しています。[/REGION]

1. まず「HowTo_VTE」という名前のスターターコンテンツを使用して、Basic Code（基本コード）プロジェクトを作成します。このチュートリアルでは「Countdown」と名前を付けます。

	[![](ChooseParentClass.png)](ChooseParentClass.png)

	[![](NameYourActor.png)](NameYourActor.png)

1. ゲームに表示するシンプルなカウントダウンタイマーの作成から始めます。「 `Countdown.h` 」ファイルのクラス定義の最後に以下の行を追加します：

		int32 CountdownTime;

		UTextRenderComponent* CountdownText;

		void UpdateTimerDisplay();

1. 「 `Countdown.cpp` 」ファイルに、レンダリング可能なテキスト **コンポーネント** を作成して、カウントダウン時間を3秒に初期化します。このタイプの **アクタ** には必要ないため **Ticking** はオフにします。 **ACountdown::ACountdown** は以下のような表示になります：

		PrimaryActorTick.bCanEverTick = false;

		CountdownText = CreateDefaultSubobject<UTextRenderComponent>(TEXT("CountdownNumber"));
		CountdownText->SetHorizontalAlignment(EHTA_Center);
		CountdownText->SetWorldSize(150.0f);
		RootComponent = CountdownText;

		CountdownTime = 3;

1. **ACountdown::UpdateTimerDisplay** は残り時間を示すテキスト、または時間切れの場合はゼロを表示しなくてはいけません。ゲームに **ACountdown** を初めてスポーンした時にこのコードを実行して、CountdownTime変数がゼロになるまで1秒に一回コードを実行します。

		void ACountdown::UpdateTimerDisplay()
		{
			CountdownText->SetText(FString::FromInt(FMath::Max(CountdownTime, 0)));
		}

1. 関数の実行に **Timer** を割り当てると、必ず **Timer Handle** が与えられます。カウントダウン終了時に **Timer** をシャットダウンするためにこのハンドルをしっかりと維持します。時間をカウントダウンする関数と、この関数をコントロールする **Timer Handle** を「 `Countdown.h` 」ファイルのクラス定義に追加しましょう。この作業を行うついでに、カウントダウンの終了時に何か特別なことを行う関数も追加しましょう。

		void AdvanceTimer();

		void CountdownHasFinished();

		FTimerHandle CountdownTimerHandle;

	「 `Countdown.cpp` 」ファイルに **ACountdown::AdvanceTimer** と **ACountdown::CountdownHasFinished** のボディを記述することもできます：

		void ACountdown::AdvanceTimer()
		{
			--CountdownTime;
			UpdateTimerDisplay();
			if (CountdownTime < 1)
			{
				//We're done counting down, so stop running the timer.（カウントダウン終了。タイマーを終了します）
				GetWorldTimerManager().ClearTimer(CountdownTimerHandle);
				CountdownHasFinished();
			}
		}

		void ACountdown::CountdownHasFinished()
		{
			//Change to a special readout（特別な読み出しに変更）
			CountdownText->SetText(TEXT("GO!"));
		}

1. 新しく更新した関数にコールを追加して、 **ACountdown::BeginPlay** のテキスト表示を初期化します。そして1秒に一回カウントダウンと更新を行うタイマーを設定します：

		UpdateTimerDisplay();
		GetWorldTimerManager().SetTimer(CountdownTimerHandle, this, &ACountdown::AdvanceTimer, 1.0f, true);

	[REGION:note]**アンリアルエディタ** の変数に設定する値は **BeginPlay** の前ではなくコンストラクタの後に割り当てられるため、表示は **ACountdown::ACountdown** ではなく **ACountdown::BeginPlay** で更新します。後にエディタへCountdownTime を公開する時にこれらの値を尊重します。[/REGION]

1. **アンリアルエディタ** へ移動して **Compile（コンパイル）** を押して、これまでの作業進捗を確認しましょう。

	[![](CompileFromEditor.png)](CompileFromEditor.png)

	更新した **ACountdown** クラスは **コンテンツブラウザ** から **レベルエディタ** へドロップが可能になります。

	[![](ClassInContentBrowser.png)](ClassInContentBrowser.png)

	[![](LevelEditorText.png)](LevelEditorText.png)

	[REGION:note]カウントダウンテキストは **ACountdown::ACountdown** ではなく **ACountdown::BeginPlay** で設定するため、デフォルトの "Text" は **レベルエディタ** に表示されます。[/REGION]
	**Play（再生）** を押すと、予定通りカウントダウンが始まって、 "3"、 "2"、 "1"、 最後に "GO!" となります。

----

この時点で、タイマーを使用するシンプルなクラスを既に作成済みです。プログラミングをしないユーザーは、カウントダウン時間を設定したり、カウントダウン終了時にビヘイビアを変更するともっと活用できます。次にこれらの機能をエディタに公開します。

[OBJECT:Section]
    [PARAMLITERAL:id]
    コード
    [/PARAMLITERAL]
    [PARAM:heading]
	    作業中のコード
    [/PARAM]
    [PARAM:content]
		**Countdown.h**
			// Copyright 1998-2015 Epic Games, Inc.All Rights Reserved.

			#pragma once

			#include "GameFramework/Actor.h"
			#include "Countdown.generated.h"

			UCLASS()
			class HOWTO_VTE_API ACountdown : public AActor
			{
				GENERATED_BODY()
	public:

				// Sets default values for this actor's properties（このアクタのプロパティのデフォルト値を設定）
				ACountdown();

				// Called when the game starts or when spawned（ゲーム開始またはスポーン時に呼ばれます）
				virtual void BeginPlay() override;
	// Called every frame（フレームごとに呼ばれます）

				virtual void Tick( float DeltaSeconds ) override;

				//How long, in seconds, the countdown will run（カウントダウンを実行する時間（秒））
				int32 CountdownTime;

				UTextRenderComponent* CountdownText;

				void UpdateTimerDisplay();

				void AdvanceTimer();

				void CountdownHasFinished();

				FTimerHandle CountdownTimerHandle;
			};


		**Countdown.cpp**
			// Copyright 1998-2015 Epic Games, Inc.All Rights Reserved.

			#include "HowTo_VTE.h"
			#include "Countdown.h"

			// Sets default values（デフォルト値を設定）
			ACountdown::ACountdown()
			{
 				// Set this actor to call Tick() every frame.You can turn this off to improve performance if you don't need it.（このポーンがフレームごとにTick()を呼び出すように設定。必要なければパフォーマンスを向上させるためにオフにします）
				PrimaryActorTick.bCanEverTick = false;
	CountdownText = CreateDefaultSubobject<UTextRenderComponent>(TEXT("CountdownNumber"));

				CountdownText->SetHorizontalAlignment(EHTA_Center);
				CountdownText->SetWorldSize(150.0f);
				RootComponent = CountdownText;

				CountdownTime = 3;
			}

			// Called when the game starts or when spawned（ゲーム開始またはスポーン時に呼ばれます）
			void ACountdown::BeginPlay()
			{
				Super::BeginPlay();
	UpdateTimerDisplay();

				GetWorldTimerManager().SetTimer(CountdownTimerHandle, this, &ACountdown::AdvanceTimer, 1.0f, true);
			}

			// Called every frame（フレームごとに呼ばれます）
			void ACountdown::Tick( float DeltaTime )
			{
				Super::Tick( DeltaTime );

			}

			void ACountdown::UpdateTimerDisplay()
			{
				CountdownText->SetText(FString::FromInt(FMath::Max(CountdownTime, 0)));
			}

			void ACountdown::AdvanceTimer()
			{
				--CountdownTime;
				UpdateTimerDisplay();
				if (CountdownTime < 1)
				{
					//We're done counting down, so stop running the timer.（カウントダウン終了。タイマーを終了します）
					GetWorldTimerManager().ClearTimer(CountdownTimerHandle);
					//Perform any special actions we want to do when the timer ends.（タイマー終了時に特別なアクションを実行）
					CountdownHasFinished();
				}
			}

			void ACountdown::CountdownHasFinished()
			{
				//Change to a special readout（特別な読み出しに変更）
				CountdownText->SetText(TEXT("GO!"));
			}


    [/PARAM]
[/OBJECT]

%Steps%
