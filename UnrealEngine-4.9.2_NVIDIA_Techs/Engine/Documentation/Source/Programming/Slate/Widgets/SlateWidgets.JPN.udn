INTSourceChangelist:2568526
Availability:Public
Title:スレート ウィジェットの例
Crumbs:%ROOT%, Programming, Programming/Slate, Programming/Slate/Widgets
Description:Slate Viewer Widget Galleryで実演されないレイアウトとウィジェットの複雑性
Version:4.4

[TOC (start:2)]

## 共通のスレート引数

以下の引数は作成する全てのウィジェットに共通しています。

* IsEnabled - ウィジェットの相互作用が可能か否かを指定します。無効にされている場合、グレーアウト表示されます。
* ToolTip - このウィジェットのツールヒントに使用するカスタムSToolTipウィジェットのタイプを指定します。指定しない場合、ToolTipは表示されません。
* ToolTipText - このウィジェットのツールヒントとして簡易なツールヒントに表示するテキストのタイプを指定します。指定なし、またはToolTipの属性が使用中の場合は、ToolTipTextは表示されません。
* Cursor - マウスがウィジェットにかざされている間に表示するカーソルを指定します。
* Visibility - 以下のVisibilityセクションを参照してください。


以下の引数は全ての単一ウィジェットが持っているわけではありませんが、ほとんどのウィジェットに設定されています。

* Text - 該当する場合、ウィジェットに使用するテキストを指定します。
* Content - 該当する場合、ウィジェットのコンテンツセクションに配置しなくてはいけないウィジェットを指定します。
* ReadOnly - _true_ の場合、このウィジェットを編集不可にします。
* Style - 画像のスタイルまたはウィジェットが使用するテキストのフォントを指定します。適用方法はウィジェットによってさまざまです。
* [...]ColorAndOpacity - ウィジェットのカラーやオパシティ、またはウィジェットの指定システムです。
* Padding - ウィジェットのパディングです。親内のウィジェットの上部、左、右、そして下部周りに設定するパディングの間隔をスレート単位で表します。4つの箇所に対して単一の値で指定することができます。もしくは水平や垂直方向の値、またはそれぞれ異なる4つの値で指定できます。
* HAlign - ウィジェット内のコンテンツの水平方向の整列です。
* VAlign - ウィジェット内のコンテンツの垂直方向の整列です。


### 可視性

ウィジェットの可視性はウィジェットの表示方法と双方向性を決定します。

* Visible （デフォルト） - ウィジェットは通常表示されます。
* Collapsed - ウィジェットは非表示となりレイアウトのスペースを取りません。相互作用をしません。
* Hidden - ウィジェットは非表示となりますが、レイアウトのスペースを取ってしまいます。相互作用をしません。
* HitTestInvisible - ユーザーに表示されますが、アートとして表示されるのみです。相互作用をしません。
* SelfHitTestInvisible - HitTestInvisible と同一ですが、子ウィジェットには利用できません。


###アライメント

ウィジェットのアライメントは、親ウィジェット内でのウィジェットの位置を決定します。親ウィジェットがウィジェットと同一サイズの場合（パディングを除く）、アライメントは意味をなしません。これはウィジェットに「Fill」、またはボックススロットに「Full Size」を指定した時の既定のボックススロットです。

以下は利用可能なアライメントのリストです。

* HAlign_Fill/VAlign_Fill
* HAlign_Left
* VAlign_Top
* HAlign_Center/VAlign_Center
* HAlign_Right
* VAlign_Bottom


##ボックスパネル

SHorizontalBoxとSVerticalBoxはレイアウトのアレンジに最も使用頻度の高いウィジェットです。これらのボックスパネルはウィジェットとして宣言しますが、ボックスにはスロットが挿入されています。SHorizontalBoxes はこれらのスロットを最初のウィジェットと一緒に左へ配置し、最後のウィジェットを右側へ配置します。一方で SVerticalBoxes はスロットを上から下へ配置します。

SScrollBoxは子スロットの垂直スクロールが出来る点を除いて SVerticalBoxと同じ機能を持ちます。

### スロットの属性

* Width (横) またはHeight (高さ) の設定 (以下のオプションは相互排他的です)
	* Auto Size（デフォルト） - 必要なだけの間隔をスロットに埋めるように指定します。必要以上または以下でもありません。スロット内のアライメントはここでは重要ではありません。
	* Fill Size - fill係数を指定すると別のスロットのfill係数に基づいてスロットが埋められます。同一方向のスロットのアライメントはここでは重要ではありません。
* Max Size - スレート単位でスロットに設定できる最大サイズを指定します。
* Padding - パネル内のスロットのパディングを指定します。
* Alignment - スロット内の子ウィジェットの整列方法を決定します。Fill Sizeの配置が同じ方向に指定された場合、このオプションは意味をなしません。


以下はスクロールボックス内にネストさせた自動的にサイズ変更する平行ボックスと、fillのサイズに設定された平行ボックスの例です。またこれらのスロットとアライメントの使用方法を表示しています。

	SNew(SScrollBox)
	+SScrollBox::Slot() .Padding(10,5)
	[
		SNew(SHorizontalBox)
		+SHorizontalBox::Slot() .HAlign(HAlign_Left)
		[
			...
		]
		+SHorizontalBox::Slot() .HAlign(HAlign_Center)
		[
			...
		]
		+SHorizontalBox::Slot() .HAlign(HAlign_Right)
		[
			...
		]
	]
	+SScrollBox::Slot() .Padding(10,5)
	[
		SNew(SHorizontalBox)
		+SHorizontalBox::Slot() .FillWidth(2)
		[
			...
		]
		+SHorizontalBox::Slot() .FillWidth(1)
		[
			...
		]
		+SHorizontalBox::Slot() .FillWidth(3)
		[
			...
		]
	]

###均等なグリッドパネル

SUniformGridPanelは垂直、平行方向均等に子ウィジェットを分布するパネルです。子スロットは、子のインデックスを指定する一対の整数を使用して指定されています。以下は均等なグリッドパネルの例です。

	SNew(SUniformGridPanel)
	.SlotPadding( FMargin( 5.0f ) )
	+SUniformGridPanel::Slot(0,0)
	.HAlign(HAlign_Right)
	[
		...
	]
	+SUniformGridPanel::Slot(0,1)
	.HAlign(HAlign_Right)
	[
		...
	]
	+SUniformGridPanel::Slot(0,2)
	.HAlign(HAlign_Center)
	[
		...
	]
	+SUniformGridPanel::Slot(1,0)
	[
		...
	]
	+SUniformGridPanel::Slot(1,1)
	[
		...
	]

### ラップボックス

SWrapBox は、横幅を超えるまでウィジットを水平にレイアウトするボックスです。超えた時点でウィジェットは次の行にレイアウトされます。以下に例を示します。

	SNew(SWrapBox)
	.PreferredWidth( 300.f )
	+SWrapBox::Slot()
	.Padding( 5 )
	.VAlign(VAlign_Top)
	[
		...
	]
	+SWrapBox::Slot()
	.Padding( 5 )
	.VAlign(VAlign_Bottom)
	[
		...
	]
	+SWrapBox::Slot()
	.Padding( FMargin(20, 5, 0, 5) )
	.VAlign(VAlign_Center)
	[
		...
	]
	+SWrapBox::Slot()
	.Padding( 0 )
	.VAlign(VAlign_Fill)
	[
		...
	]

## ラジオボタン

チェックボックスはボックスのチェック方法の決定にデリゲートが必要なため、スレートのチェックボックスはラジオボタンを使用しています。一連のラジオボタンの作成は、列挙型変数を作成してチェックを入れるボックスを決定するのが最も簡単な方法です。現在の選択を決定する列挙型変数のインスタンスを保存します。その後デリゲートをチェックするために、現在の選択と一緒に正確な列挙型変数のペイロードで渡したものと比較する関数を渡します。選択を変更する際に、現在の選択が更新されなくてはいけません。

	ERadioChoice CurrentChoice;

	...

	ESlateCheckBoxState::Type IsRadioChecked( ERadioChoice ButtonId ) const
	{
		return (CurrentChoice == ButtonId)
			?ESlateCheckBoxState::Checked
			:ESlateCheckBoxState::Unchecked;
	}

	...

	void OnRadioChanged( ERadioChoice RadioThatChanged, ESlateCheckBoxState::Type NewRadioState )
	{
		if (NewRadioState == ESlateCheckBoxState::Checked)
		{
			CurrentChoice = RadioThatChanged;
		}
	}

##メニューとツールバー

###メニュー

メニューまたはツールバーの作成にマルチボックスを使用します。動的に生成されるボタン/コントロールで処理することはできませんが、コマンドはスレートの UI_COMMAND システムを使用しなくてはいけません。

メニューの作成は、FUICommandListを渡してFMenuBarBuilder を作成します。これで、配置するウィジェットを取得するためにメニューバービルダーでMakeWidget()を呼び出すことができます。

	FMenuBarBuilder MenuBarBuilder( CommandList );
	{
		MenuBarBuilder.AddPullDownMenu( TEXT("Menu 1"), TEXT("Opens Menu 1"), FNewMenuDelegate::CreateRaw( &FMenus::FillMenu1Entries ) );
		MenuBarBuilder.AddPullDownMenu( TEXT("Menu 2"), TEXT("Opens Menu 2"), FNewMenuDelegate::CreateRaw( &FMenus::FillMenu2Entries ) );

	}
	return MenuBarBuilder.MakeWidget();


作成されたメニューへ、メニューヘッダ、エントリー、セパレーター、サブメニュー、編集可能なテキスト、またはカスタムウィジェットを追加することができます。

	static void FillMenu1Entries( FMenuBuilder& MenuBuilder )
	{
		MenuBuilder.AddEditableText( TEXT( "Editable Item" ), TEXT( "You can edit this item's text" ), NAME_None, TEXT( "Edit Me!" ) );

		MenuBuilder.AddMenuEntry( FMultiBoxTestCommandList::Get().EighthCommandInfo );

		MenuBuilder.AddMenuSeparator();

		MenuBuilder.AddSubMenu( TEXT("Sub Menu"), TEXT("Opens a submenu"), FNewMenuDelegate::CreateRaw( &FMenus::FillSubMenuEntries ) );

		MenuBuilder.AddWidget(SNew(SVolumeControl), TEXT("Volume"));
	}

### コンテクストメニュー
	コンテクストメニューとしてこれらのメニューのどれかを呼び出すには、 FMenuBuilderから生成したウィジェットを取得して、以下に示すようにPushMenu関数へ渡します。


	FSlateApplication::Get().PushMenu(
		MenuBuilder.MakeWidget(),
		MouseCursorLocation,
		FPopupTransitionEffect( FPopupTransitionEffect::ContextMenu )
		);

###ツールバー

ツールバーの作成は、代わりにFToolBarBuilderを使用します。子に対して、ツールバーボタン、コンボボタン、シンプルなボタン、そしてプルダウンメニューを追加することができます。

	FToolBarBuilder GameToolBarBuilder( InCommandList );
	{
		GameToolBarBuilder.AddToolBarButton( FLevelEditorCommands::Get().Simulate );

		GameToolBarBuilder.AddToolBarButton( 
			FLevelEditorCommands::Get().RepeatLastPlay, 
			LOCTEXT("RepeatLastPlay", "Play"),
			TAttribute< FString >::Create( TAttribute< FString >::FGetter::CreateRaw( &FLevelEditorActionCallbacks::GetRepeatLastPlayToolTip ) ),
			TAttribute< const FSlateBrush* >::Create( TAttribute< const FSlateBrush* >::FGetter::CreateRaw( &FLevelEditorActionCallbacks::GetRepeatLastPlayIconSlateBrush ) )
			);

		GameToolBarBuilder.AddComboButton(
			SpecialPIEOptionsMenuAction,
			FOnGetContent::CreateRaw( &FLevelEditorToolBar::GeneratePIEMenuContent, InCommandList ),
			FText(),
			LOCTEXT("PIEComboToolTip", "Play-In-Editor options") );
	}
	return GameToolBarBuilder.MakeWidget();


##アイテム表示

これらの表示はシェアードポインタのテンプレート引数を何らかのデータへ取り込みます。TArrayまたはTSharedPtr（s）でデータタイプへ追加されます。内部ウィジェットはOnGenerateRowまたはOnGenerateTileデリゲートが渡されて動的に追加され、その他のウィジェットはカラムごとに生成されます。

### リスト表示

リスト表示は子ウィジェットのリストを格納するウィジェットです。 SListView<...>として作成されます。

	SNew( SListView< TSharedPtr<FTestData> > )
	.ItemHeight(24)
	.ListItemsSource( &Items )
	.OnGenerateRow( this, &STableViewTesting::OnGenerateWidgetForList )
	.OnContextMenuOpening( this, &STableViewTesting::GetListContextMenu )
	.SelectionMode( this, &STableViewTesting::GetSelectionMode )
	.HeaderRow
	(
		SNew(SHeaderRow)
		+ SHeaderRow::Column("Name")
		[
			SNew(SBorder)
			.Padding(5)
			.Content()
			[
				SNew(STextBlock)
				.Text(TEXT("Name"))
			]
		]
		+ SHeaderRow::Column("Number") .DefaultLabel(TEXT("Number"))
		+ SHeaderRow::Column("TextField") .DefaultLabel(TEXT("Text Field"))
		+ SHeaderRow::Column("TextBlock") .DefaultLabel(TEXT("Text Block"))
		+ SHeaderRow::Column("AddChild") .DefaultLabel(TEXT("Add Child"))
	)

###ツリー表示

STreeView<...>として作成されるツリー表示は、リストで別のウィジェットの親ウィジェットをサポートする点を除いて、リスト表示と似ています。親ウィジェットから子ウィジェットに対応するウィジェットを決定するために、渡したアイテムの子を戻すためにOnGetChildrenデリゲートを使用します。 

	SNew( STreeView< TSharedPtr<FTestData> > )
	.ItemHeight(24)
	.TreeItemsSource( &Items )
	.OnGenerateRow( this, &STableViewTesting::OnGenerateWidgetForTree )
	.OnGetChildren( this, &STableViewTesting::OnGetChildrenForTree )
	.OnContextMenuOpening( this, &STableViewTesting::GetTreeContextMenu )
	.SelectionMode( this, &STableViewTesting::GetSelectionMode )
	.HeaderRow
	(
		SNew(SHeaderRow)
		+ SHeaderRow::Column("Name") .DefaultLabel(TEXT("Name"))
		+ SHeaderRow::Column("Number") .DefaultLabel(TEXT("Number"))
		+ SHeaderRow::Column("TextField") .DefaultLabel(TEXT("Text Field"))
		+ SHeaderRow::Column("TextBlock") .DefaultLabel(TEXT("Text Block"))
		+ SHeaderRow::Column("AddChild") .DefaultLabel(TEXT("Add Child"))
	)

###タイル表示

STileView<...>として作成されるタイル表示は、子ウィジェットがリストではなくグリッドに配列される点を除いてリスト表示に似ています。このため、タイル表示はカラムまたはカラムヘッダをサポートしません。

	SNew( STileView< TSharedPtr<FTestData> > )
	.ItemWidth(128)
	.ItemHeight(64)
	.ListItemsSource( &Items )
	.OnGenerateTile( this, &STableViewTesting::OnGenerateWidgetForTileView )
	.OnContextMenuOpening( this, &STableViewTesting::GetTileViewContextMenu )
	.SelectionMode( this, &STableViewTesting::GetSelectionMode )
