INTSourceChangelist:2568930
Availability:Public
Title:ゲームプレイクラス
Crumbs:%ROOT%, Programming, Programming/UnrealArchitecture/Reference
Description:ゲームプレイクラスの作成および実装に関する参照ページ
Version:4.5

[TOC(start:2)]

アンリアルエンジンで使用する全てのゲームプレイクラスは、クラスヘッダファイル (.h) とクラス ソース ファイル(.cpp)で構成 
されています。クラスソースファイルは、クラスに属する関数を _実装_ することによってクラスの機能を定義するファイルである一方で、 
クラス ヘッダ ファイルには変数や関数など、クラスの宣言とそのメンバーが 
含まれています。

アンリアルエンジンのクラスは標準化した命名スキームがあり、クラスの最初の文字（プレフィックス）を見ただけで、 
瞬時にクラスの種類が判断できます。以下はゲームプレイクラスのプレフィックスです：

| プレフィックス | 意味 |
| ------ | ------- |
| `A` | _スポーン可能_ なゲームプレイオブジェクトのベースクラスからの拡張です。これらはアクタでワールド内へ直接スポーンすることができます。  |
| `U` | 全ゲームプレイオブジェクトのベースクラスからの拡張です。このクラスはワールド内へ直接インスタンス化することはできません。アクタに属さなければいけません。通常は [](Programming/UnrealArchitecture/Actors/Components) のようなオブジェクトです。|



## クラスの追加

[](Programming\Development\ManagingGameCode\CppClassWizard) は、新規クラスに必要なヘッダ ファイルとソース ファイルを設定し、それに応じてゲーム モジュールを更新します。 
ヘッダ ファイルとソース ファイルは、 UCLASS() マクロのようなアンリアル エンジン固有のコードに加えて、クラス宣言とクラス コンストラクタを自動的にインクルードします。

## クラスヘッダ

アンリアル エンジンのゲームプレイクラスにはそれぞれ、単独でユニークなクラス ヘッダ ファイル があります。ファイルは、その中で定義されているクラスと一致する名前を付けなければなりません。 
`A` または `U` のプレフィックスを差し引いて「`.h` 」ファイル拡張子を使用します。例えば `AActor` クラスのクラス ヘッダ ファイルの名前は `Actor.h` となります。

ゲーム プレイ クラスのクラス ヘッダ ファイルは、クラス、変数、関数の宣言プロセスを単純化するために、特殊マクロと標準の C++ 記法を併用します。

各ゲームプレイクラスのヘッダファイル最上部には、以下に示すようにクラス用に生成されたヘッダファイルを含まなくてはいけません。

	#include "ClassName.generated.h"

### クラスの宣言

クラスの宣言はクラス名と継承されたクラスを定義します。 
つまり、継承する関数とクラスや、[クラス指定子] (#クラス指定子)やメタデータ経由で望まれるエンジンやエディタのその他の特定のビヘイビアです。クラスの宣言の記法は以下の通りです。

	UCLASS([specifier, specifier, ...], [meta(key=value, key=value, ...)])
	class ClassName :ParentName
	{
		GENERATED_UCLASS_BODY()
	}

宣言は、クラス用の標準のC++クラス宣言で構成されています。通常の宣言の上で、クラス指定子やメタデータなどの記述子が UCLASS マクロへ 
渡されます。宣言されるクラス用に `UClass` を作成するために使用され、エンジンの特別なクラス表現とみなされます。また `GENERATED_UCLASS_BODY()` 
マクロはクラス本体の冒頭に配置しなくてはいけません。

#### クラス指定子

[INCLUDE:Programming/UnrealArchitecture/Reference/Classes/Specifiers#main]

## クラスの実装

すべてのゲームプレイ クラスは、正しく実装するために IMPLEMENT_CLASS マクロへ渡されなければなりません。この受け渡しは、クラスとその全ての関数を実装する C++ (.cpp) ファイルである 
クラス ソース ファイル内で行われます。クラス ソース ファイルのベスト プラクティスは、「A」や「U」のプレフィックスを取り除いて、実行中のクラスに一致する名前をつけることです。従って、 AActor クラスのソース ファイルは 
「Actor.cpp」という名前になります。

このファイルには C++ クラス宣言をインクルードする C++ ヘッダがインクルードされていなければなりません。これは通常自動生成されますが、必要に応じて手書きのコードでも作成可能です。例えば、 AActor クラスに対する C++ 宣言は 「EngineClasses.h」ヘッダ ファイルで 
自動生成されます。つまり「Actor.cpp」ファイルには、「EngineClasses.h」かこのファイルをインクルードする 
別のファイルがインクルードされていなければなりません。一般的には、ゲーム プロジェクト用のヘッダ ファイルをインクルードし、それがゲーム プロジェクトのゲームプレイ クラス用のヘッダをインクルードします。AActor と 「EngineClasses.h」 の場合、 
「Engine.h」 をインクルードする 「EnginePrivate.h」 ヘッダがインクルードされています。「Engine.h」 ファイルはエンジンプロジェクト用のヘッダファイルで、 「EngineClasses.h」 ヘッダ ファイルをインクルードしています。

	#include "EnginePrivate.h"

インクルードされていなクラスの関数を実装で他のクラスを参照する場合、ファイルを追加でインクルードする必要があるかもしれません。単にそのファイルをインクルードして追加します。

### クラス コンストラクタ

UObjects は **コンストラクタ** を使ってプロパティおよびその他の変数のデフォルト値の設定や、その他必要な初期化を実行します。クラス コンストラクタは通常、クラス実装ファイル内に置かれます。 
例えば、AActor::AActor コンストラクタであれば、 Actor.cpp の中です。 

[REGION:note]
一部のコンストラクタは、モジュール別に特別な「コンストラクタ」ファイルに置かれる場合もあります。例えば、 AActor::AActor コンストラクタは EngineConstructors.cpp 内に存在します。これは以前に、コンストラクタの採用に DEFAULTS ブロックを使用した 
自動変換プロセスの結果です。これらは時間と共にそれぞれのクラス ソース ファイルに移動していきます。
[/REGION]

コンストラクタ インラインをクラス ヘッダ ファイルに配置することも可能ですが、コンストラクタがクラス ヘッダ ファイル内にある場合、 
自動コードジェネレータがヘッダにコンストラクタ宣言を生成することを防ぐために、 UClass は CustomConstructor 指定子で宣言されなければなりません。

#### コンストラクタの形式

以下が、 UObject コンストラクタの最も基本的な形式です。

	AMyClass::AMyClass(const FObjectInitializer& ObjectInitializer)
		:Super(ObjectInitializer)
	{
	}

明らかに、このコンストラクタは何も初期化しません。その上、作成中のオブジェクトに何の影響もありません。しかしながら、コンストラクタに 
`FObjectInitializer` パラメータが渡されています。この構造体は、コンストラクタが戻ると 
アーキタイプもしくはクラス デフォルト オブジェクト (CDO) からプロパティを初期化します。構築されたすべての UObject のプロパティを確実に初期化するために使用します。以下のコンストラクタに示すように、`FObjectInitializer` をアーキタイプまたは CDO で既に設定済みの場合、 
コンストラクタに存在するプロパティの初期化をスキップするために `FObjectInitializer` 使うことができます。

	AUDKEmitterPool::AUDKEmitterPool(const class FObjectInitializer& ObjectInitializer)
		:Super(ObjectInitializer)
	{
		// Property initialization
		MaxActiveEffects = 200;
		SMC_MIC_ReductionTime = 2.0;
		IdealStaticMeshComponents = 200;
		IdealMaterialInstanceConstants = 200;
	}

	AUTDemoHUD::AUTDemoHUD(const class FObjectInitializer& ObjectInitializer)
		:Super(ObjectInitializer)
		, SomeNonProperty("Hi there")
	{
		// Non-property initialization
		SomeOtherNonProperty = 26;

		// Property initialization
		SomeProperty = 30;
		SomeOtherProperty = "My message";
	}

#### Constructor Statics と Helpers

さらに複雑なデータ タイプ、特にクラス リファレンス、名前、アセット リファレンスの値を設定する場合、 
必要に応じて様々なプロパティ値を保持するためにコンストラクタ内で **ConstructorStatics** 構造体を定義およびインスタンス化することが求められます。ConstructorStatics 構造体は、コンストラクタの初回実行時のみ作成されます。それ以降の実行ではポインタをコピーするだけなので、 
処理速度が超高速になります。ConstructorStatics 構造体が作成されると、後にコンストラクタで実際のプロパティに値を割り当てる時に、 
アクセス手段として構造体のメンバに値が割り当てられます。

**ContructorHelpers** は、コンストラクタ特有の共通のアクションの実行に使用するヘルパー テンプレート を格納した ObjectBase.h で定義した特別な名前空間です。例えばヘルパー テンプレートには、アセットやクラスへのリファレンスの検索だけでなく、 
コンポーネントを作成したり検索するものもあります。

##### アセットの参照

クラスにアセットの参照が存在しないことが理想的です。ハードコード化されたアセットの参照は壊れやすく、アセット プロパティの設定にはブループリントを使用する取り組みが進められていました。けれども 
アセットの参照は完全にサポートされています。オブジェクトを構築するたびにアセットの検索を行わないために、検索は 1 度だけ行います。静的な構造体により、アセット検索は必ず 1 回だけ 
実行します。

ConstructorHelpers::FObjectFinder は StaticLoadObject を使って指定された UObject へのリファレンスを探します。一般的にこれはコンテント パッケージに格納されているアセットの参照に使用します。オブジェクトが見つからない場合、 
失敗したことが報告されます。

	ATimelineTestActor::ATimelineTestActor(const class FObjectInitializer& ObjectInitializer)
		:Super(ObjectInitializer)
	{
		// Structure to hold one-time initialization（一度きりの初期化を保持する構造体）
		struct FConstructorStatics
		{
			ConstructorHelpers::FObjectFinder<UStaticMesh> Object0;
			FConstructorStatics()
				:Object0(TEXT("StaticMesh'/Game/UT3/Pickups/Pickups/Health_Large/Mesh/S_Pickups_Base_Health_Large.S_Pickups_Base_Health_Large'"))
			{
			}
		};
		static FConstructorStatics ConstructorStatics;

		// Property initialization（プロパティの初期化）

		StaticMesh = ConstructorStatics.Object0.Object;
	}

##### クラス リファレンス

ConstructorHelpers::FClassFinder は 指定された UClass へのリファレンスを探します。クラスが見つからない場合は失敗したことを報告します。

	APylon::APylon(const class FObjectInitializer& ObjectInitializer)
		:Super(ObjectInitializer)
	{
		// Structure to hold one-time initialization（一度きりの初期化を保持する構造体）
		struct FConstructorStatics
		{
			ConstructorHelpers::FClassFinder<UNavigationMeshBase> Class0;
			FConstructorStatics()
				:Class0(TEXT("class'Engine.NavigationMeshBase'"))
			{
			}
		};
		static FConstructorStatics ConstructorStatics;

		NavMeshClass = ConstructorStatics.Class0.Class;
	}

たいていの場合、 USomeClass::StaticClass() を使って ClassFinder の複雑さをまとめてスキップすることができます。例えば、ほとんどの状況で次のメソッドを利用できます。

	NavMeshClass = UNavigationMeshBase::StaticClass();

クロス モジュール リファレンスの場合は、恐らく ClassFinder メソッドの使用が良いかもしれません。

##### 名前

	APylon::APylon(const class FObjectInitializer& ObjectInitializer)
		:Super(ObjectInitializer)
	{
		// Structure to hold one-time initialization（一度きりの初期化を保持する構造体）
		struct FConstructorStatics
		{
			FName NAME_Navigation;
			FConstructorStatics()
				:NAME_Navigation(TEXT("Navigation"))
			{
			}
		};
		static FConstructorStatics ConstructorStatics;

		SpriteCategoryName = ConstructorStatics.NAME_Navigation;
	}
	##### コンポーネントとサブ オブジェクト


サブ オブジェクト、特にコンポーネントを作成し、親クラスに属するサブ オブジェクトを変更する時にも、コンストラクタ ヘルパーを利用できます。ConstructorHelpers::CreateComponent と ConstructorHelpers::FindComponent ヘルパーは、それぞれコンポーネントの作成と検索に利用できます。

	AWindPointSource::AWindPointSource(const class FObjectInitializer& ObjectInitializer)
		:Super(ObjectInitializer)
	{
		// Structure to hold one-time initialization（一度きりの初期化を保持する構造体）
		struct FConstructorStatics
		{
			FName NAME_Wind;
			FConstructorStatics()
				:NAME_Wind(TEXT("Wind"))
			{
			}
		};
		static FConstructorStatics ConstructorStatics;

		// Property initialization（プロパティの初期化）

		//Create a new component（新規コンポーネントを作成）
		UWindPointSourceComponent* NewComponent0 = ConstructorHelpers::CreateComponent<UWindPointSourceComponent>(this, TEXT("WindPointSourceComponent0"));
		NewComponent0->PreviewRadiusComponent = NewComponent1;

		Component = NewComponent0;
		RootComponent = NewComponent0;

		//Create a new component（新規コンポーネントを作成）
		UDrawSphereComponent* NewComponent1 = ConstructorHelpers::CreateComponent<UDrawSphereComponent>(this, TEXT("DrawSphereComponent0"));
		NewComponent1->ShapeColor.R = 173;

		NewComponent1->ShapeColor.G = 239;
		NewComponent1->ShapeColor.B = 231;
		NewComponent1->ShapeColor.A = 255;

		NewComponent1->AlwaysLoadOnClient = false;
		NewComponent1->AlwaysLoadOnServer = false;
		NewComponent1->bAbsoluteScale = true;
		NewComponent1->AttachParent = NewComponent0;
		//Find a component on the parent（親でコンポーネントを検索）

		USpriteComponent* NewComponent2 = ConstructorHelpers::FindComponent<USpriteComponent>(this, TEXT("Sprite"));
		NewComponent2->SpriteCategoryName = ConstructorStatics.NAME_Wind;

		NewComponent2->AttachParent = NewComponent0;

		bNoDelete = true;
	}

親クラスに属するコンポーネントの検索は通常必要ありません。コンポーネントは親のコンストラクタのプロパティに対して作成され割り当てられるはずなので、コンポーネントはそのプロパティを使えば見つかります。そうでない場合は、親のコンストラクタを更新してコンポーネントにアクセスします。ConstructorHelpers::FindComponent ヘルパーは、標準的な方法がふさわしくない状況のバックアップとして提供されています。

#### 配列操作

配列は、その配列に属している標準的なメソッドを用いて、修正および操作が可能です。 

	ExampleArray.Add(NewComponent0);

これが好ましくない場合、アイテムの追加、配列の展開、配列の初期化のためのヘルパー テンプレートが提供されています。例えば、 Components 配列に新規コンポーネントを追加する場合は以下を使用します。

	int32 NewArrayIndex1 = ConstructorHelpers::AddArrayElement(ExampleArray);
	ExampleArray(NewArrayIndex1) = NewComponent0;

