INTSourceChangelist:2434072
Availability:Public
Title:アクタ
Crumbs:%ROOT%, Programming, Programming/UnrealArchitecture
Description:基本的なゲームプレイ要素であるアクタとオブジェクトの説明

[TOC (start:2 end:3)]

## 概要

<!-- アクタはワールドに配置または [スポーン](Programming\UnrealArchitecture\Actors\Spawning) することができるオブジェクトです。アクタを一言で表現すると、「ティックするコンポーネント コレクション」でしょう。実際、アクタはインクルードされたすべての変数や関数に対し `Actor.h` をチェックアウトして、 
様々な事ができます。 
-->

[EXCERPT:Actors]
[INCLUDE:Shared/Glossary/A#glossary_actor] さらにアクタは Transform (位置、回転、スケール) 情報を格納しません。それらは Root Component に格納されます。

ワールド オブジェクトがアクタ リファレンスのリストを保有しているので、アクタは一般的にガーベジ コレクションではありません。アクタは `Destroy()` を呼び出すことにより、明確に破壊することができます。アクタは破壊されると、レベルから削除され、「キルの保留状態」としてマークされます。 
つまり、次のガーベジ コレクション上で整理されるまで、そこに残されることを意味します。

[/EXCERPT:Actors]

##アクタの作成

`AActor` クラスのインスタンスの新規作成を、**スポーンする** といいます。スポーンは、一般的な `SpawnActor()` 関数、あるいは特別にテンプレート化されたものを使って行います。

ゲームプレイ用に`AActor` クラスのインスタンスを作成する様々な方法については、 [](Programming/UnrealArchitecture/Actors/Spawning) をご覧ください。


## コンポーネント

**アクタ** はある意味、 [コンポーネント](Programming/UnrealArchitecture/Actors/Components) と呼ばれる特別なタイプの **オブジェクト** を保持するコンテナとして考えられます。様々なタイプのコンポーネントを使って、 
 **アクタ** の移動、レンダリング方法を制御することができます。**アクタ** のその他の主要な機能は、 
ゲーム中にネットワーク上でプロパティと関数コールを [レプリケーション](#レプリケーション) することです。

コンポーネントは作成されると、それに含まれるアクタと関連づけられます。

コンポーネント タイプをいくつか紹介します。

$ UActorComponent :これは基本のコンポーネントです。アクタの一部として含まれます。必要であれば、ティックすることもできます。

$ USceneComponent :ワールドに存在することができる「物理的な」コンポーネントです。SceneComponents は変形します。つまり、ワールド内で移動し、 
他のものと相互作用することができます。アタッチメント階層で一緒になることも可能です。

$ UPrimitiveComponent :このコンポーネントはワールド内に存在するだけでなく、種類も表します (メッシュ、パーティクル システムなど)。物理とコリジョンのいろいろな設定が、 
ここで行えます。

アクタは SceneComponents の階層をもつようにサポートされています。それぞれの **アクタ** には、どのコンポーネントが **アクタ** のルートの役割をするのかを指定する `RootComponent` プロパティがあります。**アクタ** 自体は変形しないので、位置、回転、スケールがありません。 
位置、回転、スケールはありません。その代わり、アクタはコンポーネント、具体的には ルート コンポーネントの変形に依存します。このコンポーネントが **SceneComponent** の場合、 
 **アクタ** に変形情報を与えます。これがないと、 **アクタ** は変形しません。その他のアタッチされたコンポーネントは、アタッチ先のコンポーネントに関連して変形します。 

アクタと階層の例は、以下のようになります。

| GoldPickup アクタ | 階層 | 
| ------------------| -----------|
| ![](GoldPickupExampleActor.png)(w:400) | [INCLUDE:#goldhierarchy] | 

<!--
[EXCERPT:GoldHierarchy]
* **Root - SceneComponent**:ワールドにアクタの基本位置を設定するための基本的なシーン コンポーネント
	* **StaticMeshComponent**:金鉱を表すメッシュ 
		* **ParticleSystemComponent**:金鉱にアタッチされたキラキラ光るパーティクル エミッタ
		* **AudioComponent**:金鉱にアタッチされたループするメタルの鐘の音
		* **BoxComponent**:オーバーラップ イベントがゴールドを広いあげるトリガーとして使うコリジョン ボックス 
[/EXCERPT:GoldHierarchy]

詳細は、 [](Programming/UnrealArchitecture/Actors/Components) を参照してください。
-->

## ティック

ティックとは、アンリアル エンジンでどのようにオブジェクトが更新されるかを表します。すべてのオブジェクトには、各フレームでティックする機能があり、必要な更新の計算やアクションを行うことができるようにします。

**アクタ** はすべて、 `TickActor()` 関数を使ってデフォルトでティックされた状態にすることができます。この関数は、エンジンによってフレームごとに実行されます。

**ActorComponent** もデフォルトで更新をかけることができます。詳細は、 [更新](Programming/UnrealArchitecture/Actors/Components#更新) を参照してください。


## ライフサイクル

アクタの作成方法およびゲームからの削除方法については、[アクタのライフサイクル](Programming/UnrealArchitecture/Actors/ActorLifecycle) をご覧ください。


## レプリケーション

**レプリケーション** は、ネットワーク経由のマルチプレイヤー ゲームを処理する際に、アクタをワールドに同期して維持するために使います。プロパティ値と関数コールは両方ともレプリケートが可能なので、 
全てのクライアント上のゲームのステートを完全に制御することができます。
