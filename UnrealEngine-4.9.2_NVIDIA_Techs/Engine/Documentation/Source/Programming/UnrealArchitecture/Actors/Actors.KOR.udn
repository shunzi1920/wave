INTSourceChangelist:2614145
Availability:Public
Title: 액터 (Actor)
Crumbs:%ROOT%, Programming, Programming/UnrealArchitecture
Description:기본적인 게임플레이 요소인 액터와 오브젝트에 대한 설명입니다.

[TOC (start:2 end:3)]


<!-- Actor (액터)란 월드에 배치 또는 [스폰](Programming\UnrealArchitecture\Actors\Spawning) 되는 오브젝트에 대한 바탕이 되는 오브젝트입니다. 액터를 한마디로 설명해 보자면, "틱(tick)이 적용되는 컴포넌트 모음" 입니다. 실제로 액터는 
 여러가지 작업이 가능합니다. Actor.h 에서 포함된 변수와 함수 전부를 살펴볼 수 있습니다.
-->

[EXCERPT:Actors]
[INCLUDE:Shared/Glossary/A#glossary_actor] 추가적으로 트랜스폼 (위치, 회전, 스케일) 데이터를 저장하지 않으며, 루트 컴포넌트에 저장됩니다.

액터는 일반적으로 가비지 콜렉션 대상이 아닌데, World (월드) 오브젝트에 액터 레퍼런스 목록이 저장되어 있기 때문입니다. 액터는 Destroy() 를 호출하여 명시적으로 소멸시킬 수 있습니다. 그러면 레벨에서 제거하고 "pending kill" (킬 대기) 상태로 마킹합니다. 즉 다음 가비지 콜렉션에 정리될 때까지는 남아있다는 뜻입니다.

[/EXCERPT:Actors]

## 액터 생성

`AActor` 클래스 인스턴스를 새로 생성하는 것을 **Spawn** (스폰)이라 합니다. 그 방법은 범용 함수 `SpawnActor()` 나, 그 특수 템플릿 버전을 사용하면 됩니다.

게임플레이에 쓸 `AActor` 클래스 인스턴스를 생성하는 여러가지 방법에 대한 상세 정보는 [](Programming/UnrealArchitecture/Actors/Spawning) 문서를 참고하세요.


## 컴포넌트

**액터** 는 한 편으로 보면, [Component (컴포넌트)](Programming/UnrealArchitecture/Actors/Components)
라 불리는 특수 유형 **Object** (오브젝트)를 담는 그릇으로 생각해 볼 수 있습니다. 여러가지 유형의 
컴포넌트를 사용하여 **액터** 의 이동 및 렌더링 방식 등을 제어할 수 있습니다. **액터** 의 또다른 주요 기능은, 플레이 도중 네트워크를 통한 프로퍼티 및 함수 호출의 [리플리케이션](#리플리케이션) 
입니다.

컴포넌트는 생성시 자신을 포함하고 있는 액터에 할당됩니다.

컴포넌트 핵심 유형 몇 가지입니다:

$ UActorComponent 액터 컴포넌트 : 베이스 컴포넌트입니다. 액터의 일부로 포함 가능합니다. 원한다면 Tick 시킬 수 있습니다.

$ USceneComponent 씬 컴포넌트: 월드에 존재 가능하다는 점에서 "물리적" 사물 컴포넌트입니다. 씬 컴포넌트에는 트랜스폼이 있어, 월드를 돌아다니고 다른 사물과 상호작용이 가능합니다. 
부착 계층구조에서 합칠 수도 있습니다.

$ UPrimitiveComponent 프리미티브 컴포넌트 : 월드에 존재할 뿐만 아니라 일정한 (메시나 파티클 시스템같은) 형태를 지닌 컴포넌트입니다. 재미난 피직스 및 콜리전 세팅이 
들어있습니다.

액터는 씬 컴포넌트 계층구조를 갖는 것을 지원합니다. 각 **액터** 에는 어느 컴포넌트가 **액터** 의 루트 역할을 할 것인지 나타내는 `RootComponent` 프로퍼티도 있습니다. **액터** 자체는 트랜스폼 정보가 없기에 위치, 회전, 스케일이 없습니다.
대신, 그 컴포넌트, 좀 더 구체적으로 루트 컴포넌트의 트랜스폼에 의존합니다. 이 컴포넌트가 **씬 컴포넌트** 인 경우, **액터** 에 대한 트랜스폼 정보를 제공해 줍니다.
아닌 경우, **액터** 에는 트랜스폼 정보가 없습니다. 부착된 다른 컴포넌트에는, 부착된 그 컴포넌트를 기준으로 한 트랜스폼 정보가 있습니다.

액터와 계층구조 예제는 이렇습니다:

| GoldPickup 액터 | 계층구조 | 
| ------------------| -----------|
| ![](GoldPickupExampleActor.png)(w:400) | [INCLUDE:#goldhierarchy] | 

<!--
[EXCERPT:GoldHierarchy]
* **Root - SceneComponent**: 액터의 월드 내 기반 위치 설정을 위한 기본 씬 컴포넌트입니다.
	* **StaticMeshComponent**: 금괴를 나타내는 메시입니다.
		* **ParticleSystemComponent**: 금괴에 부착된 스파클링 파티클 이미터입니다.
		* **AudioComponent**: 금괴에 부착된 금속성 울림 소리 반복 이미터입니다.
		* **BoxComponent**: 금괴 획득용 오버랩 이벤트의 트리거로 사용할 콜리전 박스입니다.
[/EXCERPT:GoldHierarchy]

자세한 정보는 [](Programming/UnrealArchitecture/Actors/Components) 문서를 참고하세요.
-->

## 틱

Tick (틱)이란 언리얼 엔진에서 오브젝트가 어떻게 업데이트되는지를 일컫습니다. 모든 오브젝트는 매 프레임마다 틱 가능해서, 필요한 동작이나 계산을 업데이트할 수 있습니다.

**액터** 는 모두 기본적으로 `TickActor()` 함수를 통해 틱 가능합니다. 이 함수는 엔진에 의해 매 프레임마다 실행됩니다.

**ActorComponent** 역시 기본적으로 업데이트 가능합니다. 자세한 정보는 [컴포넌트 문서의 업데이트하기](Programming/UnrealArchitecture/Actors/Components#업데이트하기) 부분을 참고하세요.


## 수명

게임에서의 액터 생성/소멸 관련 상세 정보는 [](Programming/UnrealArchitecture/Actors/ActorLifecycle) 문서를 참고하세요.


## 리플리케이션

**Replication** (리플리케이션)은 네트워크 멀티플레이어 게임 처리시 월드의 동기화 상태를 유지하는 데 사용됩니다. 모든 클라이언트에서의 게임 상태에 대한 완벽 제어를 가능하게 하기 위해, 
프로퍼티 값과 함수 호출 둘 다 리플리케이트시킬 수 있습니다.
