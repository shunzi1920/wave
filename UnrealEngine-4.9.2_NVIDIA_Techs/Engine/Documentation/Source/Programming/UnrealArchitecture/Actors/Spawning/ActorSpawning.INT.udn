Availability:Public
Title:Spawning Actors
Crumbs:%ROOT%, Programming, Programming/UnrealArchitecture
Description:Methods of creating new instances of Actors in gameplay code.
Version: 4.5

[TOC (start:2 end:3)]

## SpawnActor Method

The process of creating a new instance of an _Actor_ is known as **spawning**. Spawning of _Actors_ is performed using the `UWorld::SpawnActor()` function. This function creates a new instance 
of a specified class and returns a pointer to the newly created _Actor_. `UWorld::SpawnActor()` may only be used for creating instances of classes which inherit from the _Actor_ class in their 
hierarchy. 

	AActor* UWorld::SpawnActor
	(
		UClass*			Class,
		FName			InName,
		FVector const*	Location,
		FRotator const*	Rotation,
		AActor*			Template,
		bool			bNoCollisionFail,
		bool			bRemoteOwned,
		AActor*			Owner,
		APawn*			Instigator,
		bool			bNoFail,
		ULevel*			OverrideLevel,
		bool			bDeferConstruction
	)

| Parameter | Description |
| --- | --- |
| `Class` | A `UClass` specifying the class of the _Actor_ to be spawned. |
| `InName` | Optional. An `FName` to assign as the `Name` of the _Actor_ being spawned. If no value is specified, the name of the spawned _Actor_ will be automatically generated using the form *[Class]_[Number]*. |
| `Location` | Optional. An `FVector` supplying the initial location to spawn the _Actor_ at. |
| `Rotation` | Optional. An `FRotator` supplying the initial rotation to spawn the _Actor_ with. |
| `Template` | Optional. An `AActor` to use as a template when spawning the new _Actor_. The spawned _Actor_ will be initialized using the property values of the template _Actor_. If no template _Actor_ is specified, the class default object (CDO) will be used to initialize the spawned _Actor_. |
| `bNoCollisionFail` | Optional. A `bool` that determines whether a collision test will be performed when spawning the _Actor_. If `true`, no collision test will be performed when spawning the _Actor_ regardless of the collision settings of the root component or template _Actor_. |
| `bRemoteOwned` | Optional. `bool`.  |
| `Owner` | Optional. The `AActor` that owns the spawned _Actor_. |
| `Instigator` | Optional. The `APawn` that is responsible for damage done by the spawned _Actor_. |
| `bNoFail` | Optional. A `bool` that determines whether spawning will not fail if certain conditions are not met. If `true`, spawning will not fail because the class being spawned is `bStatic=true` or because the class of the template _Actor_ is not the same as the class of the _Actor_ being spawned. |
| `OverrideLevel` | Optional. The `ULevel` to spawn the _Actor_ in, i.e. the `Outer` of the _Actor_. If no level is specified, the `Outer` of the `Owner` is used. If no `Owner` is specified, the persistent level is used. |
| `bDeferConstruction` | Optional. A `bool` that determines whether the construction script will be run. If `true`, the construction script will not be run on the spawned _Actor_. Only applicable if the _Actor_ is being spawned from a [Blueprint](Engine/Blueprints). |
|[REGION:tablesection]Return Value[/REGION]||
| The spawned _Actor_ in the form of an `AActor` pointer. The return value must be cast to convert to the derived type specified by `Class` parameter.||

### Usage

	AKAsset* SpawnedActor1 = (AKAsset*) GetWorld()->SpawnActor(AKAsset::StaticClass(), NAME_None, &Location);

## Spawn Function Templates

In order to make spawning _Actors_ more friendly, several function templates are provided for the most common usage patterns. These make creating _Actors_ much simpler as they require a smaller 
subset of parameters and allow the type of the returned _Actor_ to be specified.

### Spawn T Instance, Return T Pointer

This function template spawns an instance of the template class `T` at the same location, and with the same rotation, as the root component of the _Actor_ performing the spawn operation, and returns 
a pointer to that instance of the same type as the template class, i.e. `T*`. The owning _Actor_, instigating _Pawn_, and whether the spawn operation should fail if the spawned _Actor_ 
encroaches, or would be colliding with, another _Actor_ already present in the world can be specified.

	/** Spawns and returns class T, respects default rotation and translation of root component. */
	template< class T >
	T* SpawnActor
	(
		AActor* Owner=NULL,
		APawn* Instigator=NULL,
		bool bNoCollisionFail=false
	)
	{
		return (T*)(GetWorld()->SpawnActor(T::StaticClass(), NAME_None, NULL, NULL, NULL, bNoCollisionFail, false, Owner, Instigator));
	}

#### Usage

	MyHUD = SpawnActor<AHUD>(this, Instigator);

### Spawn T Instance with Transform, Return T Pointer

This function template spawns an instance of the template class `T` at the specified `Location` and with the specified `Rotation`, and returns a pointer to that instance of the same type as the 
template class, i.e. `T*`. In addition to the location and rotation, the owning _Actor_, instigating _Pawn_, and whether the spawn operation should fail if the spawned _Actor_ encroaches, or 
would be colliding with, another _Actor_ already present in the world can be specified.

	/** Spawns and returns class T, forcibly sets world position. */
	template< class T >
	T* SpawnActor
	(
		FVector const& Location,
		FRotator const& Rotation,
		AActor* Owner=NULL,
		APawn* Instigator=NULL,
		bool bNoCollisionFail=false
	)
	{
		return (T*)(GetWorld()->SpawnActor(T::StaticClass(), NAME_None, &Location, &Rotation, NULL, bNoCollisionFail, false, Owner, Instigator));
	}

#### Usage

	Controller = SpawnActor<AController>(GetLocation(), GetRotation(), NULL, Instigator, true);

### Spawn Class Instance, Return T Pointer

This function template spawns an instance of the specified `Class` at the same location, and with the same rotation, as the root component of the _Actor_ performing the spawn operation, and returns 
a pointer to that instance cast to the type of the template class, i.e. `T*`.  This requires that the specified `Class` be a child of the template class `T`. In addition to the class, the owning 
_Actor_, instigating _Pawn_, and whether the spawn operation should fail if the spawned _Actor_ encroaches, or would be colliding with, another _Actor_ already present in the world can be 
specified.

	/** Spawns given class and returns class T pointer, respects default rotation and translation of root component. */
	template< class T >
	T* SpawnActor
	(
		UClass* Class,
		AActor* Owner=NULL,
		APawn* Instigator=NULL,
		bool bNoCollisionFail=false
	)
	{
		return (Class != NULL) ? Cast<T>(GetWorld()->SpawnActor(Class, NAME_None, NULL, NULL, NULL, bNoCollisionFail, false, Owner, Instigator)) : NULL;
	}
#### Usage

	MyHUD = SpawnActor<AHUD>(NewHUDClass, this, Instigator);

### Spawn Class Instance with Transform, Return T Pointer

This function template spawns an instance of the specified `Class` at the specified `Location` and with the specified `Rotation`, and returns a pointer to that instance of the same type as the 
template class, i.e. `T*`.  This requires that the specified `Class` be a child of the template class `T`. In addition to the class, location, and rotation, the owning _Actor_, instigating 
_Pawn_, and whether the spawn operation should fail if the spawned _Actor_ encroaches, or would be colliding with, another _Actor_ already present in the world can be specified.

	/** Spawns given class and returns class T pointer, forcibly sets world position. */
	template< class T >
	T* SpawnActor
	(
		UClass* Class,
		FVector const& Location,
		FRotator const& Rotation,
		AActor* Owner=NULL,
		APawn* Instigator=NULL,
		bool bNoCollisionFail=false
	)
	{
		return (Class != NULL) ? Cast<T>(GetWorld()->SpawnActor(Class, NAME_None, &Location, &Rotation, NULL, bNoCollisionFail, false, Owner, Instigator)) : NULL;
	}

#### Usage

	APawn* ResultPawn = SpawnActor<APawn>(DefaultPawnClass, StartLocation, StartRotation, NULL, Instigator);
