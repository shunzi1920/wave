INTSourceChangelist:2434112
Availability:Public
Title:コンポーネント
Crumbs:%ROOT%, Programming
Description:コンポーネントの例と利用可能な各種タイプの説明
バージョン4.5

[TOC (start:2 end:3)]

## 概要

[EXCERPT:Overview]
**コンポーネント** は、**アクタ** 内のサブオブジェクトとして使用するように設計された特別なタイプの **オブジェクト** です。コンポーネントは、所有する **アクタ** の特定の側面の動作や機能性を変更するために、簡単に取り替えが出来る要素が必要な状況で一般的に使用されます。例えば、車の制御や動きは飛行機とは異なり、飛行機の制御や動きは船とは異なります。しかし、これらは全部別の共通性を共有する乗り物です。コンポーネントで制御や動きを処理することにより、いずれかの特定タイプと同様の動作をする乗り物を簡単に作成することができます。
[/EXCERPT:Overview]

一般的なサブオブジェクトのデフォルト動作とは反対に、**アクタ** 内でサブオブジェクトとして作成されるコンポーネントはインスタンス化されます。つまり特定クラスの各 **アクタ** インスタンスは、コンポーネントの固有インスタンスを独自に受け取ります。これを簡単に思い描くには上述の乗り物の例で想像してください。**Car** クラスは、車の車輪の表現にコンポーネントを使用する場合もあります。クラスのデフォルトプロパティにはサブオブジェクトとして 4 つの **Wheel** コンポーネントが作成され、 `Wheels[]`配列へ割り当てられます。新規の **Car** インスタンスが作成されると、Wheel コンポーネントの新しいインスタンスは前述の **Car** 専用に作成されます。これが該当しない場合、ワールド空間のある **Car** が動くと、全ての **Car** の車輪が回転します。これは明らかに望まれた動作ではありません。デフォルトのコンポーネントのインスタンス化は、**アクタ** へ固有のサブオブジェクトをすぐに追加するプロセスを簡素化します。 

[REGION:note]
**注記：**コンポーネントをインスタンス化しないと、全てのコンポーネント変数は **[インスタンス化した](Programming\UnrealArchitecture\Reference\Properties\Specifiers\Instanced) プロパティ指定子** を使用して宣言されなくてはいけません。
[/REGION]

## Actor コンポーネント

**ActorComponent** は、様々なタイプの **Actors** に追加できる再利用可能なビヘイビアを定義するコンポーネントの基底クラスです。通常は、コリジョン ジオメトリやレンダリング メッシュの形式でジオメトリと **アクタ** の関連付けに使用します。**アクタ** がワールドを移動する際の制御や、**アクタ** に関係したサウンドの再生、**アクタ** に光や影をワールドへ放つ機能をもたらします。事実、ゲームをプレイ中にワールド内でプレイヤーが目にするものや相互作用するもの全ては、実際に何らかのタイプの **Actorcomponent** が作用したものです。**ActorComponents** で、変形を持つものは **SceneComponents** であり、リンダリング可能なものは **PrimitiveComponents** です。

### コンポーネントの登録

**ActorComponent** を各フレームで更新してシーンへ反映させるには、コンポーネントをシーンへ **登録** しなくてはいけません。登録は `UActorComponent::RegisterComponent()` を呼んで実行します。 

	void UActorComponent::RegisterComponent()

この関数は、**ActorComponent** が所有 **アクタ** の `Components[]` 配列に格納されていること、シーンと関連付けること、**ActorComponent** に [レンダープロキシ](#シーンプロキシ) と [物理ステート](#物理ステート) を作成することを確認するために、`UActorComponent::RegisterComponentWithScene()` を呼びます。 

**ActorComponent** は所有 **アクタ** がスポーンされると自動的に登録されます。またサブオブジェクトとして作成され、 **アクタ** のデフォルトプロパティの `Components[]` 配列へ追加された場合も自動登録されます。再生中のどの時点においても `UActorComponent::RegisterComponent()` を呼ぶことによって登録することができます。しかしコンポーネントの登録は多少重い操作となるため本当に必要な際のみ実行してください。

#### 登録イベント

コンポーネントが登録されると以下のイベントが発行されます。

| 関数 | 説明 |
| -------- | ----------- |
| UActorComponent::OnRegister() | 必要であれば、コンポーネントの登録時に追加の初期化を可能にするイベントです。 |
| UActorComponent::CreateRenderState() | コンポーネントのレンダリングステートを初期化します。 |
| UActorComponent::CreatePhysicsState() | コンポーネントの物理ステートを初期化します。 |


### コンポーネントの登録を取り消す

**ActorComponent** は、更新、シュミレーション、またはレンダリングを回避するために登録を取り消すこともできます。コンポーネントの登録の取り消しは、`UActorComponent::UnregisterComponent()` を呼ぶと実行されます。 

	void UActorComponent::UnregisterComponent()

#### イベントの登録を取り消す

コンポーネントの登録が取り消されると以下のイベントが発行されます。

| 関数 | 説明 |
| -------- | ----------- |
| UActorComponent::OnUnRegister() | 必要であれば、コンポーネントの登録を解消する際に追加の動作を可能にするイベントです。 |
| UActorComponent::DestroyRenderState() | コンポーネントのレンダリング ステートの初期化を解除します。 |
| UActorComponent::DestroyPhysicsState() | コンポーネントの物理ステートの初期化を解除します。 |


###更新

**ActorComponent** は、`TickComponent()` 関数を用いて各フレームで更新することができます。これにより、コンポーネントは特定タイプやフレーム単位で実行が可能となります。例えば、**SkeletalMeshComponents** はアニメーションとスケルタル コントローラーを更新する際に `TickComponent()` を使用します。システムのエミッタの更新や処理するパーティクルイベントのチェックには **ParticleSystemComponents** を使用します。

コンポーネントが更新されるためには、コンポーネントが登録済み、ティックの設定 (`bComponentNeverTicks=false`)、またティック関数が設定されていなくてはいけません。 

###レンダリングステート

**ActorComponent** をレンダリングするには、レンダリング ステートを作成しなくてはいけません。**ActorComponentd** のレンダリング ステートは、レンダリング データの更新を必要とするコンポーネントに変更がもたらされたかどうかをエンジンへ伝達します。変更があった場合、レンダリング ステートはダーティとマークされます。そして現在のフレームの終了時に、全てのダーティ コンポーネントはレンダリング データを更新します。

### 物理ステート

物理エンジンを使用したシミュレーションは、**ActorComponent** に物理ステートを作成しなくてはいけません。レンダリング ステートとは異なり、変更があると直ちに更新がされる物理ステートは、決してダーティとマークされることはありません。フレームの後ろのアーティファクトなどの問題を防ぐため大変重要です。

## シーンコンポーネント

**SceneComponents** は、変換をともなう **ActorComponents** の拡張です。例えば、位置、回転、スケーリングなどです。変換の追加は **SceneComponents** もまた相互にアタッチすることを意味します。

###アタッチメント

アンリアル・エンジン 4 の全てのアタッチメントはコンポーネント レベルで処理され、**SceneComponents** のみが相互にアタッチすることができます。**SceneComponents** には、それ自体がアタッチするコンポーネントをポイントする `AttachParent` プロパティがあります。これは主に、**Actor** に複数のコンポーネントが含まれていて、その全てをアタッチするために使用します (アタッチすることが望ましい場合)。また別の **Actor** に属するコンポーネントを指定し、ある **Actor** のコンポーネントを別の **Actor** のコンポーネントにアタッチする際にも使用します。

**Actor** をお互いにアタッチするために、関連するそれぞれの **Actor** が最低 1 つの **SceneComponent** を格納しなくてはいけないことを意味します。これらが実際にアタッチするコンポーネントであるためであり、またアタッチされている **Actor** の **SceneComponent** はルートコンポーネントでなくてはなりません。理由は明確です。各コンポーネントは 1 つの親しか持てないため、アタッチされたコンポーネントはアタッチしている **Actor** のルートコンポーネントでない場合、コンポーネントとその子コンポーネントのみがアタッチされます。ルートコンポーネントはアタッチされず影響を受けないままです。同様に **Actor** 全体はルートコンポーネントとその変換に依存するため、アタッチされず影響を受けないままです。

### コンポーネントの変換

`FTransform` 構造は `Translation` ベクター、`Rotation` クォータニオン、`Scale3D` ベクターを格納します。各 **SceneComponent** は、独自の `FTransform` があります。通常は内部使用のためで、ワールドに相対する位置、回転、そしてスケーリングを表現します。追加の `RelativeLocation` ベクター、`RelativeRotation` ローテータ、そして `RelativeScale3D` ベクターも使用します。親コンポーネント、もしくはワールドに相対して機能します。これらはコンポーネントを変換、もしくはコンポーネントの変換設定をする際に一般的に使用します。

デフォルト設定で、`RelativeLocation`、 `RelativeRotation`、 そして `RelativeScale3D` は `AttachParent` に対して相対的です。これらの値は `bAbsoluteLocation`、`bAbsoluteRotation`、そして `bAbsoluteScale` プロパティを使用して強制的にワールドと相対的になります。いずれかの値を `true` に設定すると、対応するプロパティがワールドに相対的となる要因になります。

親に相対的な変換値を使用している時でさえ、以下のメソッドにワールドの絶対値を使用して、平行移動や回転を設定することができます。


| 関数 | 説明 |
| -------- | ----------- |
| SceneComponent::SetWorldLocation() | ワールド空間で与えられた位置に配置するためこのコンポーネントに相対的な平行移動を設定します。 |
| SceneComponent::SetWorldRotation() | ワールド空間で与えられた位置に配置するためこのコンポーネントに相対的な回転を設定します。 |

## プリミティブコンポーネント

**PrimitiveComponents** はある種のジオメトリを格納または生成する **SceneComponents** で、通常はレンダリングされるかコリジョン データとして使用されます。さまざまなタイプのジオメトリに対していくつかのサブクラスがありますが、最も一般的なのは **CapsuleComponent**、**StaticMeshComponent**、そして **SkeletalMeshComponent** です。**CapsuleComponents** はコリジョン検知に使用するジオメトリを生成しますがレンダリングはしません。**StaticMeshComponents** と **SkeletalMeshComponents** はレンダリングするビルド済みのジオメトリを格納しますが、コリジョン検知にも使用されます。

### シーンプロキシ

**PrimitiveComponent** の `SceneProxy` は、シーンデータをカプセル化する `FPrimitiveSceneProxy` インスタンスです。シーンデータは、ゲームスレッドに対しプリミティブを平行にレンダリングするためにミラーリングされています。`FPrimitiveSceneProxy` のサブクラスは、各プリミティブタイプに対し作成され、そのタイプのプリミティブをレンダリングするために必要な特定のレンダリングデータを保持します。

プリミティブとレンダリング ジオメトリに関する詳細は、[レンダリングシステムの概要] (Programming/Rendering) を参照してください。

