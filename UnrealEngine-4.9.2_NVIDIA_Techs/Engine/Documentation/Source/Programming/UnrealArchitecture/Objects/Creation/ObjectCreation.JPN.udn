Availability:Public
Title:UObject インスタンスの作成
Crumbs:%ROOT%, Programming, Programming/UnrealArchitecture
Description:ゲームプレイコードでオブジェクトの新規インスタンスを作成する手法
バージョン4.5

[TOC (start:2 end:3)]

## NewObject

`NewObject()`は最もシンプルな UObject のファクトリメソッドです。任意の外部オブジェクトとクラスを受け取り、自動生成される名前を伴い新規のインスタンスを作成します。

	template< class T >
	T* NewObject
	(
		UObject* Outer=(UObject*)GetTransientPackage(),
		UClass* Class=T::StaticClass() 
	)

| パラメータ | 説明 |
| --- | --- |
| `Outer` | 任意です。作成中の **UObject** の Outer として設定する `UObject` 。 |
| `Class` | 任意です。**Object** のクラスを指定する `UClass` が作成されます。
|[REGION:tablesection]戻り値[/REGION]||
| 指定クラスのスポーンされたインスタンスへのポインターです。 ||

## NewNamedObject

`NewNamedObject()` は新規インスタンスの名前と [オブジェクト フラグ](#ObjectFlags)を許可することによって`NewObject()`を展開し、テンプレートオブジェクトを引数として指定します。

	template< class TClass >
	TClass* NewNamedObject
	(
		UObject* Outer, 
		FName Name, 
		EObjectFlags Flags = RF_NoFlags, 
		UObject const* Template=NULL
	)

| パラメータ | 説明 |
| --- | --- |
| `Outer` | 作成中の **UObject** の Outer として設定する `UObject` 。 |
| `Name` | 新規 **Object** の `Name` として設定する `FName`。 |
| `Flags` | 任意です。新規の **Object** を表現する `FObjectFlags` の列挙型変数。|
| `Template` | 任意です。新規の **Object** の作成時に、テンプレートとして使用する `UObject` 。|
|[REGION:tablesection]戻り値[/REGION]||
| 指定クラスのスポーンされたインスタンスへのポインターです。 ||

## ConstructObject

柔軟性を極めるために、 `UObjects` の新規インスタンスは `ConstructObject()`関数で作成することが出来ます。この関数は **Object** を割り当てる `StaticConstructObject()` を呼び出し、`ClassConstructor` を実行し、config プロパティの読み込み、ローカライズされたプロパティの読み込み、コンポーネントのインスタンス化といった初期化を実行します。

	template< class T >
	T* ConstructObject
	(
		UClass* Class, 
		UObject* Outer = (UObject*)GetTransientPackage(), 
		FName Name=NAME_None, 
		EObjectFlags SetFlags=RF_NoFlags, 
		UObject const* Template=NULL, 
		bool bCopyTransientsFromClassDefaults=false, 
		struct FObjectInstancingGraph* InstanceGraph=NULL 
	)

| パラメータ | 説明 |
| --- | --- |
| `Class` | **Object** のクラスを指定する `UClass` が作成されます。
| `Outer` | 任意です。作成中の **UObject** の Outer として設定する `UObject` 。 |
| `Name` | 任意です。新規 **Object** の `Name` として設定する `FName`。 |
| `SetFlags` | 任意です。新規の **Object** を表現する `EObjectFlags` の列挙型変数。|
| `Template` | 任意です。新規の **Object** の作成時に、テンプレートとして使用する `UObject` 。|
| `bCopyTransientsFromClassDefaults` | 任意です。渡されたアーキタイプのポインターの代わりにクラスのデフォルトオブジェクトから一時プロパティのコピーの実行を判断する`bool`値です。`true' の場合、クラスのデフォルトオブジェクトの一時プロパティが使用されます。
| `FObjectInstancingGraph` | 任意。インスタンス化されたオブジェクトとコンポーネントのマッピングをテンプレートへ格納する `FObjectInstancingGraph` 構造です。新規の **Object** が所有するコンポーネントをインスタンス化する際に使用します。 |
|[REGION:tablesection]戻り値[/REGION]||
| 指定クラスのスポーンされたインスタンスへのポインターです。 ||


## Object Flags

`EObjectFlags` 列挙型変数は、 **Object** を速く簡潔に描写する際に使用します。**Object** タイプを表すさまざまなフラグがあります。ガーベジコレクションの処理方法の説明、ライフタイムにおける **Object** のステージ状況などです。特別な全か無のマスクや、定義済みのフラグのグループもあります。

| フラグ | 値 | 説明 |
| ---- | ----- | ----------- |
| [REGION:tablesection]オブジェクト タイプ[/REGION] |||
| *RF_Public* | `0x00000001` | **Object** は格納されているパッケージの外側から可視出来ます。 |
| *RF_Standalone* | `0x00000002` | 参照されない **Object** も編集のために保持されます。 |
| *RF_Native* | `0x00000004` | **Object** はネイティブです。これは `UClass` オブジェクトのみに使用されます。 |
| *RF_Transactional* | `0x00000008` | **Object** はトランザクション オブジェクトです。 |
| *RF_ClassDefaultObject* | `0x00000010` | **Object** は、該当クラスのデフォルトオブジェクトです。例えば、作成時にそのクラスの新規インスタンスが使用するデフォルト テンプレートなどです。 |
| *RF_ArchetypeObject* | `0x00000020` | **Object** は、別のオブジェクトのテンプレートです。クラスのデフォルト オブジェクトのような扱いです。 |
| *RF_Transient* | `0x00000040` | **Object** はディスクに保存されません。 |
| [REGION:tablesection]ガーベジ コレクション[/REGION] |||
| *RF_RootSet* | `0x00000080` | 何からも参照されない場合でも、 **Object** はガーベジコレクションされません。 |
| *RF_IsLazyReferenced* | `0x00000100` | **Object** は怠惰なポインタに参照され、削除の際に追加のクリーンアップを必要とします。 |
| *RF_Unreachable* | `0x00000200` | オブジェクトグラフ上では届かない **Object** です。 |
| *RF_TagGarbageTemp* | `0x00000400` | ガーベジコレクションを使用するさまざまなユーティリティの使用にマーク付けされる **Object** です。このフラグはガーベジコレクタそのものには解釈されません。 |
| [REGION:tablesection]オブジェクトのライフタイム[/REGION] |||
| *RF_NeedLoad* | `0x00000800` | **Object** は読み込みが必要です。 |
| *RF_AsyncLoading* | `0x00001000` | **Object** は非同期で読み込まれています。 |
| *RF_NeedPostLoad* | `0x00002000` | **Object** は後処理として読み込まれなくてはいけません。 |
| *RF_NeedPostLoadSubobjects* | `0x00004000` | **Object** はサブオブジェクトをインスタンス化し、シリアル化されたコンポーネント参照を修正する必要があります。。 |
| *RF_PendingKill* | `0x00008000` | **Object** は、破壊イベントのペンディング状態です。ゲームプレイ上の理由から無効なものとしてマスクしても、有効なままの **Object** です。
| *RF_BeginDestroyed* | `0x00010000` | **Object** は `BeginDestroy()` を呼び出しました。 |
| *RF_FinishDestroyed* | `0x00020000` | **Object は `FinishDestroy()` を呼び出しました。 |
| [REGION:tablesection]特別なマスク[/REGION] |||
| *RF_AllFlags* | `0x0003ffff` | **Object** は全てのフラグを持っています。主にエラーのチェックに使用します。 |
| *RF_NoFlags* | `0x00000000` | **Object** はフラグを持っていません。キャストの回避に使用します。 |
| [REGION:tablesection]定義済みグループ[/REGION] |||
| *RF_Load* | `RF_Public | RF_Standalone | RF_Native | RF_Transactional | RF_ClassDefaultObject | RF_ArchetypeObject` | フラグはアンリアル ファイルから読み込まれます。|
| *RF_PropagateToSubobjects* | `RF_Public | RF_ArchetypeObject | RF_Transactional` | フラグはスーパー オブジェクトのサブオブジェクトによって継承されます。 |
