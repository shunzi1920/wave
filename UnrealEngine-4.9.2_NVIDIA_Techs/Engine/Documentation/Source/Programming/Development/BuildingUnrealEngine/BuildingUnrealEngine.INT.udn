Availability:Public
Title:Building Unreal Engine from Source
Crumbs: %ROOT%, Programming, Programming/Development
Description:Compiling the Unreal Engine.
Version: 4.9

%Globals:osselect_linux%

[TOC (start:2 end:3)]

## Building Unreal Engine from Source

[EXCERPT:Main]
[OBJECT:ToggleButtonContent]
	[PARAMLITERAL:category]
	OS
	[/PARAMLITERAL]
	[PARAMLITERAL:id]
	windows
	[/PARAMLITERAL]
	[PARAMLITERAL:active]
	active_button_content
	[/PARAMLITERAL]
	[PARAM:content]
		[REGION:note]
		Make sure that Microsoft Visual Studio 2013 is installed prior to building Unreal Engine from Source.
		[/REGION]

		1.	Inside the root directory, **run GenerateProjectFiles.bat** to set-up your project files.

			[REGION:warning]
			All project files are intermediate (`[UE4Root]\Engine\Intermediate\ProjectFiles`). You must generate project files each time you sync a new build to ensure they are up to date If you delete your `Intermediate` folder, you must regenerate project files using the above-mentioned batch file.
			[/REGION]

		1.	**Load** the project into Visual Studio by **double-clicking UE4.sln**.

		1.	Set your solution configuration to **Development Editor** (pictured below).

			![](configMenu_updated.png)

		1.	If you're developing on the 64-bit version of the Windows operating system, set your solution platform to **Win64** (pictured below).

			![](platform_menu_updated.png)

		1.	**Right-click** the UE4 target and select **Build** (pictured below).

			![](BuildUE4.png)

			[REGION:note]
			Depending on your system's specifications, it may take anywhere between 10 and 40 minutes to finish compiling the engine from source.
			[/REGION]

		1.	After compiling the engine, set your startup project to **UE4** (pictured below).

			![](SetUE4_StartPrj.png)

		1.	**Right-click** the **UE4** project, **hover over 'Debug'** and **select 'Start New Instance'** to launch the compiled editor in debug mode (pictured below).

			![](RunCompiledWindowsEditor.png)

			[REGION:tip]
			Alternatively, you can **press the F5 key** to start a new instance of the compiled editor in debug mode.
			[/REGION]

		1.	Congratulations! You've compiled and launched the engine from source (result pictured below).

			![](CompiledEditor_Windows.png)
	[/PARAM]
[/OBJECT]
[OBJECT:ToggleButtonContent]
	[PARAMLITERAL:category]
	OS
	[/PARAMLITERAL]
	[PARAMLITERAL:id]
	mac
	[/PARAMLITERAL]
	[PARAMLITERAL:active]
	[/PARAMLITERAL]
	[PARAM:content]
		[REGION:note]
		Make sure that the latest version of XCode is installed prior to building Unreal Engine from Source.
		[/REGION]
		
		1.	Inside the root directory, **run GenerateProjectFiles.command** to set-up your project files.
		
		1.	Load the project into XCode by **double-clicking UE4.xcodeproj**.

		1.	To set your build target, select **UE4Editor - Mac** for **My Mac** in the title bar (pictured below).

			![](SettingMacTarget.png)

		1.	To build the project, select **Product > Build** (pictured below).

			![](BuildingMacEditor.png)

			[REGION:note]
			Depending on your system's specifications, it may take anywhere between 15 and 40 minutes to finish compiling the engine from source.
			[/REGION]
		
		1.	After compiling the engine, select **Product > Run** to launch the editor (pictured below).
		
			![](RunningMacEditor.png)

		1.	Congratulations! You've compiled and launched the engine from source (result pictured below).

			![](CompiledEditor_Mac.png)
	[/PARAM]
[/OBJECT]
[OBJECT:ToggleButtonContent]
	[PARAMLITERAL:category]
	OS
	[/PARAMLITERAL]
	[PARAMLITERAL:id]
	linux
	[/PARAMLITERAL]
	[PARAMLITERAL:active]
	[/PARAMLITERAL]
	[PARAM:content]
		[REGION:warning]
		At this time, we only provide support for Ubuntu 15.04.
		[/REGION]
		
		1.	Inside the root directory, **run GenerateProjectFiles.sh** from the terminal to set-up your project files (example pictured below). 

			![](RunGenPrjFilesShellScript_Linux.png)

		1.	To build the project, **run make** from the terminal (example pictured below).

			![](RunMakeFile_Linux.png)

		1.	After compiling the engine, navigate to the editor's binary path by entering **cd `Engine/Binaries/Linux/`** into the terminal.

		1.	Run **UE4Editor** to launch the editor (pictured below).

			![](RunUE4Editor_Linux.png)

		1.	Congratulations! You've compiled and launched the engine from source (result pictured below).

			![](CompiledEditor_Linux.png)
	[/PARAM]
[/OBJECT]

[/EXCERPT:Main]

<!--Currently deprecated for the 'Building from Source' version

## Compiling Unreal Engine

Unreal Engine 4 (UE4) uses a custom building method via the UnrealBuildTool. This tool handles all the complex aspects of compiling the engine. 

### Build Configuration

[OBJECT:ToggleButtonContent]
	[PARAMLITERAL:category]
	OS
	[/PARAMLITERAL]
	[PARAMLITERAL:id]
	windows
	[/PARAMLITERAL]
	[PARAMLITERAL:active]
	active_button_content
	[/PARAMLITERAL]
	[PARAM:content]
		Not all configurations will appear by default. Edit the [GenerateProjectFiles.bat](Programming/UnrealBuildSystem/ProjectFileGenerator) file in the main UE4 directory to generate the project files for additional configurations as needed.

		UE4 and the UnrealBuildTool use different build configurations to determine how the engine is compiled. Which configuration you use will be determined by the purposes of the build you want to create.

		The available configurations:

		| Build Configuration | Description |
		|-------------|-------------|
		| **Debug** | This configuration builds both engine and game code in debug configuration.|
		| **DebugGame** | This configuration builds the engine as optimized, but leaves the game code debuggable. This configuration is ideal for debugging only game modules. |
		| **Development** | This configuration is equivalent to Release.  Both engine and game code will be built in this configuration. |
		| **Shipping** | This is the configuration for optimal performance and shipping your game.  This configuration strips out console commands, stats, and profiling tools. |
		| **Test** | This configuration is the **Shipping** configuration, but with some console commands, stats, and profiling tools enabled. |

		The build configuration can be set in the Visual Studio toolbar.

		![UE4 Solution - Configuration Menu](configuration_menu.png)
	[/PARAM]
[/OBJECT]
[OBJECT:ToggleButtonContent]
	[PARAMLITERAL:category]
	OS
	[/PARAMLITERAL]
	[PARAMLITERAL:id]
	mac
	[/PARAMLITERAL]
	[PARAMLITERAL:active]
	[/PARAMLITERAL]
	[PARAM:content]
		The available configurations:

		| Build Configuration | Description |
		| ------------------- | ----------- |
		| **Product > Build For > Running** | This configuration builds both engine and game code in debug configuration.|
		| **Product > Build For > Profiling** | This configuration is equivalent to Release.  Both engine and game code will be built in this configuration. |
		
	[/PARAM]
[/OBJECT]

### Target Platforms

UE4 currently supports the following platforms:

[OBJECT:ToggleButtonContent]
	[PARAMLITERAL:category]
	OS
	[/PARAMLITERAL]
	[PARAMLITERAL:id]
	windows
	[/PARAMLITERAL]
	[PARAMLITERAL:active]
	active_button_content
	[/PARAMLITERAL]
	[PARAM:content]
		* **Windows 32-bit**
		* **Windows 64-bit**


		When building the engine itself, you will use the **Win64** platform.

		![UE4 Solution - Platform Menu](platform_menu.png)
	[/PARAM]
[/OBJECT]
[OBJECT:ToggleButtonContent]
	[PARAMLITERAL:category]
	OS
	[/PARAMLITERAL]
	[PARAMLITERAL:id]
	mac
	[/PARAMLITERAL]
	[PARAMLITERAL:active]
	[/PARAMLITERAL]
	[PARAM:content]
		* **Mac 64-bit**
		* **iOS Device**


		When building the engine itself, you will use the **Mac 64-bit** platform.
	[/PARAM]
[/OBJECT]

(#BinaryNamingConvention)
### Binary Naming Conventions

The name of the binaries generated will vary depending on the configuration used when building. The general naming convention is:

|Engine Mode | Naming Convention |
|----------- | ------------------|
| Editor	  | UE4Editor-Platform-Configuration.extension |
| Uncooked Game | UE4-Platform-Configuration.extension |

The exception to the rule is that for PC platforms, the platform and configuration are omitted when building the Development configuration. For example, the names of the editor executable files generated for the Win64 platform include:

| Configuration | EXE Name |
| ------------- | -------- |
| Debug | UE4Editor-Win64-Debug.exe |
| DebugGame | UE4Editor-Win64-DebugGame.exe |
| Development | UE4Editor.exe |


### Building the Engine

[OBJECT:ToggleButtonContent]
	[PARAMLITERAL:category]
	OS
	[/PARAMLITERAL]
	[PARAMLITERAL:id]
	windows
	[/PARAMLITERAL]
	[PARAMLITERAL:active]
	active_button_content
	[/PARAMLITERAL]
	[PARAM:content]
		1.	Set the **Build Configuration** to the configuration you want to build. In this example, it is set to **Development**. Refer to the [Build Configuration](#BuildConfiguration) section for descriptions of each available configuration.

			![UE4 Solution - Set Configuration to Development](config_development_menu.png)

		1.	**Right-click** the **UE4** project: 

			1. Choose **Clean** to remove any compiled or temporary files. This will ensure the next build is a full rebuild.

			1.	Choose **Rebuild** to recompile the engine.

		Alternatively, if the **UE4** project is still set as your startup project:

		1. Set your **Build Configuration**.

		1. From the **Build** menu:

			1. **Clean UE4**.
	
			1. **Rebuild UE4**.
	[/PARAM]
[/OBJECT]
[OBJECT:ToggleButtonContent]
	[PARAMLITERAL:category]
	OS
	[/PARAMLITERAL]
	[PARAMLITERAL:id]
	mac
	[/PARAMLITERAL]
	[PARAMLITERAL:active]
	[/PARAMLITERAL]
	[PARAM:content]
		1. Make sure the active scheme is set to **UE4Editor - Mac > My Mac 64-bit**.

		1. From the **product** menu, choose **Build For > Running**.
	[/PARAM]
[/OBJECT]
-->