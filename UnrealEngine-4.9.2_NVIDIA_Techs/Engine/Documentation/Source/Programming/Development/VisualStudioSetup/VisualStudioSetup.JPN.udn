INTSourceChangelist:2432054
Availability:Public
Title:UE4にVisual Studioを設定する方法
Crumbs: %ROOT%, Programming, Programming\Development
Description:アンリアル・エンジン4を使用した開発に伴いVisual Studioを設定するために役立つヒントやテクニック
Version:4.5

[TOC(start:2)]


## 概要

[EXCERPT:Intro]

アンリアル・エンジン 4 は、Visual Studio 2013 とスムーズに統合できるように設計されています。これにより、プロジェクト内でのコード変更が迅速かつ簡単になり、コンパイル直後に結果を確認できるようになります。 
Visual Studioを設定してアンリアル・エンジン4と連携させることにより、デベロッパーの効率性と 全体的なユーザー体験を向上させることができます。
[/EXCERPT:Intro]

ここでは、UE4-to-VS2013 ワークフローの設定の基礎について取り上げます。


## 推奨設定

アンリアル・エンジン4でVisual Studioを使用する開発者への推奨設定は以下となります。

[EXCERPT:BasicVSFormat]

1. **Solution Configurations ドロップダウン メニューの幅を広げます:**
	1. ツールバーを **右クリック** して、表示されるメニューの部の [カスタマイズ] を選択します。
	1.**コマンド** タブをクリックします。
	1.**ツールバー** ラジオボタンを選択します。
	1.ツールバー の横に位置するドロップダウンから、 **Standard** を選択します。
	1.コントロール リストの一番下から **Solution Configurations** コントロールを選びます。
	1.右側の [Modify Selection] を選択します。**Width(幅)** を「200」に設定します。
	1.**Close(閉じる)** をクリックします。ツールバーにすぐに反映されます。
1. **Solution Platforms ドロップダウンリストを追加します:**
	1.標準ツールバーの右端のボタンで検索します。ツールバー上のボタンの追加 / 削除をするドロップダウン メニューが開きます。
	![](menu_dropdown.png)

	1.ドロップダウン ボタンをクリックして、 **Add（追加） または Remove（削除） ボタン** 上にカーソルを合わせて、**Solution Platforms** をクリックしてツールバーにメニューを追加します。
1. **Error List ウィンドウを閉じます**。ウィンドウが有効な場合、コードに正式なエラーがあると自動的に **Error List** ウィンドウが表示されます。ただし、アンリアル エンジンでの作業中は、誤ったエラー情報が **Error List** に表示されます。ウィンドウを無効にして、代わりにコードエラーを [**Output**] ウィンドウに表示させるのがベストです。このウィンドウには実際のエラーのみが表示されます。 
	1.開いている場合は [**Error List**] ウィンドウを閉じます。 
	1.[**ツール**] メニューから [**オプション**] ダイアログを開きます。
	1.[**Projects and Solutions（プロジェクトとソリューション）**] を選択して [**Always show error list if build finishes with error**] のチェックを外します。
	1.**OK** をクリックします。

[/EXCERPT:BasicVSFormat]

その他の便利な設定手順は以下となります。

* **Show Inactive Blocks**をオフにします。このオプションをオンのままにすると、グレーアウトされたコードチャンクが テキストエディタに表示されることがあります (_Tools > Options > Text Editor > C/C++ >View_)。
* **Solution Explorer** に必要のないフォルダを非表示にするために **Disable External Dependencies Folders** を _True_ に設定します。 (_Tools > Options > Text Editor > C/C++ > Advanced_ から 「Disable External Dependencies Folder」 を無効にします。)
* **Edit & Continue** 機能も必要ないのでオフにします。 (_Tools > Options > Debugging > Edit and Continue_)

* IntelliSense をオンにします。（[Intellisense, Live Errors, and Squiggles]（#Intellisense）を参照してください）

**Visual Assist X をインストールされている場合は以下の作業を行ってください:**
* **Format After Paste** をオフにします。時々動作が不安定になります(_VAssistX > Visual Assist X Options > Advanced > Corrections_)。


(#Intellisense)
## Intellisense、 Live Errors、 Squiggles

UE4プロジェクトは、IntelliSenseを正式サポートするようになりました。このサポートには、ライブエラーリストと"Squiggles"も含まれます。 
（有効にする方法は下記を参照してください）

IntelliSense は、ユーザーが入力する C++ コードを再コンパイルします。コード全行を検証するフル C++ コンパイラを使用するため、 
VAXの構文チェック機能のみよりもより強力な機能です。大変すばらしい機能で、 
ワークフローの迅速化が図れます！

![VC++ Intellisense Squiggles](squiggle.png)

Squiggles に加えて、閲覧しているファイルに IntelliSense エラーが Error List として表示されます。 
このオプションは Error List に表示されるメニューを **右クリック** して、オンオフを切り替えることが出来ます。

![Error List](error_list.png)

UE4 プロジェクトと機能しなかったため、既にSquigglesを無効に設定されているかもしれません。 [C/C++ Advanced] タブを必ず開いて、 
下記のような設定をしてください。

![VC++ Advanced Options](intellisense_options.png)

C++ファイルを開いたとき、以下のアイコンが表示されることによってIntelliSenseコンパイラーが「実行」されていることがわかります：

![Intellisense Progress Indicator](intellisense_progress.png)

### 実装詳細

* コード編集時に、Squiggles が表示されるまでに数秒かかる場合があります。
    * 大量のインクルードファイルが存在し、現状では IntelliSense は PCH を使用しないためです。
* 時々IntelliSenseの「false positive」エラーが発生します。このエラー発生の原因としていくつかの理由が考えられます。
    * IntelliSenseコンパイラー（EDG）は、MSVCコンパイラーよりもより明確なコードを求めます。
    * IntelliSense では、通常のビルド時とは異なる「#defines」の設定がいくつかあります。
    * IntelliSense でコンパイルされる C++ は、常に 32 ビットで扱われます。 
* 不可欠な場合は、コードを「`#ifdef __INTELLISENSE__`」でラップして Squiggle を非表示にすることが出来ます。
* IntelliSenseエラーは、VC++コンパイラーのエラーとは若干異なる表現法が使用されます。単にそのような設定となっています。
* ヘッダファイルの Squiggles は、ヘッダファイルをインクルードする「.cpp」にコンパイルすることによって機能します。
    * 時々 IntelliSense はこれに失敗し、 Squiggles がヘッダに含まれている場合があります。
* 「**Max Cached Translation Units**」設定（上記に表示）をご自身の設定に調整してください。
    * より多くのメモリを消費しますが、応答性が多少向上します。
* 未だIntelliSenseに対応しないC++ファイルもいくつかあります。
* アンリアル・ビルド・ツールに、「`-IntelliSense`」オプションが新規に加わりました。
    * 全てのプロジェクトファイルに対し、IntelliSense プロパティシートを出力します。
    * 新しいモジュールの追加、また格納されているプロジェクトに変更があった時のみ再実行が必要です。


## UnrealVS拡張機能

[INCLUDE:Programming/Development/VisualStudioSetup/UnrealVS#Overview]


設定と拡張機能の使用に関する情報は、[](Programming/Development/VisualStudioSetup/UnrealVS)  
ページを参照してください。


##デバッグ作業

Visual Studioは`visualizers`でデバッガを拡張するサポートがあり、オブジェクトの FName や動的配列など一般的なアンリアルタイプの調査を容易にします。


###ビジュアライザーの設定 (Visual Studio 2013)

[PUBLISH:Licensee]
UE4配布の一部に、ビジュアライザーロジックに関するファイルが含まれています：

	//depot/UE4/Engine/Extras/VisualStudioDebugging/UE4.natvis
[/PUBLISH:Licensee]

[PUBLISH:Rocket]
インストールの一環で、ビジュアライザーロジックに関するファイルを検索してください。

	[UE4Root]/Engine/Extras/VisualStudioDebugging/UE4.natvis
[/PUBLISH:Rocket]

このファイルを以下のいずれかの位置にコピーします。

	[VSINSTALLDIR]/Common7/Packages/Debugger/Visualizers/UE4.natvis
	[USERPROFILE]/My Documents/Visual Studio 2013/Visualizers/UE4.natvis

[REGION:warning]
Visual Studio のインストールディレクトリへファイルをコピーするには、管理者からのアクセス許可が必要な場合があります。
[/REGION]

