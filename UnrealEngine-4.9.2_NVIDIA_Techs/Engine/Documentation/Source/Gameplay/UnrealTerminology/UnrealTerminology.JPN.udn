NTSourceChangelist:2419450
Availability:Public
Title:アンリアルプロジェクトとゲームプレイ
Crumbs: %ROOT%, Gameplay
Description:アンリアルエンジンのプロジェクト、レベル、クラス、アクタ入門

プロジェクトに関するあらゆるものはプロジェクトディレクトリ内に格納されます。好きな数だけプロジェクトを作成することができますが、各プロジェクトは独立しています。 [新規プロジェクトの作成] (Engine/Basics/Projects/Browser#creatingnewprojects) にアンリアルエンジンの [**Project Browser**] を使用すると、
[ディレクトリ構造](Engine\Basics\DirectoryStructure) やアンリアル プロジェクト ファイル (`.uproject`) など、 
 [アンリアルエディタで開く](Engine/Basics/Projects/Browser#プロジェクトを開く) ことができるプロジェクト フレームワークが設定されます。  

プロジェクトに格納されるアセットは、「Content」フォルダに「`.uasset`」ファイルとして保存されます。こうしたアセットはマテリアル、スタティックやスケルタルメッシュ、ブループリント、サウンドキュー、そしてテクスチャを含むことが可能です。ユーザーのプロジェクトのオブジェクトで呼び出し可能な再利用できるリファレンスマテリアルおよびテンプレートです。
　

プロジェクトにはレベルも含まれます。レベルは、マップとも呼ばれ、「Content」フォルダ内の「`.umap`」ファイルとして保存されます。アンリアルエディタでは、一度に一つのマップの作業を行います。 
レベルは **ビューポート** に表示されます。 

![](map_viewport.png)(w:500)

<!-- **アクタ** はアンリアルエンジン4において最も重要な概念です。ゲームにはアクタがたくさんあります。ゲーム内のすべてのインタラクティブなエンティティはアクタだからです。通常、アクタには 1 つ以上のコンポーネントがあり、 **レベル** 内に配置するか、ゲームプレイ中に **スポーン** されます。マルチプレイヤー ゲームではネットワークのレプリケーションをサポートします。 -->

最も基本的なレベルでは、 **アクタ** は1つ以上のコンポーネントを（通常）格納するゲームプレイエンティティで、 **レベル** に配置したりゲームプレイ中に **スポーン** することができて、マルチプレイヤーゲームのネットワークレプリケーションをサポートします。上記のレベルでは、グラウンドプラットフォーム、レベル中央のブロック、画面下部の PlayerStart の表示は全てアクタです。全てのアクタは、 AActor クラスから拡張されます。このクラスは _スポーン可能_ なゲームプレイオブジェクトのベースクラスです。

アクタはある意味、コンポーネントとと呼ばれる特別なタイプの **オブジェクト** を保持するコンテナとして考えられます。例えば、 _CameraActor_ は _CameraComponent_ を格納します。

![](camera_actor.png)

FOV（視野角）のようなカメラの機能は、全て_CameraComponent_ 内に格納されます。つまり _CameraComponent_ は、これらのオブジェクトに対し同一のカメラ機能を実装するために、 
キャラクターのように別のアクタに含むことができます。

![](pawn_actor.png)

異なるタイプのコンポーネントを、アクタの移動方法、レンダリング方法、また機能の他の部分に使用することができます。コンポーネントを含むすべてのオブジェクトは、UObjectクラスから拡張されて、全ゲームプレイオブジェクトのベースクラスです。 
UObject クラスは、全ゲームプレイオブジェクトの基底クラスです。つまりこのクラスは、ワールド内へ直接インスタンス化することはできず、アクタに属さなければいけません。

各アクタ、またはオブジェクトはクラスの単一インスタンスです。クラスはアクタまたはオブジェクトのテンプレートを設定します。テンプレートは、アクタあるいはオブジェクトに設定可能な変数、
そしてアクタまたはオブジェクト内で実行可能な関数を定義します。ユーザーは、 _Blueprint クラス_ でいくつかのオブジェクトを拡張することもできますが、 
 C++ コードでオブジェクトとアクタの新規クラスまたはタイプを作成することができます。新規の C++ クラスを作成して、このクラスから _Blueprint クラス_ を派生させることによって、これら両方を同時に実行することも出来ます。新規のアクタおよびオブジェクトのためのクラス作成に関する詳細は 
 [クラス作成の基本](Gameplay\ClassCreation) ページを参照してください。

