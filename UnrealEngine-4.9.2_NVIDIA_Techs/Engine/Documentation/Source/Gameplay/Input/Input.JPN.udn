INTSourceChangelist:2344922
Availability:Public
Title:入力値
Crumbs:%ROOT%, Gameplay
Description: プレイヤーからの入力値をアクタに理解させて使用できるデータ形式へ変換する 入力 オブジェクト。


**PlayerInput** オブジェクトは、 プレイヤーからの入力をアクタに理解させて利用可能なデータ形式へ変換します。例えば PlayerControllers または Pawn などのアクタは、 
入力を理解してこれらを利用することができます。これは入力処理フローの一部で、プレイヤーからのハードウェア入力をゲームイベント、 PlayerInput マッピングや InputComponents を使用した動作へ変換します。

[REGION:note]
**入力** の設定例に関しては、 [](Gameplay\HowTo\SetUpInput) を参照してください。
[/REGION]

[TOC (start:2 end:4)]

## ハードウェアへの入力
プレイヤーからのハードウェアへの入力はとても直接的です。キー入力、マウスクリックやマウス動作、そしてコントローラーボタン入力かジョイスティックによる入力が最も一般的です。 


## PlayerInput（プレイヤー入力）
[EXCERPT:PlayerInput]
PlayerInput はプレイヤー入力を管理する PlayerController クラス内の UObject です。PlayerInput はクライアント側でのみスポーンされます。2 つの構造体が PlayerInput 内に定義されます。
まず、「FInputActionKeyMapping」が「ActionMapping」を定義します。次に「FInputAxisKeyMapping」が「AxisMapping」を定義します。 
「ActionMappings」と「AxisMappings」両方で使用するハードウェアの入力定義はInputCoreTypesで設定します。 

[EXCERPT:ActionMapping]
$ ActionMappings :後にイベント駆動の動作と結合する「フレンドリーネーム」とディスクリートボタンかキー入力をマッピングします。最終的な効果は、キー、マウスボタン、またはキーパッドボタンをクリック（そして/または解放）すると、特定のゲーム動作が直接トリガーされます。
   
[/EXCERPT:ActionMapping]

[EXCERPT:AxisMapping]
$ AxisMappings :ゲーム内の移動など、後に継続的なゲーム動作と結合する「フレンドリーネーム」と、キーボード、コントローラーまたはマウス入力をマッピングします。AxisMappingsでマッピングされた入力値は、たとえ入力値が0である報告のみの場合でも継続的にポーリングされます。 
ActionMappings への入力でトリガーされる離散型のゲームイベントではなく、移動や別のゲーム動作のスムーズな変形を有効にします。  

	[REGION:tip]
	ゲーム用コントローラーのジョイスティックなどのハードウェア軸は、「discrete 1（ボタンを押した状態）」または「0（ボタンを押していない状態）」入力よりも、入力の度合いを感知します。つまり、わずかな入力や力強い入力でキャラクターを動かすことが可能で、その度合いによってもキャラクター動作はさまざまとなります。 
	このような入力手法はスケーラブルな量の動作入力となるため理想的である一方、 AxisMappings も一般的な操作キー、例えば WASD キーや上、下、左、右矢印などで、ゲーム動作を継続的にポーリングすることができます。 
	[/REGION:tip]
[/EXCERPT:AxisMapping]

### 入力マッピングの設定

入力マッピングはコンフィギュレーションファイルに格納されていますが、レベルエディタの [Project Settings] タブで簡単に設定できます。

1. Rocket のレベルエディタで、 **[Edit] > [Project Settings] > [Input]** の順に選択します。

	![](ProjectSettingsMenu.png)

1. 表示される **Project Settings** タブで **Input** をクリックします。


このウィンドウで以下の設定を行うことができます：

**(ハードウェア) 軸入力のプロパティの変更:**
![](AxisConfig.png)

**ActionMappings の追加または編集:**
![](ActionMappings.png)

**AxisMappings の追加または編集:**
![](AxisMappings.png)
[/EXCERPT:PlayerInput]

## InputComponent（入力コンポーネント）
InputComponents は通常ポーンやコントローラに作成されますが、必要に応じて別のアクタやレベルスクリプトに設定することも出来ます。InputComponent は、ユーザープロジェクトの AxisMappings と ActionMappings をゲームアクションとリンクさせます。
通常は関数として、 C++ コードかブループリントグラフに設定します。  

InputComponents による入力処理のプライオリティスタックは以下の通りです (優先順位の高い順から)。

1. 直前に有効となった「Accepts input」を伴うアクタ。ドアからピックアップアイテムまでさまざまです。
	1. 入力処理は、「Accepts input」が有効となった全てのアクタを経由して、直前に有効となったものから最も長時間有効となっている順番で処理されます。

	[REGION:tip]
	入力処理で特定のアクタを常に優先したい場合、そのアクタの「Accepts input」を再び有効にして、スタックのトップに移動させることができます。 
	[/REGION:tip]
1. コントローラー
1. レベルスクリプト
1. ポーン

InputComponent が入力を受け取ると、そのコンポーネントはその後スタックでは利用できません。

## 入力処理の手順

[REGION:raw]
![](InputFlow.png)
[/REGION]

###例 - 前進

この例は、アンリアルエンジン 4 に同梱される First Person テンプレートからの抜粋です。  

1. ** ハードウェアへの入力：** プレイヤーが **W** を推します。
1. **PlayerInput Mapping:1. **PlayerInput Mapping:**  AxisMappingは **W** を値 1 のスケーリング値の「MoveForward」へ変換します。

![](AxisMappingW.png)

1. **InputComponent Priority Stack:** InputComponent のプライオリティスタックを通過した「MoveForward」入力が最初に結合するものは、AFirstPersonBaseCodeCharacterクラス内にあります。このクラスは現在のプレイヤーのポーンであるため、InputComponent が最後に確認されます。 

		void AFirstPersonBaseCodeCharacter::SetupPlayerInputComponent(class UInputComponent* InputComponent)
			{
				// ゲームプレイのキーバインド設定
				check(InputComponent);
				...
				InputComponent->BindAxis("MoveForward", this, &AFirstPersonBaseCodeCharacter::MoveForward);
				...
			} 

	この手順はキャラクターのイベントグラフに InputAxis MoveForward ノードを設定することで、ブループリントで実現することも出来ます。このノードと接続されている値が、 **W** キーがクリックされると実行されます。

	![](InputMappingMoveForward.png)

1. 	**ゲームロジック：** AFirstPersonBaseCodeCharacter の MoveForward 関数を実行

		void AFirstPersonBaseCodeCharacter::MoveForward(float Value)
			{
				if ( (Controller != NULL) && (Value != 0.0f) )
				{
					// 前進方向の確認
					FRotator Rotation = Controller->GetControlRotation();
					// 歩行または落下時のピッチ (上下動) の制限
					if ( CharacterMovement->IsMovingOnGround() || CharacterMovement->IsFalling() )
					{
						Rotation.Pitch = 0.0f;
					}
					// その方向へもたらす動きを追加
					const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
					AddMovementInput(Direction, Value);
				}
			}
	ブループリントの実装： 


	[REGION:fullwidth]
	![](MoveForward_Blueprint.png)
	[/REGION:fullwidth]

## タッチ インターフェース

タッチデバイス上で動作するゲームは、デフォルトで 2 つのバーチャルジョイスティックがあります (例えばコンソールコントローラー)。この設定は、 **[Project Settings]** の **[Input]** セクションから、**Default Touch Interface** プロパティを選択して変更できます。 
**Default Touch Interface** プロパティこれは Touch Interface Setup アセットを示します。デフォルトのインターフェース、 **DefaultVirtualJoysticks** は、共有エンジンコンテンツ (`/Engine/MobileResources/HUD/DefaultVirtualJoysticks.DefaultVirtualJoysticks`) に格納されています。 
また、カメラの回転を必要としないゲームのために、Left Stick専用バージョンの **LeftVirtualJoystickOnly** もあります。

![](VirtualJoysticksSettings.png)(w:800)

オブジェクト ピッカーの **ビュー オプション** で、 **[Show Engine Content]** チェックボックスをオンにしなくてはいけません。

![](showenginecontent.png)

バーチャル ジョイスティックを使用しない場合、 [Default Touch Interface] プロパティの値をクリアします。また **Always Show Touch Interface** をチェックすると、動作しているプラットフォームとは無関係なゲームにタッチインターフェースを強制的に使用することも出来ます (または、「-faketouches」でPCゲームを実行)。

