INTSourceChangelist:2552957
Availability:Public
Title:ブループリントで関数をレプリケーションする方法
Crumbs: %ROOT%, Gameplay, Gameplay\HowTo\Networking\ReplicateFunction
Description:ブループリントを使ってマルチプレイヤー ゲームで関数をレプリケートするための操作ガイド 
Related:Engine/Blueprints
Related:Resources/ContentExamples/Networking


[TOC (start:2 end:2)]

## 概要

**レプリケートされた関数** を様々な形式に設定し、使用する方法を紹介します。 

レプリケート関数は、主に以下の 3 種類に分類されます。**Multicast** 、 **Run on Server** 、 **Run on owning Client** です。Multicast 関数は、実行され、その後自動でクライアント側に順送りされると、サーバー上で呼び出されます。Server 関数はクライアントによって呼び出され、サーバー上でのみ実行されます。Client 関数はサーバーで呼び出され、所有しているクライアント上でのみ実行されます。

## Multicast

 _この例では、 **Starter Content が含まれる Blueprint Third Person Template** を使用します。_

 **Multicast** レプリケート関数を設定する方法を説明します。 
 
1.	MainMenu マップを開いて、 **[Play]** ボタンの横にある下向きの矢印をクリックし、 **Number of Players** を **4** に設定します。 

	[REGION:raw]
	![](HowTo2.png)
	[/REGION]

	[REGION:tip]
	**[Advanced Settings]** オプションで、マルチプレイヤー用に生成されたウィンドウのサイズを変更することができます。 
	[/REGION]

1.	**コンテンツ ブラウザ** の **Content/ThirdPersonBP/Blueprints** で **ThirdPersonCharacter** ブループリントを開きます。 

1.	グラフを **右クリック** し、 **Space Bar** Key Event を追加し、 **Spawn Actor from Class** ノードに接続します。 

1.	 **右クリック** して **Get Actor Transform** ノードを追加し、**Class** を **Blueprint_Effect_Fire** に設定して以下のように接続します。 

	![](HowTo3.png)

	これを押すと、プレイヤー キャラクターの位置で炎のエフェクトがスポーンされます。 

1.	**コンパイル** および **保存** をしたら、ブループリントを終了し、 **[Play]** ボタンをクリックしてエディタでプレイします。 

1.	ゲーム内で [Server] というウィンドウを探して、ジャンプするために **スペース バー** を押します。 

	![](HowTo4.png)

	スポーンされたエフェクトが見えるのはこのサーバー ウィンドウのみで、その他のプレイヤーからは見えません。 
	他のプレイヤーでジャンプを試みる場合、他のプレイヤーは炎のエフェクトをローカルにのみスポーンし、との他のプレイヤーはスポーンされたエフェクトに気づきません。 
	さらに、炎のエフェクトはキャラクターにはアタッチされていないので、 **スペース バー** を押した時のみキャラクター位置でのみスポーンされます。 

	[REGION:tip]
	**Shift + F1** でマウス コントロールが可能になり、マルチプレイヤー テスティング中にゲームウィンドウ間をジャンプできます。 
	[/REGION]

1.	**ThirdPersonCharacter** ブループリントで、**Space Bar** ノードの **Pressed** を **右クリック** して切断します。 

1.	**右クリック** して **Custom Event** を見つけて追加し、 **MulticastSpawn** Event を呼び出します。 

1.	カスタム イベントをクリックし、 **[Details]** パネルの **[Replicates]** のドロップダウン メニューを **Multicast** に設定し、以下のように接続します。 

	![](HowTo5.png)

	最後のステップでは、**Multicast** Replication を使用するようにカスタム イベントを設定します。上のような結果になります。 

1.	**Space Bar** Key Event を引き出して、コール関数 **MulticastSpawn** を追加します。 

	![](HowTo6.png)

	[REGION:note]
	作成したカスタム イベントが見つからない場合は、 **[Compile]** ボタンをクリックして再度検索してください。 
	[/REGION]

1.	**コンパイル** および **保存** をしたら、ブループリントを終了し、 **[Play]** ボタンをクリックしてエディタでプレイします。 

1.	ゲーム内で [Server] というウィンドウを探して、ジャンプするために **スペース バー** を押します。 

	![](HowTo7.png)

	今回は、スペース バーを押すとサーバーのプレイヤーがジャンプし、サーバーだけでなくすべてのクライアント上で炎のエフェクトがスポーンされる様子が確認できます。クライアント側にはエフェクトがスポーンされたことを伝えていないので、他のプレイヤーでジャンプを試しても、エフェクトはまだローカルでしかスポーンされません。その設定方法を、次のセクション『 **Run on Server** 』で説明します。 


## Run On Server

 _このセクションでも、引き続き **Multicast Replication** からのサンプルを使用します。_

 **Run on Server** レプリケート関数の設定は、以下の手順でおこないます。 
 
1.	**コンテンツ ブラウザ** の **Content/ThirdPersonBP/Blueprints** で **ThirdPersonCharacter** ブループリントを開きます。 

1.	**MulticastSpawn** Custom Event を選択し、**Replicates** ドロップダウン オプションを **Run on Server** に変更します。 

	![](HowTo8.png)

	整合を取るために **Graph Node** を **Run On Server** に変更します。 

1.	**コンパイル** および **保存** をしたら、ブループリントを終了し、 **[Play]** ボタンをクリックしてエディタでプレイします。 

1.	ゲーム内で [Server] 以外のゲーム ウィンドウを検索し、ジャンプさせるために **スペース バー** を押します。 

	![](HowTo9.png)

	炎のエフェクトはどのプレイヤーがジャンプしてもサーバー上でのみスポーンされます。サーバー上のプレイヤー以外には見えません。このスクリプトは命令通りにサーバー上でのみ実行されているので、エフェクト自体がレプリケートされて、サーバーだけでなくすべてのクライアントに渡されるようにしてください。 

1.	**Content/StarterContent/Blueprints** フォルダ内で、**Blueprint_Effect_Fire** ブループリントを開きます。 

1.	メイン ツールバーで **Class Defaults** を選択し **[Details]** パネルで **[Replicates]** チェックボックスにチェックを入れます。 

	![](HowTo10.png)

1.	**コンパイル** および **保存** をしたら、ブループリントを終了し、 **[Play]** ボタンをクリックしてエディタでプレイします。 

1.	ゲーム内で [Server] 以外のゲーム ウィンドウを検索し、ジャンプさせるために **スペース バー** を押します。 

	![](HowTo11.png)

	すべてのクライアント上でも見えるようにアクタをレプリケートする設定にしたので、サーバー側のスクリプトを部分的に実行するようにサーバーに実際ににメッセージを送りました。

## Run On Owning Client

_このセクションでも、引き続き **Multicast Replication** からのサンプルを使用します。_

このセクションでは、サーバー イベントが発行されると、ある特定のクライアントだけを更新する変数を作成してみます。 

 **Run on owning Client** レプリケート関数の設定は、以下のステップで行います。 
 
1.	**Content/ThirdPersonBP/Blueprints** フォルダで **ThirdPersonCharacter** ブループリントを開きます。 

1.	**[MyBlueprint]** ウィンドウで、新規に Bool 変数を作成し、 「**isOnFire**」 という名前を付けて **[Compile]** をクリックします。 

	![](Inventory.png)

1.	変数の **[Details]** パネルで **String** 、**Editable** 、**Replicated** に設定し、 **Default Value** に 「**Empty**」と入力します。 

	![](HowTo12.png)

	この値を **Replicated** に設定しておけば、接続先のマシンにネットワーク経由で確実にレプリケートされます。これを使って、キャラクターがトリガー ボリュームへ入った時にマルチプレイヤー ゲームでアイテムを拾い、トリガー ボリュームを去る時にアイテムを取り除くシミュレーションを行ってみます。 

1.	**Print String** ノードに接続されている **P** Key Event を追加し、 **Control** を押しながら **Inventory** 変数へドラッグして、以下のように接続します。 

	![](HowTo13.png)

1.	**コンパイル** し **保存** してから、**ThirdPersonCharacter** ブループリントを閉じます。 

1.	**[Modes]** ウィンドウの **[Basic] ** タブにある **Box Trigger** をレベル内にドラッグします。 

	![](HowTo14.png)

	プレイヤー キャラクターがトリガー領域に入ると、作成した変数を更新しますが、トリガー ボックスに入ったキャラクタのクライアントの変数のみです。 

1.	**Box Trigger** の **[Details]** パネルで、 **Rendering** の **[Actor Hidden In Game]** オプションのチェックを外します。 

	![](UnHideBox.png)

	エディタでプレイする場合にレベルでボックスが見えるようになり、テストしやすくなります。 

1.	**[Box Trigger]** をクリックして選択し、メイン ツールバーから **[Level Blueprint]** を開きます。 

	![](HowTo15.png)

1.	グラフを **右クリック** して、 **Begin Overlap** を検索して、 **Add On Actor Begin Overlap** Event を選択します。 

	![](HowTo16.png)

1.	前のステップを繰り返します。しかし、今回は **Add On Actor End Overlap** を検索して選択します。 

1.	それぞれのノードを **Switch Has Authority** ノードに接続します。 

	![](HowTo17.png)

	**Switch Has Authority** ノードは、実行中のスクリプトはどこから実行されているのかを確認し、そのスクリプトの実行元がネットワーク経由の **Authority** (権限のある) マシン(通常はサーバー) または **Remote** (リモート) マシン (クライアント) のどちらなのかによって、2 つに分岐します。 

	イベントをサーバー側のみで発生させたい場合 (不正行為ができないように、クライアントがこの類の変更時の発生時期を決定できないようにしたいので、プレイヤーのヘルス値の調整、報酬や略奪品の分配などは通常ゲームプレイで非常に重要です)、大抵は **Authority** を使います。 

	この例では、テキスト変数を更新してみます。プレイヤーのヘルス値を含む変数や収集アイテムの変数と同じくらい簡単です。 

1.	グラフ内を **右クリック** して、 **Add Item** という名前の **Custom Event** を追加します。 

1.	Replicates オプションを **Run on owning Client** に設定し、 **Actor** に設定されている **Character** という名前の入力を追加します。 

	![](HowTo18.png)

	[REGION:note]
	作成後、ノード上にエラーの警告が出た場合は、 **[Compile]** ボタンをクリックしてエラーを取り除きます。 
	[/REGION]

1.	「**Remove Item**」 という名前の **Custom Event** を **Add Item** Event と同じ設定でもう 1 つ作成します。 

1.	**Add Item** ノードと **Remove Item** ノードを以下のように 2 つの Overlap Event に接続します。 

	![](HowTo19.png)

	トリガーがオーバーラップした時に、サーバー上でオーバーラップが発生すると、サーバー側の **Add Item** Event を実行し、それを所有するクライアント (トリガーをオーバーラップするキャラクター) へレプリケートすると宣言しています。「それ」とは、 **Add Item** の発行時に呼び出され、クライアントへレプリケートされ、サーバー側でのみ実行されるスクリプトを指します。キャラクターがトリガー ボックスを出ると、再度サーバー側が判断し、サーバーで **Remove Item** Event を実行して、それを所有するクライアントへレプリケートします。 

1.	**Add Item** Event から **Print String** (テキストは **Item Added** に設定) を追加して、 **Character** から **Cast To ThirdPersonCharacter** を引き出して追加します。 

	![](HowTo20.png)

1.	**As Third Person Character**　ピンを引き出して、**Has the Item** に設定されている **Set Inventory** ノードを検索して追加します。 

	![](HowTo21.png)

	ここで、サーバー側で実行されクライアント側へレプリケートされたイベントを受け取り、画面に「item added」と印字した後で、所有するクライアントの **Inventory** テキスト変数を [Has the item] に設定します。 

1.	**Add Item** Event に続く 3 つのノードをコピーして、 **Remove Item** Event に接続します。 

1.	**Print String** を **Item Removed** に、**Inventory** テキスト変数を　**Empty** に変更します。 

	![](HowTo22.png)

	これで、キャラクターがトリガーを出ると、テキスト変数がサーバー上で更新されて、所有するクライアントへレプリケートされます。 

1.	**コンパイル** し **保存** してから、**Level ブループリント** を閉じてエディタでプレイします。 

	[![](ExampleImage.png)](MultiplayerExampleVideo.mp4)

	_クリックするとサンプル動画が再生します。_

	この動画では、ゲームの起動時に、 **P** の押してテキスト変数を画面に印字すると、それが各キャラクターに対して「emply」と表示されます。ただし、キャラクターの 1 つがトリガーボックスへ入ると、[item added] というテキストが表示されます。このキャラクターが **P** を押すと、残りのキャラクターの表示は [empty] ままですが、テキストが [has the item] に変わります。キャラクターがボックスを出ると、[item removed] が表示されますが、再度 **P** を押すとテキストは [empty] に戻ります。 

	以上が、サーバー側でイベントを実行し、それらを個々のクライアントにレプリケートする方法の説明です。 





