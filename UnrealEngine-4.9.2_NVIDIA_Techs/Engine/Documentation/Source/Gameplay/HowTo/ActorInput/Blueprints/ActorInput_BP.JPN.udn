INTSourceChangelist:2474040
Availability:Public
Title:ブループリントでアクタに入力を設定する方法
Crumbs:%ROOT%, Gameplay, Gameplay/AI
Description:ブループリントでアクタに入力を設定するためのガイド 

[TOC (start:2 end:2)]

## 概要

このページでは、アクタの **入力を有効** または **入力を無効** にする基本的な方法を説明します。アクタの入力を有効にすると、プレイヤーがボタンまたはキーを押してアクタに何かしら影響を及ぼすイベントを実行できるようになります (ライトのオンオフの切り替え、ドアの開け閉め、何かをアクティブにする、など)。 

**『入力の使用を有効/無効にする』** セクションでは、 Trigger Volume を使ってプレイヤーがレベル内でアクタに近いかどうかを判断して、入力を有効 / 無効にする方法を説明します。この方法は、近づいた時、または現実世界のシナリオで考えた限りでアクタに影響すると思われる範囲に来た場合のみアクタに影響させたい、という場合に便利です。 
 

## アクタ入力を有効にする

 _ここでは **Blueprint First Person Template with Starter Content** を使います。_

以下の方法で、アクタの入力を有効にします。

1.	「 **Game/Blueprints** 」フォルダの **Blueprint_Effect_Fire** を開きます。 

1.	**[Event Graph]** タブで、再びグラフ内を 右クリック** して、 **Event Begin Play** ノードを見つけて追加します。 

1.	グラフ内を **右クリック** し、 **Get Player Controller** ノードを見つけて追加します。 

1.	グラフ内を **右クリック** し、 **Enable Input** ノードを見つけて追加します。 

1.	**Event Begin Play** の出力ピンを **Enable Input** ノードの入力ピンに接続します。 

1.	**Get Player Controller** ノードを **Enable Input** ノードの **Player Controller** ピンに接続します。 

	![](input_1.png)

	これが、アクタで入力を有効にする基本的な方法です。 
	**Enable Input** ノードは、 **Target** (通常は Self - とアクタそのもの) だけでなく **Player Controller** (入力を与えるプレイヤー) も指定する必要があります。この設定で、 **Input Event** ノード (キーやマウスボタンの押下など) を見つけて追加し、これらのキーが押されるとアクタに影響を与えるアクションを実行します。 

	上の例では、 **Event Begin Play** ノードはゲームが開始すると (レベルないにアクタを存在するならば)、 **Player Controller** の **Enable Input** が指定されることを宣言します。デフォルトの Player Controller はシングルプレイヤー ゲームに **Player Index 0** を使います。シナリオが複数ある場合、 **Player Index** 値でプレイヤーを指定することができます。 


## アクタ入力を無効にする

アクタの入力を有効にするように、 **Disable Input** ノードを使えばアクタの入力を無効にすることもできます。 

![](input_2.png)

上記の例では、前述の方法でアクタの入力を有効にしてから、 **E** Key イベントを追加しました。E キーが押されると、アクタへ入力されないように、画面にテキストを印刷してアクタの入力を無効にします。 

**Enable Input** ノードと同様、 **Disable Input** ノードは **Target** と **Player Controller** を指定する必要があります。 


## 入力使用を有効 / 無効にする

上記の方法は入力を有効 / 無効にしますが、通常はアクタがプレイヤーから入力を受け取るかを管理する規則が必要に感じます。上記の方法で Event Begin Play の入力を有効化し、(例えば) キーを押してライトをオンオフできる場合、プレイヤーはワールドのどこからでもライトのオンオフが可能になります。 

以下のような感じで、プレイヤーがライトの近くにいるかどうかに基づいて入力の有効化 / 無効化を行いたいです。  

1.	**「Game/Blueprints」** フォルダで、 **Blueprint_CeilingLight** アセットを開きます。 

1.	**[Components]** パネルで **[Add Component]** をクリックし、 **Sphere** を見つけて追加します。 

	![](input_3.png)

1.	**[Details]** パネルで、 **Variable Name** を **[Trigger]** に、 **Z Transform** を **[-180.0]** に、 **X, Y, Z** の **Scale** を **[8]** に設定します。

	![](input_4.png)

	(プレイヤーが内部の場合) Sphere の入力を有効にし、 (プレイヤーが外側の場合) 入力を無効にします。 

1.	ウィンドウの右上の **[Graph]** タブをクリックし、 **Event Graph** へ戻ります。 

1.	**MyBlueprint** ウィンドウで、 **[Trigger]** を **右クリック** し、 **[Add Event -> Add OnComponentBeginOverlap]** を選びます。 

	![](input_5.png)

1.	**[Trigger]** を **右クリック** し、 **Add Event -> Add OnComponentEndOverla** を選びます。 

	![](input_5b.png)

	これらの 2 つのノードはグラフへ追加されなければなりません。 

1.	Begin Overlap ノードの **Other Actor** ピンを引き出し **Cast To MyCharacter** ノードを追加します。 

	![](input_6.png)

	ここでは、 **MyCharacter** (Project Template のデフォルトのプレイヤー キャラクター) というアクタが **Trigger** をオーバーラップすると何かをするようにします。 

1.	End Overlap ノードの **Other Actor** ピンを引き出し **Cast To MyCharacter** ノードを追加します。 

1.	**Get Player Controller** ノード、 **Enable Input** ノード、 **Disable Input** ノードを **右クリック** して追加します。 

1.	以下のようにノードを接続します。 

	![](input_7.png)

	プレイヤーがトリガー領域に入る時のみ入力は有効にされ、プレイヤーがトリガーを離れると無効にされるようになりました。これにより、プレイヤーがワールドのどこからでもアクタに影響してしまうことを防ぎ、作成されたトリガー領域の内部にいる場合のみに制限されます。 

1.	**E** Key イベントを **右クリック** し **Print String** ノードに追加します。 

	![](input_8.png)

1. 	**コンパイル** し **保存** してから、ブループリントを終了します。 

1.	**Blueprint_CeilingLight** をレベルにドラッグし、 **[再生]** ボタンをクリックしてエディタで再生します。 

再生中にライトから離れた時に **E** を押すと、何も起こりません。(トリガー内で) ライトに近づいて **E** を押すと、「 **Hello** 」というテキストがウィンドウの左上隅に表示されます。この例では **Print String** ノードを接続しましたが、キーを押した時にプレイヤーがトリガー領域内にいる場合、ライトカラー、郷土、その他の設定を切り替えることができます。 

### 入力の詳細

上記の例の中の **E** Key イベントを **Space Bar** Key イベントに置き換えて使ってみます。エディタで再生した場合、どうなるでしょうか。ライト用のトリガー領域の外にいる場合 **スペースバー** を押すとジャンプすることができますが、トリガー領域内に入ると **スペースバー** を押してもジャンプはしませんが、その代りに **Print String** とテキスト「 **Hello** 」を呼び出します。これは **Input Priority** によるものです。 

入力コマンドを共有すると (この場合では、ライトに割り当てた入力と Jump は両方とも **スペースバー** に結びついています)、優先度の低いアクションが無視されます。Light ブループリント内で **Space Bar** Key イベントをクリックし **[Details]** パネルを見ると、 **Consume Input** 用のオプションがあるはずです。 

![](input_9.png)

**[Consume Input]** のチェックボックスのチェックを外し、再びエディタで再生すると、ライトのトリガー ボリュームの内外でのジャンプが可能になっているはずです。ライトのトリガー ボリューム内で **スペースバー** を押すと、 **Print String** ノードと「 **Hello** 」というテキストが表示されます。 

また、 **[Input Details]** ウィンドウには、 **[Execute when Paused]** (ポーズ ステート中のキーを押してコマンドの実行を可能にする) と **[Override Parent Binding]** (親クラスのバインディングの削除を可能にする) のオプションがあります。 






