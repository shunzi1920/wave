INTSourceChangelist:0
Availability: Public
Title:Using Timers in Blueprints
Crumbs: %ROOT%, Gameplay, Gameplay\HowTo\UseTimers
Description:A How To Guide for using timers in Blueprints. 

[TOC (start:2 end:2)]

This page covers how to use **Timers** for gameplay purposes in Blueprints and the nodes associated with Timers. 
 
## Creating and Clearing Timers

The steps below will show you how you can create/set a Timer in Blueprints. 

_For this example, we are using the **Blueprint Third Person Template** and will be causing fire damage to the player over time._

1.	Inside your project, open the **ThirdPersonCharacter** Blueprint. 

1.	**Right-click** in the graph and add two **Custom Events** called **PlayerInFire** and **PlayerNotInFire**.

	![](GHT6B_1.png)

1.	In the **MyBlueprint** window, add a new **Function** called **FireDamage**. 

	![](GHT6B_2.png)

	This Function will be called over time by the **Timer** and will apply the damage. 

1.	Drag off the **PlayerInFire** Event and add the **Set Timer** node. 

1.	Drag off the **PlayerNotInFire** Event and add the **Clear Timer** node. 

1.	For both **Set Timer** and **Clear Timer**, set the **Function Name** to **FireDamage**. 

1.	On the **Set Timer**, set the **Time** to **0.75** and check the **Looping** box. 

	![](GHT6B_3.png)

	The **Time** entered is the interval in which the **Function Name** Function will be called (every 0.75 seconds). 

1.	Create a new **Int** variable called **PlayerHealth**, click **Compile**, then set the **Default Value** to **100**. 

	![](GHT6B_4.png)

1.	Inside the **FireDamage** Function, while holding down the **Alt** key, drag the **PlayerHealth** variable into the graph.

1.	Hold down **Control** and drag in the **PlayerHealth** variable as well. 

1.	Drag off the **PlayerHealth** variable and add an **Integer - Integer** node, then off the 0 pin, add a **Random Integer in Range** node. 

	![](GHT6B_5.png)

	We used a **Random Integer in Range** node with Min (1) and Max (4) values, however you can enter a damage value if you wish.

1.	Off the **Set** node, add a **Print String** then **Control** drag in **PlayerHealth** and connect it to the **Print String**. 

	![](GHT6B_6.png)

	We are not displaying Health Bars in this example; however this will show us that the Health Value is indeed decreasing.

1.	Open the **Blueprint_Effect_Fire** Blueprint, then click the **Components** tab. 

1.	Click the **Add Component** button and add a **Box** shape and call it **Trigger**. 

	![](GHT6B_7.png)

	When the player enters/exits this Trigger, we will call the Events in the **ThirdPersonCharacter** Blueprint. 

1.	Return to the **Graph** tab and **Right-click** on the **Trigger** and add the **OnComponentBegin** and **OnComponentEnd** Overlap Events. 

	![](GHT6B_8.png)

1.	Drag off the **Other Actor** pin of each and add the **Cast To ThirdPersonCharacter** node. 

1.	Drag off the **As Third Person Character C** pin and (for the Begin node) add **PlayerInFire** and (for the End node) **PlayerIsNotInFire** Events. 

	![](GHT6B_8b.png)

1.	**Compile** and **Save**, then close the Blueprint. 

1.	In the **Content Browser**, drag the **Blueprint_Effect_Fire** Blueprint into the level. 

	![](GHT6B_9.png)

1.	When you click the **Play** button to play in the editor, enter the fire and you should see you start to take damage. 

This is an example of how you could use timers to create a damage-over-time effect; however you could use timers to represent other things such as a power-up that lasts for X seconds which allows the player to be invincible or have some other ability. 


## Additional Timer Related Nodes

While the **Set Timer** and **Clear Timer** nodes are used to start/stop a Timer, the nodes below may also be of use based on your needs. 

### Get Timer Elapsed and Get Timer Remaining

![](GHT6B_10.png)

The **Get Timer Elapsed** and **Get Timer Remaining** nodes will get the amount of time that has elapsed since starting or get the amount of time remaining for the specified Timer (indicated by the FunctionName). It returns the value as a Float and can be used for several different purposes, for example, changing an effect over time or providing a message when an effect is about to expire. 

### Pause Timer and Un Pause Timer

![](GHT6B_11.png)

As the names suggest, the **Pause Timer** pauses the timer at its current time whereas the **Clear Timer** stops it entirely and resets it. The **Un Pause Timer** node can be used to resume a paused timer and pick up where it left off. One example use case would be if a player has an effect applied to them that runs on a timer and they enter a menu or inventory screen for example and you want to pause the effect and resume it when they return to gameplay. 

### Timer Exists, Is Timer Active and Is Timer Paused

![](GHT6B_12.png)

The **Timer Exists**, **Is Timer Active**, and **Is Timer Paused** nodes all return a **True** or **False** value and can be used to determine if a Timer exists, if a Timer is currently active or if a Timer is currently paused respectively. 

### Set Timer Delegate

![](GHT6B_13.png)

The **Set Timer Delegate** node functions similar to the Set Timer node except instead of specifying a Function Name, you can connect a **Custom Event** which will be fired. You can set this to looping as well, just as you could with the Set Timer node. To clear it, you can use the Clear Timer node and in the Function Name, enter the name of your Custom Event.
