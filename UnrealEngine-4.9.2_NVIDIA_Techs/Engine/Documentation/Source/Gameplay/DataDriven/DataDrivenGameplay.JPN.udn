INTSourceChangelist:2481343
Availability:Public
Title:データ駆動型のゲームプレイエレメント
Crumbs:%ROOT%, Gameplay
Description:外部格納データを使用するゲームプレイエレメントの操作

[TOC(start:2)]

データ駆動型ゲームプレイは、一般的なボックス型ゲームの寿命を軽く上回るゲームの場合、 
作業量と複雑度が軽減しやすくなると同時に、 
データの作成や進行状態の視覚化やパラメータ化も 
可能にします。実績のあるツールによる管理が可能で、 
インポートするとゲームに自動反映できる **Excel** やその他のスプレッドシート ドキュメントへデータを移動できます。

Excel ドキュメントでデータを UE4 にインポートする新しい方法が 2 通りあります:

* DataTables
* CurveTables


これらの Excel ドキュメントは、 マクロベースのエクスポートボタンがある `.xlsm` (マクロ有効 **Excel** ドキュメント) です。 
中間データフォーマット、.cvs (comma separated variables) へのエクスポートが簡単にできます。 
これらの Excel ドキュメントは、検索や修正しやすいように、全て 1 つの場所に常駐しています。

* [](Example.xlsm) (ダウンロードは、 **右クリック** して **[Save as...]**)


##データ テーブル

データテーブルは、名前から想像できるように、数多くの関連データのテーブルを意味を持たせて使いやすいようにグループ化し、 
データフィールドがアセット リファレンスを含む有効な Uobject プロパティとなります。デザイナーが CSV ファイルをデータテーブルへインポートする前に、 
そのデータの解釈方法をエンジンに指示する行コンテナをプログラマーが作成します。 
これらのテーブルは、コードをベースにした UStruct とその変数が 1:1 にマッピングされたカラム名で構成されます。 
名前は、インポートする側が認識できるように、 FTableRowBase から継承しなければなりません。 

DataTables と同様に、最初の列に見出しはなく、ゲームの中で使用するために各行にアクセスできる名前が含まれます。その後の列にはヘッダ用の変数名が入り、 
同じコラムの下の方にはその行と列の交差位置のデータが入ります。このフォーマットで 
1 つの行が FTableRowBase から継承した構造体に 1:1 で直接マップします。

### 例

例をあげると、データをゲームに提供するレベルアップ体験データと CSV ドキュメントに対する定義は以下のようになります：

	/** Structure that defines a level up table entry */
	USTRUCT(BlueprintType)
	struct FLevelUpData : public FTableRowBase
	{
			GENERATED_USTRUCT_BODY()

	public:

			FLevelUpData()
							:XPtoLvl(0)
							, XP(0)
			{}

			/** The 'Name' column is the same as the XP Level */

			/** XP to get to the given level from the previous level */
			UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=LevelUp)
			int32 XPtoLvl;

			/** This was the old property name (represented total XP) */
			UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=LevelUp)
			int32 XP;

			UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=LevelUp)
			TAssetPtr<UTexture> Asset;
	};


**CSV ドキュメント:**

	Name,XPtoLvl,XP,Asset
	1,0,0,"Texture2d'/Game/UI/HUD/Actions/Barrel'"
	2,1000,1000,"Texture2d'/Game/UI/HUD/Actions/Barrel'"
	3,1000,2000,"Texture2d'/Game/UI/HUD/Actions/Barrel'"
	4,1500,3500,"Texture2d'/Game/UI/HUD/Actions/Barrel'"
	5,2000,5500,"Texture2d'/Game/UI/HUD/Actions/Barrel'"
	6,2500,8000,"Texture2d'/Game/UI/HUD/Actions/Barrel'"
	7,3000,11000,"Texture2d'/Game/UI/HUD/Actions/Barrel'"
	8,3500,14500,"Texture2d'/Game/UI/HUD/Actions/Barrel'"
	9,4000,18500,"Texture2d'/Game/UI/HUD/Actions/Barrel'"
	10,4500,23000,"Texture2d'/Game/UI/HUD/Actions/Barrel'"
	11,5000,28000,"Texture2d'/Game/UI/HUD/Actions/Barrel'"
	12,5500,33500,"Texture2d'/Game/UI/HUD/Actions/Barrel'"
	13,6000,39500,"Texture2d'/Game/UI/HUD/Actions/Barrel'"
	14,6500,46000,"Texture2d'/Game/UI/HUD/Actions/Barrel'"
	15,7000,53000,"Texture2d'/Game/UI/HUD/Actions/Barrel'"
	16,7500,60500,"Texture2d'/Game/UI/HUD/Actions/Barrel'"
	17,8000,68500,"Texture2d'/Game/UI/HUD/Actions/Barrel'"
	18,8500,77000,"Texture2d'/Game/UI/HUD/Actions/Barrel'"
	19,9000,86000,"Texture2d'/Game/UI/HUD/Actions/Barrel'"
	20,9500,95500,"Texture2d'/Game/UI/HUD/Actions/Barrel'"

[REGION:tip]
アセットタイプの前後のダブルクオテーションは、プロパティ インポート パイプラインにとって重要です。これらがないと、テキストは Texture2d' としてインポートされます。 
[/REGION]

## Data Curves

Data curves は DataTables と同じように機能しますが、 
浮動小数点のみに対応します。DataTables と同様に、最初の列名は `Name` で、 
ゲームの中で使用するために各行にアクセスできる名前が含まれます。2 列目からは、 
描画されるカーブに対する X 軸変数が格納されています。この見出しの下のデータは、その行の Y 軸の値です。このフォーマットで 
コードのアクセスできるカーブに 1 つの行が対応し、それに応じてデータを補間します。

### 例

以下は、ダメージの進行に対するテーブルの例です:

[REGION:simpletable]
|                      | 0   | 1   | 2   | 3   |
| -------------------- | --- | --- | --- | --- |
| Melee_Damage         | 15  | 20  | 25  | 30  |
| Melee_KnockBack      | 0   | 0   | 0   | 0   |
| Melee_KnockBackAngle | 0   | 0   | 0   | 0   |
| Melee_StunTime       | 0   | 0   | 0   | 0   |
[/REGION]

## インポートプロセス

CSV ドキュメントのインポートプロセスはシンプルです。

1.	ファイルを Excel または拡張子が 'csv' の他のスプレッドシートで保存します。
2.	アンリアル エディタを開き、 **コンテンツ ブラウザ** の **[Import]** をクリックします。
3. DataTable としてインポートしたい CSV ファイルの場所へ行き選択します。
4. 最後に、ドロップダウン リストから列に当たるもの、ここでは LevelUpData を選択します。

	![](levelupdata_options.png)

	この操作により、 **コンテンツ ブラウザ** の現在のディレクトリに DataTable オブジェクトが作成されます。

	![](datatableobject.png)

	そのオブジェクトを **ダブルクリック** すると、エディタ内で DataTable のコンテンツが表示されます。オブジェクトを **右クリック** してメニューから **[Reimport]** を選ぶと、オブジェクトが更新されます。 
	オブジェクトの再インポートには、元のファイル パスが使われます。ご注意ください。インポート後のデータはこのような表示になります。

![](datatableview.jpg)

## データの連携

上記のテーブルから、非常に簡単にデータ連携が行えます。プログラマーの観点で言えば、要は 
DataTable と CurveTable のいずれか使用したい方に合わせて、 
 `FDataTableRowHandle` か `FCurveTableRowHandle` のいずれかのブループリントのエクスポーズされた変数を配置すればよいのです。コンテンツ プロバイダの観点で言えば、 
2 つのサブフィールドを持つデータフィールドが公開されます:

1.	DataTable/CurveTable - データを持つテーブルへ参照するコンテンツです。
2.	RowName - データを取得したい行の最初の列の名前です。


## データの使用方法 (プログラマー向け)

データを連携させれば、データの使用方法は非常に簡単です。ハンドルの構造体によりヘルパー関数 (`FindRow()` と `GetCurve()`) が与えられ、 
データの入った構造体またはカーブを取得することができます。 
'FCurveTableRowHandle' の場合は、'FRichCurve' ポインタが返されます。ただし、'FDataTableRowHandle' は、 
テンプレート関数呼び出しの際に構造体を指定することができます。この構造体が、継承階層における最終の構造体 
または、あらゆるものの親となることができます。

最後の注釈ですが、返された構造体とカーブは全て関数のローカルスコープ以外の場所にキャッシュしないように 
注意してください。テーブルが再インポートで更新された場合、 
データ変更がすぐに反映されて無効なポインタへのアクセスがないようにするためです。

上記の DataTable の例で参照したアセットは、ゆっくりロードされたアセットです (TAssetPtr により処理されます)。 
アセット フィールド タイプが Utexture に設定されていると、DataTable のロード時にすべてのアセットがロードされます。
