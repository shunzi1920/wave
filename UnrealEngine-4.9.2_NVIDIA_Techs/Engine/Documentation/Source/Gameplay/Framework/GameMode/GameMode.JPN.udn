INTSourceChangelist:2542856
Availability:Public
Title:GameMode
Crumbs:%ROOT%, Gameplay/Framework
Description:ゲームのルール設定に重要なゲームモード

オープンエンド型ゲームでさえ基本的なゲームのルールがあり、これらのルールがゲームタイプを構成しています。最も基本的なレベルでは、以下のルールが含まれます。

* 現在のプレイヤーとスペクテーター (観戦者) 数に加え、許容されるプレイヤーとスペクテーターの最大数
* スポーン位置とスポーンおよびリスポーンの挙動を含んだプレイヤーのゲーム参加方法
* 一時停止機能の利用可否と、一時停止の処理方法
* ゲームをシネマティック モードで開始するか否かの決定を含むレベル間の遷移

全てのゲームタイプは共通した一定の基本原理がありますが、制作しているゲームのジャンルによって無限のバリエーションが考えられます。ファーストパーソン・シューティング ゲームに良く知られるゲームタイプにはデスマッチ、キャプチャー・ザ・フラグ、そしてラスト・マン・スタンディングがあります。ロールプレイ アドベンチャーゲームやぷラットフォーマーなど他のジャンルではそれほど明確なゲームモードを必要としないかもしれませんが、ゲームの諸条件を設定するために存在します。例えば、時間制限が設けられ、プレイヤーが特定の位置に到着したり「ボス」キャラクターを打ち負かすとレベルがクリアする条件にします。ダンジョンをゆっくりと進んでいくタイプのゲームがさらに複雑なケースになります。メインとなるワールドには、ゲームの進捗と状態を追跡する包括的なゲームタイプが設定されます。各段ジョン内で、ダンジョンに特化したゲームタイプがあります。それぞれのダンジョンを完全に固有なものとし独自のルールや目標を設定します。

2 つのメインクラスがゲームタイプの情報を処理します。GameMode と GameState クラスです。 

## GameMode クラス


AGameMode クラスはプレイするゲームを定義し、ゲームルールを実行します。AGameMode クラスのデフォルト機能のいくつかに以下が含まれます。 


ゲームルールを設定する全ての関数または変数は、 AGameMode クラスのサブクラスへ追加しなくてはいけません。ゲームの開始時にプレイヤーが保持するインベントリ アイテム、制限時間内に有効な残数、 GameMode に属するゲームを終了するために必要なスコアAGameMode クラスのサブクラスは、ゲームに含まれる必要のあるゲームタイプそれぞれに対して作成される場合があります。ゲームにはいくつものゲームタイプを設定することができます。従って、 AGameMode クラスのサブクラスをいくつでも持つことができます。GameMode アクタは、プレイのためにレベルが初期化されるたびに UGameEngine::LoadMap() 関数によってインスタンス化されます。このアクタが定義するゲームタイプは、レベルの持続時間に利用されます。

<!--
	[/Script/Engine.GameMode]
	+GameModeClassAliases=(ShortName="DM",GameClassName="UTGame.UTDeathmatch")
-->

### Match ステート

GameMode を Match ステートをトラックするステート マシーンまたは一般的なゲームプレイ フローを含みます。現在のステートをクエリするために、 GetMatchState や、 HasMatchStarted 、 IsMatchInProgress, HasMatchEnded のようなラッパーを使用することができます。以下が考えられる Match ステートです。

* EnteringMap は初期ステートです。アクタはまだ動作しておらず、ワールドは完全には初期化されていません。ロードが完全に終了すると次のステートへ移ります。
* 次のステートである WaitingToStart に移ると、 HandleMatchIsWaitingToStart が呼び出されます。アクタは動作しますが、プレイヤーはまだスポーンされていません。ReadyToStartMatch が _true_ を返した場合、または StartMatch が呼びだされた場合、次のステートへ移ります。
* 次のステートである InProgress に移ると、全てのアクタ上に BeginPlay が呼び出されます。通常のゲームプレイが進行中です。ReadyToEndMatch が _true_ を返した場合、または EndMatch が呼びだされた場合、次のステートへ移ります。
* 次のステートである WaitingPostMatch に移ると、 HandleMatchHasEnded が呼び出されます。アクタはまだ動作していますが、新規プレイヤーは受け取られていません。マップ転送が開始されると、次のステートへ移ります。
* 次のステートである WaitingPostMatch に移ると、 HandleLeavingMap が呼び出されます。新規マップへの転送中、 Match はこのステートのままです。
* Aborted は失敗ステートで、 AbortMatch から始まります。修復不能なエラーがある場合に設定されます。

デフォルトで、 Match ステートはほぼ常に InProgress です。ただし、ゲームは個別にこのビヘイビアをオーバーライドし、より複雑なルールでマルチプレイヤー ゲームをビルドすることができます。

### GameMode から生成したブループリント

GameMode はブループリントで利用可能なクラスです。GameMode から生成した _ブループリント_ を作成して、プロジェクトやレベルのデフォルトのゲームモードとして使用することが可能です。

GameMode から生成したブループリントに以下のデフォルト値を設定することができます。
* デフォルトの Pawn クラス
* HUD クラス
* Player Controller クラス
* Spectator クラス
* Game State クラス
* Player State クラス 


### GameMode の設定

レベルに GameMode を設定する方法は何通りかあります。優先度の低い方法から説明します。 

* DefaultGame.ini」ファイルの「/Script/Engine.WorldSettings/」セクションに GlobalDefaultGameMode エントリを設定すると、プロジェクトの全マップに対してデフォルトのゲームモードが設定されます。 

		[/Script/Engine.WorldSettings]
		GlobalDefaultGameMode="/Script/MyGame.MyGameGameMode"
		GlobalDefaultServerGameMode="/Script/MyGame.MyGameGameMode"

* 個別マップのプロジェクト設定をオーバーライドするには、エディタの **[World Settings]** タブで **GameMode Override** を設定します。 

	![](WorldSettings_GameMode.png)

* ゲーム起動時にある特定のオプションでを強制的に読み込ませる URL を実行ファイルへ渡すことができます。ゲームモードの設定は 「game」 オプションを使用します。詳細は [](Programming/Basics/CommandLineArguments) を参照してください。

		UE4Editor.exe /Game/Maps/MyMap?game=MyGameMode -game

* 最終的に、「DefaultGame.ini」 ファイルの「/Script/Engine.WorldSettings/」セクションにマップのプレフィックスが設定されます。これらのプレフィックスは、ある特定のプレフィックスを持つ全てのマップに対してデフォルトのゲームモードを設定します。 

		[/Script/Engine.WorldSettings]
		+DefaultMapPrefixes=(Prefix="DM",GameMode="UTGame.UTDeathmatch")


[REGION:note]
**Game Mode** の設定例は、 [Game Mode の設定](Gameplay\HowTo\SettingUpAGameMode) を参照してください。
[/REGION]