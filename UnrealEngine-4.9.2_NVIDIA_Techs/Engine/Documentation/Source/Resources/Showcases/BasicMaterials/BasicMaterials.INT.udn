Availability: Docs
Title:Basic Materials Example
Crumbs:%ROOT%, Resources
Description:An overview of the Basic Materials example included with UE4.



[VAR:Topic]
[OBJECT:Topic]
	[PARAM:image]
		![%Resources/Showcases/BasicMaterials:title%](BasicMaterials_Topic.png)
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%\anim_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Resources/Showcases/BasicMaterials:title%
	[/PARAM]
	[PARAM:description]
		%Resources/Showcases/BasicMaterials:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Resources/Showcases/BasicMaterials]
	[/PARAM]
[/OBJECT]
[/VAR]


[VAR:TopicCompact]
[OBJECT:TopicCompact]
	[PARAM:image]
		![%Resources/Showcases/BasicMaterials:title%](BasicMaterials_Topic.png)
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%\anim_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Resources/Showcases/BasicMaterials:title%
	[/PARAM]
	[PARAM:description]
		%Resources/Showcases/BasicMaterials:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Resources/Showcases/BasicMaterials]
	[/PARAM]
[/OBJECT]
[/VAR]



[REGION:fullwidth]
![](Tricycles.jpg)
[/REGION]

[TOC(start:2)]

This example overviews some of the most elementary and critical concepts required to make use of Unreal Engine 4's powerful Materials system. Included in the showcase are the following features:

* [Basic Lit Materials](#SimpleMaterials)
* [Subsurface Scattering Materials](#SubsurfaceScattering)
* [Multiple Materials on a Single Object](#MultipleMaterialsonaSingleObject)
* [Material Functions](#Multi-MaterialBlendingviaMaterialFunctions)



When the BasicMaterials map is opened for the first time, the scene looks upon two virtually identical child's tricycles, both standing in a patch of grass, within a small area surrounded by a wooden fence. Each element in this scene shows off some of the basic principles of creating and using Materials. For the purposes of this documentation, we will discuss the Materials on each element, moving from the simplest to the most complex.


## Simple Materials

Our first object shows the most basic type of Material; one with its Shading Model property set to _MLM_DefaultLit_. The wooden fence seen in the background of the demo level consists of a single Static Mesh with a single Material applied to it. This Material is named _M_Rocket_BasicMat_Fence_. To view the Material's node network, simply follow these steps:

1. Select any of the fence panel meshes.

	![](FencePanel.png)(w:500)

1. In the **Details** panel, locate the _Materials_ category.

	![](MaterialsCategory2.png)

1. **Double-click** to open the fence's Material in the Material Editor.

	[REGION:fullwidth]
	![](FenceMat.png)
	[/REGION]


This Material consists of two simple textures; one that defines the Base Color property, and another that supplies the surface normals. Two Constant nodes drive values of 0 and 0.9 for Metallic and Roughness, respectively. This means that the surface will have virtually no reflectivity or specularity, just like old wood.

For more information on Materials, please see the [](Engine/Rendering/Materials) documentation.


## Subsurface Scattering

The panels of grass that make up most of the floor of the level exhibit a subsurface scattering Material. Subsurface scattering is the simulation of light passing through a translucent Material. Consider candle light passing through candle wax. The light does not pass straight through; it diffuses throughout the surface. Materials in UE4 can simulate this effect, as demonstrated in the blades of grass.

[REGION:fullwidth]
![](GrassUpClose.png)
[/REGION]


[REGION:note]
	For a Material to utilize subsurface scattering, the Material's **Shading Model** property must be set to _MLM_Subsurface_. This property can be found within the Material Editor Properties panel by selecting the main Material node.
[/REGION]

However, it is important to note that this is not a physically accurate subsurface scattering model. Instead, a "Subsurface Color" is used along with the Base Color, simulating the effect of light passing through the surface and picking up the Subsurface Color as it diffuses. The effect is similar to this diagram:


![](SubScatDiagram.png)(w:600)



To see this Material:

1. Select any of the panels of grass.

	![](GrassPanelSelected.png)(w:500)

1. In the **Details** panel, locate the _Materials_ category.

	![](MaterialsCategory3.png)

1. **Double-click** to open the grass's Material in the Material Editor.

	[REGION:fullwidth]
	![](Grassmat.png)
	[/REGION]


In this Material, the **Shading Model** property has been set to _MLM_Subsurface_. The Base Color texture is being interpolated by 30% with a pale green. This gives a very subtle cast to light that hits the blades of grass, giving the illusion that pale green light is moving through each blade.





## Multiple Materials on a Single Object

[REGION:fullwidth]
![](MultiMaterials.png)
[/REGION]

The tricycle on the left side of the scene contains 8 individual Material Elements, broken up across the surface of the model. There are, in turn, 5 individual Materials placed within these slots. This is achieved by first placing multiple Materials on the model within your 3D content creation application prior to FBX export into Unreal. This process is handled differently across each of the various packages, but the result is the same. It should be noted that with the exception of 3ds Max and its Multi-SubObject Material system, multi-Materials will import into Unreal in an algorithmic order that may not be what you wanted. For instance, you may want the first Material Element slot to be for a character's head, while the second slot is for the body. When importing from Maya, the FBX file may switch those around.

To remedy this, make sure to name your Materials in the 3D package with the suffix **_skin***** where ******* represents a number (_skin001, _skin002, and so on). Unreal will take these Material names into account when placing the Material Element order. Also, we mentioned earlier that 3ds Max was an exception to this. That is because of the Material ID number that is applied to polygons using Multi-SubObject Materials. Unreal can use those values to place Material Elements instead of having to use a naming convention.

Note that each of the 5 Materials applied to the tricycle are exceedingly basic, each having a flat Base Color, a normal map, and various values for Metallic and Roughness, which define the primary surface properties.


## Multi-Material Blending via Material Functions

The tricycle on the right side of the scene makes use of _Material Functions_ to blend a series of Materials together, resulting in a single Material being applied, rather than requiring multiple Material Element slots. 

[REGION:fullwidth]
![](RightTricycle.png)
[/REGION]

Instead of using standard Materials, each part of the tricycle (red paint, chrome, rubber, etc.) is instead first laid out within its own Material Function. Material Functions can have a _Make Material Attributes_ node within them, which, in effect, makes them behave just like a basic Material with one exception: _a Material Function can contain any number of other Material Functions within it_. This means that once you have created a series of Material Functions to represent the different types of surfaces you will need, you can then bring them together in one master Material Function, using a blend texture to determine what Materials will be placed on which pixels. For example, consider this simplified diagram:

![](MaterialFunction_Diagram.png)(w:600)


Each of the base Materials that make up the tricycle are Material Functions in and of themselves. If you open one of them up, such as _ML_Rocket_BasicMat_RedColor_, you will see that it is a pretty basic network, consisting of a Base Color with a Roughness texture.

**Click for full size.**

[REGION:lightbox]
[![](RedPaintMF.png)(w:600)](RedPaintMF.png)
[/REGION]


If you examine the Material Function that is actually applied to the tricycle, you will see this:

[REGION:fullwidth]
![](FinalTricycleLayers.png)
[/REGION]

This consists of 5 Material Functions, each of which are blended together using a **MatLayerBlend_Standard** function, with an RGBA texture as the Alpha. This is done in a series, such that the _Blended Material_ output of each of the **MatLayerBlend_Standard** functions is used as the Base Material input of the next. 

![](MatFunctionBlend.png)(w:700)

By using different channels of the RGBA texture, up to 5 different Materials can be blended using a single map. Note that black, or the lack of RGBA information, will expose a base Material, which is how you get 5 options from only 4 slots (RGBA). The texture being used is shown below:

![](TricycleBlendMap.png)(w:400)

| **Map Color** | **Associated Material** |
| --- | --- |
| **Black (Base Material)** | Red tricycle paint |
| **Red** | Chrome |
| **Green** | Yellow paint |
| **Blue** | Black rubber |
| **Alpha** | Red rubber |

Once all of this blending is done, the final Blended Material output is passed through a **MatLayerBlend_GlobalNormal** function, which allows a single normal map to be applied to the entire end result, like so:

![](NormalMapApplied.png)

For more information on Material Functions, please see the [](Engine/Rendering/Materials\Functions) documentation.

## Related Topics

* [](Engine/Rendering/Materials)
* [](Engine/Rendering/Materials\Functions)
