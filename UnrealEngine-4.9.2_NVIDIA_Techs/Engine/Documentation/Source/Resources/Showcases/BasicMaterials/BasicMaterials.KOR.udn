INTSourceChangelist:2620111
Availability: Docs
Title:기본 머티리얼 예제
Crumbs:%ROOT%, Resources
Description:UE4 에 포함된 Basic Materials, 기본 머티리얼 예제에 대한 개요입니다.



[VAR:Topic]
[OBJECT:Topic]
	[PARAM:image]
		![%Resources/Showcases/BasicMaterials:title%](BasicMaterials_Topic.png)
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%\anim_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Resources/Showcases/BasicMaterials:title%
	[/PARAM]
	[PARAM:description]
		%Resources/Showcases/BasicMaterials:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Resources/Showcases/BasicMaterials]
	[/PARAM]
[/OBJECT]
[/VAR]


[VAR:TopicCompact]
[OBJECT:TopicCompact]
	[PARAM:image]
		![%Resources/Showcases/BasicMaterials:title%](BasicMaterials_Topic.png)
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%\anim_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Resources/Showcases/BasicMaterials:title%
	[/PARAM]
	[PARAM:description]
		%Resources/Showcases/BasicMaterials:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Resources/Showcases/BasicMaterials]
	[/PARAM]
[/OBJECT]
[/VAR]



[REGION:fullwidth]
![](Tricycles.jpg)
[/REGION]

[TOC(start:2)]

이 예제는 언리얼 엔진 4 의 강력한 머티리얼 시스템을 활용하는 데 있어 가장 기본적이고 핵심적인 개념 일부를 살펴봅니다. 쇼케이스에 포함된 기능은 다음과 같습니다:

* [기본 라이팅포함 머티리얼](#단순머티리얼)
* [서브서피스 스캐터링 머티리얼](#서브서피스스캐터링)
* [한 오브젝트에 여러 머티리얼](#한오브젝트에여러머티리얼)
* [머티리얼 함수](#머티리얼함수를통한다중머티리얼블렌딩)



BasicMaterials 맵을 처음 열어 보면, 나무 울타리로 둘러쌓인 작은 공간 안에 사실상 동일한 아동용 세발 자전거 두 대가 풀밭 위에 서있는 씬이 보입니다. 이 씬 안의 각 엘리먼트는 머티리얼 제작과 사용에 있어 기본적인 원칙을 보여주고 있습니다. 이 문서의 목적상 각 엘리먼트의 머티리얼에 대해, 가장 간단한 것에서부터 복잡한 것까지 논해보도록 하겠습니다.


## 단순 머티리얼

첫 오브젝트는 가장 기본적인 머티리얼 유형을 나타냅니다. Shading Model 프로퍼티가 _MLM_DefaultLit_ 으로 설정된 것이지요. 데모 레벨 배경에 보이는 나무 울타리는 하나의 머티리얼이 적용된 스태틱 메시 하나로 구성되어 있습니다. 이 머티리얼의 이름은 _M_Rocket_BasicMat_Fence_ 입니다. 머티리얼의 노드 네트웍을 확인하기 위한 절차는 다음과 같습니다:

1. 울타리 판넬 메시를 아무거나 선택합니다.

	![](FencePanel.png)(w:500)

1. 디테일 패널에서 _Materials_ 카테고리 위치를 찾습니다.

	![](MaterialsCategory2.png)

1. 더블클릭하면 머티리얼 에디터에 펜스 머티리얼이 열립니다.

	[REGION:fullwidth]
	![](FenceMat.png)
	[/REGION]


이 머티리얼은 두 개의 단순 텍스처로 구성됩니다. 하나는 Base Color 프로퍼티를 정의하며, 다른 하나는 표면의 노멀을 제공합니다. 두 개의 Constant 노드를 통해 Metallic 과 Roughness 의 값으로 각각 0 과 0.9 를 돌려주고 있습니다. 즉 표면이 마치 오래된 나무처럼, 거울반사도 빛반사도 없다는 뜻이 됩니다.

머티리얼 관련 상세 정보는 [](Engine/Rendering/Materials) 문서를 참고해 주시기 바랍니다.


## 서브서피스 스캐터링

레벨의 바닥 대부분을 이루는 풀밭 판넬은 서브서피스 스캐터링 머티리얼을 보여줍니다. 서브서피스 스캐터링이란 빛이 반투명 재질을 통과하는 상황에 대한 시뮬레이션입니다. 촛불이 초의 밀납 부분을 통과할 때를 생각해 보세요. 빛은 바로 통과하지 않고, 표면 전반적으로 확산됩니다. UE4 의 머티리얼은 풀잎에서 보듯이 이러한 효과를 흉내낼 수 있습니다.

[REGION:fullwidth]
![](GrassUpClose.png)
[/REGION]


[REGION:note]
	머티리얼이 서브서피스 스캐터링을 활용하기 위해서는, 머티리얼의 **Shading Model** 프로퍼티가 _MLM_Subsurface_ 로 설정되어 있어야 합니다. 이 프로퍼티는 메인 머티리얼 노드의 머티리얼 에디터 프로퍼티 패널에서 찾을 수 있습니다.
[/REGION]

그런데 여기서 중요한 점은, 물리적으로 정확한 서브서피스 스캐터링 모델은 아니라는 점입니다. Base Color 와 함께 "Subsurface Color" 를 사용하여 표면을 통과하는 빛의 효과를 시뮬레이션해 내고, 그 확산 과정에서 Subsurface Color 를 선택합니다. 그 효과를 표로 나타내 보면 다음과 같습니다:


![](SubScatDiagram.png)(w:600)



이 머티리얼을 살펴보려면:

1. 풀밭 판넬을 아무거나 선택합니다.

	![](GrassPanelSelected.png)(w:500)

1. 디테일 패널에서 _Materials_ 카테고리 위치를 찾습니다.

	![](MaterialsCategory3.png)

1. 더블클릭하면 머티리얼 에디터에 풀 머티리얼이 열립니다.

	[REGION:fullwidth]
	![](Grassmat.png)
	[/REGION]


이 머티리얼에서 **Shading Model** 프로퍼티가 _MLM_Subsurface_ 로 설정되어 있습니다. Base Color 텍스처는 연한 녹색으로 30% 보간되고 있습니다. 이로써 풀잎에 닿는 빛에 아주 미묘한 느낌을 내어 주면서, 연녹색 빛이 각 풀잎에 퍼져나가는 느낌을 줍니다.





## 한 오브젝트에 여러 머티리얼

[REGION:fullwidth]
![](MultiMaterials.png)
[/REGION]

씬 왼쪽의 세발 자전거에는 8 개의 머티리얼 엘리먼트로 되어 있으며, 모델 표면에 걸쳐 나뉘어 있습니다. 차례로 이들 슬롯 안에는 5 개의 머티리얼이 놓여 있습니다. 이는 어떻게 한 것이냐면, 언리얼로 FBX 를 익스포트하기 전 3D 콘텐츠 제작 어플리케이션에서 모델에 다수의 머티리얼을 먼저 놓은 것입니다. 이 프로세스는 사용하는 어플리케이션의 종류별로 각기 다르게 처리되지만 결과는 똑같습니다. 참고로 3ds Max 와 그 멀티-서브오브젝트 머티리얼 시스템은 예외인데, 멀티 머티리얼이 알고리즘적 순서대로 언리얼로 임포트되니 원하는 바가 아닐 것입니다. 예를 들어 첫 머티리얼 엘리먼트 슬롯은 캐릭터의 머리에 쓰고, 둘 째 슬롯은 몸통에 쓰고 싶을 수가 있습니다. 마야에서 임포트할 때는 FBX 파일이 그 순서를 바꿀 수가 있습니다.

이에 대한 해법으로, 3D 어플리케이션에서 머티리얼 이름을 지을 때 **_skin***** 식으로 접두사를 달아주도록 하세요. ******* 는 (_skin001, _skin002 식으로) 번호를 나타냅니다. 언리얼에서는 머티리얼 엘리먼트 순서를 둘 때 이 머티리얼 이름을 참고합니다. 또한 앞서 말했듯이 3ds Max 는 예외입니다. 그 이유는 Multi-SubObject 머티리얼을 사용하여 폴리곤에 적용되는 Material ID 번호 때문입니다. 언리얼에서는 별도의 작명 규칙이 아닌 이 값을 사용하여 머티리얼 엘리먼트를 놓을 수 있습니다.

참고로 세발 자전거에 적용된 5 개의 머티리얼 각각은 지나치게 단순해서, 각각 평이한 Base Color, 노멀 맵과 여러가지 Metallic, Roughness 값으로 주요 표면 속성을 결정하고 있습니다.


## 머티리얼 함수를 통한 다중 머티리얼 블렌딩

씬 오른편의 세발 자전거는 _머티리얼 함수_ 를 사용하여 일련의 머티리얼을 서로 블렌딩, 여러 머티리얼 엘리먼트 슬롯을 요하지 않고도 하나의 머티리얼을 적용한 결과를 내고 있습니다.

[REGION:fullwidth]
![](RightTricycle.png)
[/REGION]

표준 머티리얼을 사용하는 대신 세발 자전거의 (빨강 페인트, 크롬, 고무 등) 각 부분은 우선적으로 자체 머티리얼 함수 안에 배치되어 있습니다. 머티리얼 함수는 그 안에 _Make Material Attributes_ 노드를 놓을 수 있어서, 사실상 기본 머티리얼과 똑같은 식으로 작동하도록 만들 수 있습니다. 한 가지 예외라면 _머티리얼 함수는 그 안에 다른 머티리얼 함수를 몇이든 포함시킬 수 있다는 점입니다_. 즉 여러가지 필수 표면 유형을 나타내기 위한 머티리얼 함수 시리즈를 생성한 이후에는, 하나의 마스터 머티리얼 함수에 불러모은 다음, 블렌드 텍스처를 사용하여 어느 픽셀에 어느 머티리얼을 놓을지 결정할 수 있습니다. 예를 들어 이렇게 단순화된 도표를 봅시다:

![](MaterialFunction_Diagram.png)(w:600)


세발 자전거를 이루는 베이스 머티리얼 각각은 그 자체적으로는 머티리얼 함수들입니다. _ML_Rocket_BasicMat_RedColor_ 처럼 그 중 하나를 열어 보면, Base Color 와 Roughness 텍스처로 구성된 꽤나 단순한 네트웍임을 알 수 있습니다.

**클릭하면 원래 크기로 볼 수 있습니다.**

[REGION:lightbox]
[![](RedPaintMF.png)(w:600)](RedPaintMF.png)
[/REGION]


세발 자전거에 실제로 적용된 머티리얼 함수를 살펴보면 이렇습니다:

[REGION:fullwidth]
![](FinalTricycleLayers.png)
[/REGION]

5 개의 머티리얼 함수로 이루어져 있으며, 그 각각은 RGBA 텍스처를 알파로 하여 **MatLayerBlend_Standard** 함수를 사용해서 블렌딩되고 있습니다. 이 작업은 시리즈로 이루어지는데, **MatLayerBlend_Standard** 함수 각각의 _Blended Material_ 출력이 다음 Base Material 입력으로 사용되는 식입니다.

![](MatFunctionBlend.png)(w:700)

RGBA 텍스처의 여러가지 채널을 사용함으로써 하나의 맵을 통해 머티리얼을 최대 5 개까지 블렌딩할 수 있습니다. 참고로 검정, 또는 RGBA 정보가 없는 부분은 베이스 머티리얼을 노출시키므로, 4 개의 (RGBA) 슬롯만으로도 5 개의 옵션을 얻을 수 있습니다. 사용되는 텍스처는 아래와 같이 표시됩니다:

![](TricycleBlendMap.png)(w:400)

| **맵 컬러** | **연관된 머티리얼** |
| --- | --- |
| **검정 (베이스 머티리얼)** | 빨강 세발 자전거 페인트 |
| **빨강** | 크롬 |
| **초록** | 노랑 페인트 |
| **파랑** | 검정 고무 |
| **알파** | 빨강 고무 |

이 블렌딩을 전부 하고 나면, 최종 Blended Material 출력을 **MatLayerBlend_GlobalNormal** 함수로 통과시켜, 다음과 같이 하나의 노멀맵을 전체 최종 결과에 적용시킬 수 있습니다:

![](NormalMapApplied.png)

머티리얼 함수 관련 상세 정보는, [](Engine/Rendering/Materials\Functions) 문서를 참고해 주시기 바랍니다.

## 관련 토픽

* [](Engine/Rendering/Materials)
* [](Engine/Rendering/Materials\Functions)
