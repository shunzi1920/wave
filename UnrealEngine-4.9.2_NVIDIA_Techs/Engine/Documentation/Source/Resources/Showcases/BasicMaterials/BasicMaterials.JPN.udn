INTSourceChangelist:2620111
Availability:Docs
Title:基本マテリアルの例
Crumbs:%ROOT%, Resources
Description:UE4 に同梱されている基本マテリアル例の概要



[VAR:Topic]
[OBJECT:Topic]
	[PARAM:image]
		![%Resources/Showcases/BasicMaterials:title%](BasicMaterials_Topic.png)
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%\anim_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Resources/Showcases/BasicMaterials:title%
	[/PARAM]
	[PARAM:description]
		%Resources/Showcases/BasicMaterials:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Resources/Showcases/BasicMaterials]
	[/PARAM]
[/OBJECT]
[/VAR]


[VAR:TopicCompact]
[OBJECT:TopicCompact]
	[PARAM:image]
		![%Resources/Showcases/BasicMaterials:title%](BasicMaterials_Topic.png)
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%\anim_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Resources/Showcases/BasicMaterials:title%
	[/PARAM]
	[PARAM:description]
		%Resources/Showcases/BasicMaterials:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Resources/Showcases/BasicMaterials]
	[/PARAM]
[/OBJECT]
[/VAR]



[REGION:fullwidth]
![](Tricycles.jpg)
[/REGION]

[TOC(start:2)]

このサンプルでは、アンリアル・エンジン 4 (UE4) の強力なマテリアルシステムの利用に必須の最も基本的かつ重要ないくつかのコンセプトの概要を紹介します。以下の機能がサンプルに含まれます。

* [基本的な Lit マテリアル](#シンプルなマテリアル)
* [サブサーフェススキャタリング マテリアル](#サブサーフェススキャタリング)
* [単一オブジェクト上の複数マテリアル](#単一オブジェクトの複数マテリアル)
* [Material関数](#Material関数を用いた複数マテリアルのブレンド)



BasicMaterial マップが初めて開かれると、ほぼ同一の子供用三輪車が 2 つのシーンに現れます。2 つの三輪車は木のフェンスに囲まれた小さな芝生エリアに並んでいます。このシーンに含まれる各要素は、マテリアルの作成と使用に関する基本原理をいくつか示しています。このドキュメントの目的を遂行するために、各要素のマテリアルについて始めは簡単な内容から徐々に複雑な内容へと説明していきます。


## シンプルなマテリアル

最初のオブジェクトは最も基本的なマテリアルタイプを表現しています。Shading Model プロパティに _MLM_DefaultLit_ を設定しています。デモレベルの背景にある木のフェンスは、単一マテリアルが適用された単一スタティックメッシュで構成されています。このマテリアルは「 _M_Rocket_BasicMat_Fence_ 」と名前が付けられています。マテリアルのノードネットワークの表示は以下の手順で行います。

1. いずれかのフェンスパネル メッシュを選択します。

	![](FencePanel.png)(w:500)

1. **[Details (詳細)]** パネルで _Materials (マテリアル)_ カテゴリを検索します。

	![](MaterialsCategory2.png)

1. **ダブルクリック** すると、マテリアル エディタでフェンスのマテリアルが開きます。

	[REGION:fullwidth]
	![](FenceMat.png)
	[/REGION]


マテリアルはシンプルな 2 つのテクスチャで構成されています。1 つのテクスチャはBase Color プロパティを定義し、もう片方はサーフェス法線を提供します。2 つの Constant ノードは、メタリックに 0、ラフネスに対し 0.9 の値を使用します。つまり、サーフェスには反射性やスペキュラリティ (鏡面反射性) が実質的に存在せず、ただの古い木のように見えます。

マテリアルに関する詳細は、[](Engine/Rendering/Materials) ページを参照してください。


## サブサーフェススキャタリング

レベルのフロアの大部分を構成している芝生のパネルは、サブサーフェス スキャタリングを使用しています。サブサーフェス スキャタリングは、透過マテリアルを通過するライトのシミュレーションです。キャンドルから立ち上る光を思い描いてください。光は真っ直ぐではなく、キャンドルの表面から拡散していきます。草の葉のデモのように、UE4 のマテリアルはこのようなエフェクトをシミュレートします。

[REGION:fullwidth]
![](GrassUpClose.png)
[/REGION]


[REGION:note]
	マテリアルでサブサーフェス スキャタリングを利用するには、マテリアルの **Shading Model** プロパティを _MLM_Subsurface_ に設定しなくてはいけません。このプロパティは、メインの Material ノードを選択すると、マテリアル エディタ プロパティパネル内にあります。
[/REGION]

これは物理的に正確なサブサーフェス スキャタリングではないことに注意してください。代わりに、Base Color と一緒に「Subsurface Color」を使用し、表面を通過するライトのエフェクトをシミュレートしてサブサーフェス カラーをディフューズ時に受け取っています。エフェクトは以下の図と類似しています。


![](SubScatDiagram.png)(w:600)



このマテリアルを見るには、

1. いずれかの芝生のパネルを選択します。

	![](GrassPanelSelected.png)(w:500)

1. **[Details (詳細)]** パネルで _Materials (マテリアル)_ カテゴリを検索します。

	![](MaterialsCategory3.png)

1. **ダブルクリック** すると、マテリアル エディタで草のマテリアルが開きます。

	[REGION:fullwidth]
	![](Grassmat.png)
	[/REGION]


このマテリアルでは **Shading Model** プロパティを _MLM_Subsurface_ に設定しています。Base Color テクスチャは 30 ％の淡緑色で補間されています。草の葉にあたるわずかなキャストをライトに与えています。淡緑色のライトがそれぞれの葉に移動している錯覚をもたらします。





## 単一オブジェクトの複数マテリアル

[REGION:fullwidth]
![](MultiMaterials.png)
[/REGION]

シーンの左側にある三輪車には、モデルのサーフェス上に分散する 8 つの個別のマテリアル要素があります。同様に、これらのスロットには 5 つの個別のマテリアルが配置されています。これは FBX をアンリアルへエクスポート前に、まず 3D コンテンツを作成するアプリケーション内部のモデルに複数のマテリアルを配置して実現します。さまざまなパッケージがあり処理方法はそれぞれ異なりますが、結果は全て同じです。3ds Max とその Multi-SubObject マテリアル システムを例外に、複数のマテリアルはアンリアルへアルゴリズムを適用した順序でインポートされるため、ユーザーの意図に反する場合があります。例えば、最初のマテリアル要素のスロットをキャラクターの頭に使用し、2 番目のスロットをボディに使用するとします。Maya からマテリアルをインポート時に、FBX ファイルによってこの順番が変更するかもしれません。

この問題を解決するには、3D パッケージのマテリアル名に **_skin******* を接尾語として付けます。******* は実際には数値を表します（_skin001、 _skin002など）。マテリアル要素の順序を決める際に、アンリアルはこれらのマテリアル名を考慮に入れます。3ds Max はこのケースから除外されることは既に述べました。理由は Multi-SubObject マテリアルを使用してポリゴンへ適用するマテリアル ID の番号に由来します。アンリアルは命名規則を使用する代わりに、マテリアル要素の配置にこれらの値を使用します。

三輪車に適用された 5 つの各マテリアルは極めて基本的です。それぞれのマテリアルには均一なベースカラー、法線マップ、メタリックとラフネスにさまざまな値を使用し、主要なサーフェスのプロパティを定義します。


## Material関数を用いた複数マテリアルのブレンド

シーンの右側にある三輪車は一連のマテリアルのブレンドに _Material関数_ を使用します。複数のマテリアル要素のスロットを必要とせずに単一マテリアルが適用された結果になります。 

[REGION:fullwidth]
![](RightTricycle.png)
[/REGION]

標準のマテリアルを使用する代わりに、三輪車のそれぞれのパーツ (赤色の塗料、クロム、ゴムなど) はまず独自の Material 関数内に配置されます。Material 関数は、関数内に _Make Material Attributes_ ノードを持つことができます。事実上、以下の1 つの例外を除いて基本的なマテリアルの動作をします。 _Material 関数は、関数内に他の Material 関数をいくつでも含むことができます。_つまり、必要とするサーフェスの様々なタイプを表現する一連の Material 関数が作成されると、これらを一つのマスター Material 関数としてまとめることができます。ブレンドテクスチャを使用して、ピクセルへ配置するマテリアルを決定します。例えば、以下の簡素化した図をご覧ください。

![](MaterialFunction_Diagram.png)(w:600)


三輪車を構成しているベースの各マテリアルは Material 関数に含まれる Material 関数か、Material 関数そのものです。例えば _ML_Rocket_BasicMat_RedColor_ など 1 つの関数を開いてみると、とても基本的なネットワークで、ラフネステクスチャの Base Color で構成されているのがわかります。

**クリックして画像をフルサイズで表示**

[REGION:lightbox]
[![](RedPaintMF.png)(w:600)](RedPaintMF.png)
[/REGION]


三輪車に実際に適用されている Material 関数を詳細に調べると、以下のことがわかります。

[REGION:fullwidth]
![](FinalTricycleLayers.png)
[/REGION]

5 つの Material 関数から構成されているのがわかります。RGBA テクスチャをアルファ値として、 **MatLayerBlend_Standard** 関数でそれぞれの関数がブレンドされています。 **MatLayerBlend_Standard** 関数のそれぞれの _Blended Material_ 出力を次の Base Material 入力として使用といった一連の実行が行われます。 

![](MatFunctionBlend.png)(w:700)

RGBA テクスチャの異なるチャンネルを使用して、最大 5 つまで別々のマテリアルをひとつのマップでブレンドすることができます。黒または RGBA 情報の欠如ではベースマテリアルがエクスポーズされることに注目してください。4 つしかないスロット (RGBA) から 5 つのオプションを取得する方法です。使用中のテクスチャは以下の通りです。

![](TricycleBlendMap.png)(w:400)

| **マップのカラー** | **関連マテリアル** |
| --- | --- |
| **黒 (ベースマテリアル) ** | 三輪車の赤色の塗料 |
| **赤** | クロム |
| **緑** | 黄色の塗料 |
| **青** | 黒いゴム |
| **アルファ** | 赤いゴム |

全てのブレンドが終了すると、最後にブレンドされたマテリアルの出力値は **MatLayerBlend_GlobalNormal** 関数を使用して渡されます。これにより単一法線マップが最終結果全体へ適用されます。以下のような結果となります。

![](NormalMapApplied.png)

Material 関数に関する詳細は、[](Engine/Rendering/Materials\Functions) ページを参照してください。

## 関連トピック

* [](Engine/Rendering/Materials)
* [](Engine/Rendering/Materials\Functions)
