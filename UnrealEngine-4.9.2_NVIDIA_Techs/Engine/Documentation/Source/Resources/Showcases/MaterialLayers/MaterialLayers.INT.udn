Availability: Docs
Title:Material Layers: Rockets
Crumbs:%ROOT%, Resources
Description:An overview of the Material Layers example included with UE4.


[VAR:Topic]
[OBJECT:Topic]
	[PARAM:image]
		![%Resources/Showcases/MaterialLayers:title%](LayeredMaterials_Topic.png)
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%/rendering_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Resources/Showcases/MaterialLayers:title%
	[/PARAM]
	[PARAM:description]
		%Resources/Showcases/MaterialLayers:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Resources/Showcases/MaterialLayers]
	[/PARAM]
[/OBJECT]
[/VAR]

[VAR:TopicCompact]
[OBJECT:TopicCompact]
	[PARAM:image]
		![%Resources/Showcases/MaterialLayers:title%](LayeredMaterials_Topic.png)
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%/rendering_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Resources/Showcases/MaterialLayers:title%
	[/PARAM]
	[PARAM:description]
		%Resources/Showcases/MaterialLayers:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Resources/Showcases/MaterialLayers]
	[/PARAM]
[/OBJECT]
[/VAR]


[REGION:fullwidth]
![](MaterialLayerRockets.png)
[/REGION]

[TOC(start:2)]

This example focuses on the concept of Material Layers. This is the technique of layering together a series of Material Functions, allowing you to create a single blended Material that is comprised of various others. Best of all, the separation of each of these layers can be done via a texture (per-pixel), rather than on a polygon-by-polygon basis, as would have to be done if applying multiple Materials to a single object. 

The example consists of six rocket Static Meshes ready for launch on a wide platform. Each of the six rockets showcases a different Material or Material Function. The first four of these define different real-world Materials, such as plastic and various metals. The last two on the right are actually blended Material Functions in which each of the four base Materials have been blended together to give a final result.

[REGION:fullwidth]
![](RocketBreakdown.png)
[/REGION]

1. Red Plastic (Material)
1. Chrome (Material)
1. Aluminum (Material)
1. Copper (Material)
1. Blended Result 1 (Material Function)
1. Blended Result 2 (Material Function)



## Combining Textures


Each of the rockets in this example make use of an RGB texture that is in itself comprised of several grayscale layers, each layer performing a different function. Below is a breakdown of this texture:

![](RocketGrimeTex.png)(w:500)

1. **Red Channel** - Grime
1. **Green Channel** - Scratches and damage
1. **Blue Channel** - Ambient occlusion
1. **RGB Combined** - Final result

Using this method allows for one texture to be used in multiple ways, saving memory over having to import each channel as a separate texture.


## Base Material

Each of the first four rockets are using what amounts to the same Material Function, with some alternating values to give different physical properties. 

1. Select any of the first 4 rockets, starting from the left.

	![](BaseRocketSelected.png)(w:500)

1. In the **Details** panel, locate the _Materials_ category.

	![](BaseRocketMaterialDetails.png)

1. **Double-click** to open the rocket's Material Function in the Material Editor. This Material Function looks like this:


**Click for full size.**

[REGION:lightbox]
	[REGION:fullwidth]
	[![](RocketMLFunction2.png)](RocketMLFunction2.png)
	[/REGION]
[/REGION]

In this example, the _ML_Plastic01_ Material Function is set up to define an actual Material by way of a **Make Material Properties** node. If you **double-click** the _ML_Plastic01_ node, you can jump down into it and see the network that defines the plastic Material, like so:


**Click for full size (very large)** 

[REGION:lightbox]
[![](BaseMaterialML.png)(w:700)](BaseMaterialML.png)
[/REGION]

So you can see how a **Make Material Properties** node can be used to treat a Material Function just like a regular Material, which in turn paves the way for Material blending, which we will see in the 5th and 6th rockets in this example.

## Blended Materials

The fifth rocket from the left of the scene contains a blended Material. This is a Material Function that is blending in the Material Functions from the Copper, Aluminum, and Chrome rockets on the left side of the scene. 

1. Select the fifth rocket, starting from the left.

	![](FifthRocketSelected.png)(w:500)

1. In the **Details** panel, locate the _Materials_ category.

	![](BlendedMaterialDetails.png)

1. **Double-click** to open the rocket's Material Function in the Material Editor. This Material Function looks like this:

	**Click for full size (very large)**

	[REGION:lightbox]
		[REGION:fullwidth]
		[![](BlendedMaterialNetwork.png)](BlendedMaterialNetwork.png)
		[/REGION]
	[/REGION]


### Setting Up Initial Materials

So what is going on here? We have three Materials that have been established, being the Copper, Aluminum, and Chrome Materials. In this Material Function we start by applying grime and scratches to each of these Materials via the combined texture, [shown above](#CombiningTextures). 

![](GrimeAndScratches.png)


### Reusing Materials by Modulating Properties

Next, the Copper Material is actually re-tinted and then has its Roughness property increased by 150%, forming a fourth Material type, as well as a fifth Material type, which is a simple mirrored chrome.

![](AdditionalBlendedMaterials.png)

### Blending with Texture Channels

We now have a total of five Materials to blend together. The blending will be done using **MatLayerBlend_Standard** nodes and an RGBA combined texture. Here is a breakdown of the texture and its channels:

[REGION:fullwidth]
![](RocketBlendingTextureBreakdown.png)
[/REGION]

| **Number** | **Channel** | **Purpose** |
| --- | --- | --- |
| **1** | RGBA | Unused. |
| **2** | Red | Nose cone of the rocket. |
| **3** | Green | Exhaust thruster of the rocket. |
| **4** | Blue | Stabilizer fins of the rocket. |
| **5** | Alpha | Rocket accents, such as rivets and hinges. |
| [REGION:tablesection]_Black pixels define the rocket's main fuselage._[/REGION]|||


Using this texture, the Material is blending with this node setup:

![](LayerBlending.png)(w:600)


### Applying the Normal Map

Once the blending is complete, we can then apply a normal map across the entire surface using a **MatLayerBlend_GlobalNormal** node, along with a normal map texture, like so:

![](NormalMapGlobal.png)

### Adding in Cavity and Ambient Occlusion

The combined texture shown earlier contains ambient occlusion and cavity map data within its blue channel. Our final step for the Material is to apply this to the entire surface by way of a **MatLayerBlend_TintAllChannels** node, which will multiply the incoming result by a texture value. In this case, we just use the texture's blue channel for the tint color, and we can thereby make use of the ambient occlusion map.


![](AmbientOcclusionApplied.png)


## Related Topics

* [](Engine/Rendering/Materials)
* [](Engine/Rendering/Materials\IntroductionToMaterials)
* [](Engine/Rendering/Materials\Functions)
