INTSourceChangelist:2614123
Availability:Public
Title:Water （水） の例
Crumbs:%ROOT%, Resources, Resources/Showcases/Effects
Description:パーティクル エフェクト例の一部として UE4 に同梱されている Water (水) エフェクトの概要
Related:Engine/Rendering/ParticleSystems/Reference/TypeData/GPUSprites
Related:Resources/ContentExamples/EffectsGallery/1_E
Related:Engine/Rendering/ParticleSystems/Optimization

[REGION:fullwidth]
![](title_Water.png)
[/REGION]

[TOC (start:2)]



以下のパーティクルシステムはこのサンプルのために作成した水のエフェクトです。それぞれのエフェクトがどのように作成されているかを理解するために、これらのエフェクトをカスケードで開くことを推奨します。

カスケードやパーティクルシステムに関する詳細は [パーティクル システムのドキュメント](Engine/Rendering/ParticleSystems) を参照してください。

### ウォーターフォール

![](WaterfallSection.png)(w:600)


**コンテンツブラウザの位置：** _Game/Effects/Particles/Water/P_WaterFall_

Waterfall エフェクトは、岩群を滝のように流れる水のエフェクトをシミュレートする複数のマテリアルとパーティクルシステム設定の組み合わせです。このエフェクトで特に重要なのは、カメラのアライメントが重要な役割を持つということです。プレイヤーが真っ直ぐ水方向へ近づくのではなく、わずかに離れた距離から眺める設定になっています。

これらのパーティクルは透過マテリアルを使用しているため、オーバードローコストが発生します。つまり水の落下を処理するには一枚一枚レンダリングを重ねなくてはいけません。しかしこれらは GPU スプライトであり GPU へ渡されるため、実際の _シミュレーション_ (ティック) は低コストになります。この手法を用いることにより、マテリアルやスタティックメッシュのみで作成するエフェクトよりも、より複雑でインタラクティブな動作を実現することができます。エフェクトにさらに変化をもたらすために、この二つの技術を結合することができます。

### コリジョン

![](CollisionWithRocks.png)(w:600) ![](ModuleStack.png)(h:366)

岩肌を水が流れ落ちる時、水がしぶきをあげて表面と衝突している様子がわかります。この効果には GPU スプライトのみで利用可能な Collision (シーンの深度) オペレータを使用しています。コリジョンサーフェスの演算に Scene Depth G-Buffer を使用し、最低限のパフォーマンスコストで実現します。 


### パーティクルカラー

GPU スプライトパーティクルがダイナミックパラメータをサポート **しない** ことを覚えておくことは大変重要です。これは通常パーティクルシステムからマテリアルへデータを送信するために使用します。これに対応するためにマテリアル内の ParticleColor ノードを使用したトリックが用いられています。通常このノードは、パーティクルの存続期間にわたって色とアルファ値をアニメートして、落下時のパーティクルの色を変更します。ここで、赤、緑、青そしてアルファ (RGBA) データを使用してそれ以外の動作をお見せします。水は実際に色を変更する必要はないため (水は結局のところ無色なため)、パーティクルカラーデータを以下のように使用します。

* **赤** - 水の屈折率またはライトを屈折させる変化量を操作します。
* **緑** - 実際の色を操作します。緑チャンネルは、グレースケールの結果をもたらす、色の全 RGB データを操作することになります。
* **Alpha** - 水のオパシティを操作します。



マテリアル (_M_WaterDrop_SubUV_) を調べると、上記の説明通りにこれらの値が ParticleColor ノードで操作されているのが分かります。



**ここをクリックしてフルサイズ表示にする**
[REGION:lightbox]
[![](WaterMaterial.png)(w:400)](WaterMaterial.png)
[/REGION]

カスケードで P_Waterfall パーティクルシステムを開いた際は、Scale Color / Life モジュールに特に留意してください。存続期間の前半は非常に明るく (1.0 以上) をアニメートし、アルファが黒から白へ切り替わり、徐々に黒へ戻ります。結果は以下のようなきれいなフェードイン、そしてまた色が薄れていきます。

![](ColorAlphaAnimated.png)


## Splash と Ripple Effects

![](SplashRipple.png)(w:600)

**コンテンツブラウザの位置：** _/Game/Effects/Particles/Water/P_Drips_Splash_Ripples_

このパーティクル エフェクトは水滴が水面へ落下時の滴たる水とスプラッシュ / リップル効果の両方を処理しています。パーティクルシステム内でさまざまな一連のエミッタを使用しました。一連のエミッタは落下する水のエフェクトを処理し、その他は水滴が水面に衝突した際の水の跳ね返りを処理しています。残りのエミッタは水面に広がる波紋を処理しています。つまりこのエフェクトは不動の水面へ配置して現実的なエフェクトをもたらす準備が整っています。

パーティクルシステムは、ParticleColor ノードを利用してオパシティを操作する Lit Translucency Material も使用します。これによりパーティクルシステムは、Scale Color/Life モジュールを利用してオパシティを操作することができます。このケースでは、アルファはパーティクルの寿命初期ではほぼ不透明にアニメートされています。つまりライトの影響をたいへん受けやすくなっています。 

![](FallingWaterDrops.png)(w:300)

上記のスクリーンショットは、落下するパーティクルのほとんどが画像の上部付近では鮮やかな白であることに注目してください。初めは、鮮やかな白がパーティクル周りをハイライトするため自然現象のような表示になります。しかしこの瞬間のパーティクルには文字通り _より透過_ するように指示が出されているため可能なのです。結果レベルのライティングがより多用されています。




[INCLUDE:Resources\Showcases\Effects#ParticleTopics]
