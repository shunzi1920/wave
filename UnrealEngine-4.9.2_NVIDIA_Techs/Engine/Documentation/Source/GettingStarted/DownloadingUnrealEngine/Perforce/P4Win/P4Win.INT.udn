Availability: Licensee
Title:Setting up P4Win for Unreal Engine 4
Crumbs:%ROOT%, Engine, Programming, Programming/Basics, GettingStarted/DownloadingUnrealEngine/Perforce
Description:Guide to installing, setting up, and syncing builds with the Perforce P4Win windows client for use with Unreal Engine 4.

[TOC(start:2)]

This document covers the steps in setting up the P4Win client to connect to the Unreal Engine 4 depot and get a build of the engine.

To connect to Perforce, you need to set up a secure Virtual Private Network (VPN) [Connection to Epic Games](GettingStarted/DownloadingUnrealEngine/VPNSetup).

For other general tips, see the [Setting up Perforce](GettingStarted/DownloadingUnrealEngine/Perforce/Setup) page.



## Installation

Run the P4Winst executable installer. 

1. On the _Perforce Installation Configuration_ page, _User Installation_ is selected by default. Click _Next_. 
1. On the _User Installation_ page, all of the components are selected by default. Click _Next_. 
1. On the _Perforce Client Installation Directory_ page, determine the destination directory. **C:\Program Files\Perforce** is browsed to by default. Click _Next_. 
1. On the _Perforce Client Configuration_ page, enter the following information:
    * _Server Port_: **p4-licensee-proxy.epicgames.net:1667** (available through the US and East Asian VPN) or **p4-licensee-proxy-asia.epicgames.net:1667** (primary for those connected through the East Asian VPN).
    * _Username_: provided in original UDN welcome email, typically your Team Name (**NOTE**: this is different from your UDN login information).
1. Click _Next_. 
1. On the _Perforce Installation Summary_ page, review the installation information. Click _Install_.
1. On the _Perforce Installation Closing Summary_ page, choose whether or not you wish to reboot. Click _Finish_.

NOTE: You can later reconfigure the IP address, as needed, via the _Settings_ menu. Please use the name to connect to the server, not the resolved IP address. The IP address may change if the server computer is changed; but the name will remain the same!



## Configuration - ClientSpecs

Just a few easy steps!

If you are a content developer, or if you would simply like to run the example game or editor without building, you are looking for the UE4 Build. Otherwise, you are looking for the UE4 Source Code, which must be compiled.

1. Connect to Epic Games through the VPN connection.
1. Run P4Win.
1. If the initial _Client Workspace Wizard_ dialog appears, click _Cancel_.
1. Select the _View Clientspecs_ button to show a list of Perforce Clients. If a list does not appear, click the _Refresh_ button.
1. **Right-click** on the appropriate template:
    * **IF YOU WANT SOURCE CODE ONLY** In the right _Perforce Clients_ pane, find **UE4_Template_Code**.
    * **IF YOU WANT SOURCE CODE BUT NO UT3 CONTENT** In the right _Perforce Clients_ pane, find **UE4_Template_Code_NoUT3**.
    * **IF YOU WANT EXECUTABLES AND NOT SOURCE** In the right _Perforce Clients_ pane, find **UE4_Template_Build**.
1. Select _Create/Replace Client Using_ **UE4_Template_(Build/Code)** _as Template..._.  
1. A dialog will appear.  Fill in the following information:
    * **IF YOU ARE A LICENSEE** _Client Name_: **UE4_Licensee_[TEAMNAME]** (or otherwise ending with your UDN username or team name)
    * **IF YOU ARE A CONTRACTOR** _Client Name_: **UE4_Contractor_[USERNAME]** (or otherwise ending with your UDN username or team name)
1. Click _OK_.
1. A _Perforce Client Specification_ will appear. Set your _Root_ to a drive or directory on your local machine - something with many, many gigabytes free. **NOTE:** The full directory path should have no spaces, or else you may have trouble later on playing levels from the editor. All the other defaults are fine.
1. Click _Update_.
1. If the _Client Workspace Wizard_ dialog reappears, click _Cancel_ again.
1. If you are prompted to do a full sync to head revision, decline the offer. You **really** do not want several gigabytes of data that you will have to replace shortly, do you?
1. In the right pane, **right-click** on the clientspec you just created, and choose _Switch to UE4_Licensee_[USERNAME]_. (this may happen automatically)
1. **Right-click** on the clientspec again, and choose _Set Default Client to UE4_Licensee_[USERNAME]_.

Now you are all set!

Clientspecs are created on a per-machine basis, because they keep track of the exact revision of each file that has been stored on that machine's hard drive in the selected directory. Thus, if you ever need to start syncing from a different PC, you will need to repeat this process to create a new clientspec on that machine.

IMPORTANT NOTE: If you are an anonymous user you will want to create a clientspec that is named: UE4_Anonymous_#  where the # matches your Anonymous userid (e.g. UE4_Anonymous_8). Additionally, you will not want to put any url names in any of the fields. And you may not want to have a machine name that is recognizable. All of those fields can be seen by other users if they search the users or clientspec listings.


### Troubleshooting

If you experience the following error when viewing the depot:


    
    WARNING: //depot/* - no permission for operation on file(s).
    



... you are using an unrestricted view clientspec. Please be sure to base your clientspec off of one of the defined templates.

As of version 2008.1, unrestricted clientspecs are no longer supported because they are bad for server performance.

If you are using one of the defined templates, be sure that you are not viewing the entire depot. Use the client view of the depot, instead.



## Getting the Latest Build


### Depot - Client View of Directories

To the left there should be _Client View of Depot_ pane. Expand the _//depot_ tree. There should be an _UnrealEngine3_ directory which contains everything to build and run UnrealEngine3. You may also see one or more of the following directories:

* _PhysX_ - contains the common files for the physics middleware; depending on your agreement, you may also see additional directories and files.


For more information, see the [directory layout](Engine/Basics/DirectoryStructure) page.

When synchronizing, lots of downloading will progress in the log window. _Sync completed with no warnings or errors_ is what you are looking for when it is done.


#### Unreal Engine 4

In the _UnrealEngine3_ directory are several subdirectories: _Binaries_, _Development_, and _Engine_; and two game directories: _ExampleGame_ and _UTGame_.

_ExampleGame_ is the most minimal game implementation offered by Epic, and can be a good place for getting started in creating your own game project if your game is not very similar to _Unreal Tournament_.  

_UTGame_ is based on Epic's _UT3_ &ndash; released in 2007. This is a good starting point for understanding how to create a commercial game in development, and thus provides a complex example showing exactly how Epic uses the engine. Be aware that the source available in UTGame is a lighter version than what was used in the final version. We recommend using _UTGame_ as an example, rather than extending from _UTGame_. You are welcome to use any C++ or Unrealscript code in _UTGame_ for your game project, but you cannot ship any of Epic's content (textures, meshes, levels, sounds, etc.) in your game.

For _UnrealEngine3_, most of Epic's content is located in the game-specific directories, so if all you want is the engine source, you can simply sync to the //depot/UnrealEngine3/Development directory. You can highlight specific directories as desired, for example, to grab the latest content for _ExampleGame_ without updating _UTGame_ content. 


### Sync - Download

Once you have selected the directories to update, **right-click** and select _Sync to Revision, Label, Changelist, or Date..._. Choose the _Other_ radio button to sync to either a specific changelist or label.


#### Get the Files

Once either a changelist or label has been selected. Click _Sync Files_. Do NOT sync to the head revision as it may contain code that does not compile, or worse, is subtly broken.



## Working with Source Control

Almost any file can be integrated into source control.

The lifecycle of the files in your project can be managed via common commands:

* check out
* submit, or check in
* revert, or roll back
* revisions - history


In addition to working with source control directly in Perforce, you can also use the editor tools. See [SCC Integration](Engine/UI/SourceControl) for information on how to manage content packages from within UnrealEd itself.

 




